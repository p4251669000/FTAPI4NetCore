// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Futu.OpenApi.Pb {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class TrdCommon {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_Trd_Common_AccCashInfo__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo, global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo.Builder> internal__static_Trd_Common_AccCashInfo__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_AccMarketInfo__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo, global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo.Builder> internal__static_Trd_Common_AccMarketInfo__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_TrdHeader__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdHeader, global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder> internal__static_Trd_Common_TrdHeader__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_TrdAcc__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdAcc, global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.Builder> internal__static_Trd_Common_TrdAcc__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_Funds__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Funds, global::Futu.OpenApi.Pb.TrdCommon.Funds.Builder> internal__static_Trd_Common_Funds__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_Position__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Position, global::Futu.OpenApi.Pb.TrdCommon.Position.Builder> internal__static_Trd_Common_Position__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_Order__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Order, global::Futu.OpenApi.Pb.TrdCommon.Order.Builder> internal__static_Trd_Common_Order__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_OrderFeeItem__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem, global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem.Builder> internal__static_Trd_Common_OrderFeeItem__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_OrderFee__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.OrderFee, global::Futu.OpenApi.Pb.TrdCommon.OrderFee.Builder> internal__static_Trd_Common_OrderFee__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_OrderFill__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.OrderFill, global::Futu.OpenApi.Pb.TrdCommon.OrderFill.Builder> internal__static_Trd_Common_OrderFill__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_MaxTrdQtys__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys, global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.Builder> internal__static_Trd_Common_MaxTrdQtys__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_TrdFilterConditions__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions, global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.Builder> internal__static_Trd_Common_TrdFilterConditions__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static TrdCommon() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBUcmRfQ29tbW9uLnByb3RvEgpUcmRfQ29tbW9uGgxDb21tb24ucHJvdG8i", 
            "jQEKC0FjY0Nhc2hJbmZvEhoKCGN1cnJlbmN5GAEgASgFUghjdXJyZW5jeRIS", 
            "CgRjYXNoGAIgASgBUgRjYXNoEioKEGF2YWlsYWJsZUJhbGFuY2UYAyABKAFS", 
            "EGF2YWlsYWJsZUJhbGFuY2USIgoMbmV0Q2FzaFBvd2VyGAQgASgBUgxuZXRD", 
            "YXNoUG93ZXIiRQoNQWNjTWFya2V0SW5mbxIcCgl0cmRNYXJrZXQYASABKAVS", 
            "CXRyZE1hcmtldBIWCgZhc3NldHMYAiABKAFSBmFzc2V0cyJXCglUcmRIZWFk", 
            "ZXISFgoGdHJkRW52GAEgAigFUgZ0cmRFbnYSFAoFYWNjSUQYAiACKARSBWFj", 
            "Y0lEEhwKCXRyZE1hcmtldBgDIAIoBVIJdHJkTWFya2V0IpoCCgZUcmRBY2MS", 
            "FgoGdHJkRW52GAEgAigFUgZ0cmRFbnYSFAoFYWNjSUQYAiACKARSBWFjY0lE", 
            "EiwKEXRyZE1hcmtldEF1dGhMaXN0GAMgAygFUhF0cmRNYXJrZXRBdXRoTGlz", 
            "dBIYCgdhY2NUeXBlGAQgASgFUgdhY2NUeXBlEhgKB2NhcmROdW0YBSABKAlS", 
            "B2NhcmROdW0SIgoMc2VjdXJpdHlGaXJtGAYgASgFUgxzZWN1cml0eUZpcm0S", 
            "HgoKc2ltQWNjVHlwZRgHIAEoBVIKc2ltQWNjVHlwZRIeCgp1bmlDYXJkTnVt", 
            "GAggASgJUgp1bmlDYXJkTnVtEhwKCWFjY1N0YXR1cxgJIAEoBVIJYWNjU3Rh", 
            "dHVzIo0JCgVGdW5kcxIUCgVwb3dlchgBIAIoAVIFcG93ZXISIAoLdG90YWxB", 
            "c3NldHMYAiACKAFSC3RvdGFsQXNzZXRzEhIKBGNhc2gYAyACKAFSBGNhc2gS", 
            "HAoJbWFya2V0VmFsGAQgAigBUgltYXJrZXRWYWwSHgoKZnJvemVuQ2FzaBgF", 
            "IAIoAVIKZnJvemVuQ2FzaBIaCghkZWJ0Q2FzaBgGIAIoAVIIZGVidENhc2gS", 
            "LAoRYXZsV2l0aGRyYXdhbENhc2gYByACKAFSEWF2bFdpdGhkcmF3YWxDYXNo", 
            "EhoKCGN1cnJlbmN5GAggASgFUghjdXJyZW5jeRImCg5hdmFpbGFibGVGdW5k", 
            "cxgJIAEoAVIOYXZhaWxhYmxlRnVuZHMSIgoMdW5yZWFsaXplZFBMGAogASgB", 
            "Ugx1bnJlYWxpemVkUEwSHgoKcmVhbGl6ZWRQTBgLIAEoAVIKcmVhbGl6ZWRQ", 
            "TBIcCglyaXNrTGV2ZWwYDCABKAVSCXJpc2tMZXZlbBIkCg1pbml0aWFsTWFy", 
            "Z2luGA0gASgBUg1pbml0aWFsTWFyZ2luEiwKEW1haW50ZW5hbmNlTWFyZ2lu", 
            "GA4gASgBUhFtYWludGVuYW5jZU1hcmdpbhI7CgxjYXNoSW5mb0xpc3QYDyAD", 
            "KAsyFy5UcmRfQ29tbW9uLkFjY0Nhc2hJbmZvUgxjYXNoSW5mb0xpc3QSJAoN", 
            "bWF4UG93ZXJTaG9ydBgQIAEoAVINbWF4UG93ZXJTaG9ydBIiCgxuZXRDYXNo", 
            "UG93ZXIYESABKAFSDG5ldENhc2hQb3dlchIWCgZsb25nTXYYEiABKAFSBmxv", 
            "bmdNdhIYCgdzaG9ydE12GBMgASgBUgdzaG9ydE12EiIKDHBlbmRpbmdBc3Nl", 
            "dBgUIAEoAVIMcGVuZGluZ0Fzc2V0EiQKDW1heFdpdGhkcmF3YWwYFSABKAFS", 
            "DW1heFdpdGhkcmF3YWwSHgoKcmlza1N0YXR1cxgWIAEoBVIKcmlza1N0YXR1", 
            "cxIqChBtYXJnaW5DYWxsTWFyZ2luGBcgASgBUhBtYXJnaW5DYWxsTWFyZ2lu", 
            "EhQKBWlzUGR0GBggASgIUgVpc1BkdBIWCgZwZHRTZXEYGSABKAlSBnBkdFNl", 
            "cRIkCg1iZWdpbm5pbmdEVEJQGBogASgBUg1iZWdpbm5pbmdEVEJQEiQKDXJl", 
            "bWFpbmluZ0RUQlAYGyABKAFSDXJlbWFpbmluZ0RUQlASIgoMZHRDYWxsQW1v", 
            "dW50GBwgASgBUgxkdENhbGxBbW91bnQSGgoIZHRTdGF0dXMYHSABKAVSCGR0", 
            "U3RhdHVzEioKEHNlY3VyaXRpZXNBc3NldHMYHiABKAFSEHNlY3VyaXRpZXNB", 
            "c3NldHMSHgoKZnVuZEFzc2V0cxgfIAEoAVIKZnVuZEFzc2V0cxIeCgpib25k", 
            "QXNzZXRzGCAgASgBUgpib25kQXNzZXRzEkEKDm1hcmtldEluZm9MaXN0GCEg", 
            "AygLMhkuVHJkX0NvbW1vbi5BY2NNYXJrZXRJbmZvUg5tYXJrZXRJbmZvTGlz", 
            "dCLqBQoIUG9zaXRpb24SHgoKcG9zaXRpb25JRBgBIAIoBFIKcG9zaXRpb25J", 
            "RBIiCgxwb3NpdGlvblNpZGUYAiACKAVSDHBvc2l0aW9uU2lkZRISCgRjb2Rl", 
            "GAMgAigJUgRjb2RlEhIKBG5hbWUYBCACKAlSBG5hbWUSEAoDcXR5GAUgAigB", 
            "UgNxdHkSHgoKY2FuU2VsbFF0eRgGIAIoAVIKY2FuU2VsbFF0eRIUCgVwcmlj", 
            "ZRgHIAIoAVIFcHJpY2USHAoJY29zdFByaWNlGAggASgBUgljb3N0UHJpY2US", 
            "EAoDdmFsGAkgAigBUgN2YWwSFAoFcGxWYWwYCiACKAFSBXBsVmFsEhgKB3Bs", 
            "UmF0aW8YCyABKAFSB3BsUmF0aW8SHAoJc2VjTWFya2V0GAwgASgFUglzZWNN", 
            "YXJrZXQSGQoIdGRfcGxWYWwYFSABKAFSB3RkUGxWYWwSGwoJdGRfdHJkVmFs", 
            "GBYgASgBUgh0ZFRyZFZhbBIbCgl0ZF9idXlWYWwYFyABKAFSCHRkQnV5VmFs", 
            "EhsKCXRkX2J1eVF0eRgYIAEoAVIIdGRCdXlRdHkSHQoKdGRfc2VsbFZhbBgZ", 
            "IAEoAVIJdGRTZWxsVmFsEh0KCnRkX3NlbGxRdHkYGiABKAFSCXRkU2VsbFF0", 
            "eRIiCgx1bnJlYWxpemVkUEwYHCABKAFSDHVucmVhbGl6ZWRQTBIeCgpyZWFs", 
            "aXplZFBMGB0gASgBUgpyZWFsaXplZFBMEhoKCGN1cnJlbmN5GB4gASgFUghj", 
            "dXJyZW5jeRIcCgl0cmRNYXJrZXQYHyABKAVSCXRyZE1hcmtldBIqChBkaWx1", 
            "dGVkQ29zdFByaWNlGCAgASgBUhBkaWx1dGVkQ29zdFByaWNlEioKEGF2ZXJh", 
            "Z2VDb3N0UHJpY2UYISABKAFSEGF2ZXJhZ2VDb3N0UHJpY2USJgoOYXZlcmFn", 
            "ZVBsUmF0aW8YIiABKAFSDmF2ZXJhZ2VQbFJhdGlvIqsGCgVPcmRlchIYCgd0", 
            "cmRTaWRlGAEgAigFUgd0cmRTaWRlEhwKCW9yZGVyVHlwZRgCIAIoBVIJb3Jk", 
            "ZXJUeXBlEiAKC29yZGVyU3RhdHVzGAMgAigFUgtvcmRlclN0YXR1cxIYCgdv", 
            "cmRlcklEGAQgAigEUgdvcmRlcklEEhwKCW9yZGVySURFeBgFIAIoCVIJb3Jk", 
            "ZXJJREV4EhIKBGNvZGUYBiACKAlSBGNvZGUSEgoEbmFtZRgHIAIoCVIEbmFt", 
            "ZRIQCgNxdHkYCCACKAFSA3F0eRIUCgVwcmljZRgJIAEoAVIFcHJpY2USHgoK", 
            "Y3JlYXRlVGltZRgKIAIoCVIKY3JlYXRlVGltZRIeCgp1cGRhdGVUaW1lGAsg", 
            "AigJUgp1cGRhdGVUaW1lEhgKB2ZpbGxRdHkYDCABKAFSB2ZpbGxRdHkSIgoM", 
            "ZmlsbEF2Z1ByaWNlGA0gASgBUgxmaWxsQXZnUHJpY2USHgoKbGFzdEVyck1z", 
            "ZxgOIAEoCVIKbGFzdEVyck1zZxIcCglzZWNNYXJrZXQYDyABKAVSCXNlY01h", 
            "cmtldBIoCg9jcmVhdGVUaW1lc3RhbXAYECABKAFSD2NyZWF0ZVRpbWVzdGFt", 
            "cBIoCg91cGRhdGVUaW1lc3RhbXAYESABKAFSD3VwZGF0ZVRpbWVzdGFtcBIW", 
            "CgZyZW1hcmsYEiABKAlSBnJlbWFyaxIgCgt0aW1lSW5Gb3JjZRgTIAEoBVIL", 
            "dGltZUluRm9yY2USJgoOZmlsbE91dHNpZGVSVEgYFCABKAhSDmZpbGxPdXRz", 
            "aWRlUlRIEhoKCGF1eFByaWNlGBUgASgBUghhdXhQcmljZRIcCgl0cmFpbFR5", 
            "cGUYFiABKAVSCXRyYWlsVHlwZRIeCgp0cmFpbFZhbHVlGBcgASgBUgp0cmFp", 
            "bFZhbHVlEiAKC3RyYWlsU3ByZWFkGBggASgBUgt0cmFpbFNwcmVhZBIaCghj", 
            "dXJyZW5jeRgZIAEoBVIIY3VycmVuY3kSHAoJdHJkTWFya2V0GBogASgFUgl0", 
            "cmRNYXJrZXQSGAoHc2Vzc2lvbhgbIAEoBVIHc2Vzc2lvbiI6CgxPcmRlckZl", 
            "ZUl0ZW0SFAoFdGl0bGUYASABKAlSBXRpdGxlEhQKBXZhbHVlGAIgASgBUgV2", 
            "YWx1ZSJ6CghPcmRlckZlZRIcCglvcmRlcklERXgYASACKAlSCW9yZGVySURF", 
            "eBIcCglmZWVBbW91bnQYAiABKAFSCWZlZUFtb3VudBIyCgdmZWVMaXN0GAMg", 
            "AygLMhguVHJkX0NvbW1vbi5PcmRlckZlZUl0ZW1SB2ZlZUxpc3QigQQKCU9y", 
            "ZGVyRmlsbBIYCgd0cmRTaWRlGAEgAigFUgd0cmRTaWRlEhYKBmZpbGxJRBgC", 
            "IAIoBFIGZmlsbElEEhoKCGZpbGxJREV4GAMgAigJUghmaWxsSURFeBIYCgdv", 
            "cmRlcklEGAQgASgEUgdvcmRlcklEEhwKCW9yZGVySURFeBgFIAEoCVIJb3Jk", 
            "ZXJJREV4EhIKBGNvZGUYBiACKAlSBGNvZGUSEgoEbmFtZRgHIAIoCVIEbmFt", 
            "ZRIQCgNxdHkYCCACKAFSA3F0eRIUCgVwcmljZRgJIAIoAVIFcHJpY2USHgoK", 
            "Y3JlYXRlVGltZRgKIAIoCVIKY3JlYXRlVGltZRIoCg9jb3VudGVyQnJva2Vy", 
            "SUQYCyABKAVSD2NvdW50ZXJCcm9rZXJJRBIsChFjb3VudGVyQnJva2VyTmFt", 
            "ZRgMIAEoCVIRY291bnRlckJyb2tlck5hbWUSHAoJc2VjTWFya2V0GA0gASgF", 
            "UglzZWNNYXJrZXQSKAoPY3JlYXRlVGltZXN0YW1wGA4gASgBUg9jcmVhdGVU", 
            "aW1lc3RhbXASKAoPdXBkYXRlVGltZXN0YW1wGA8gASgBUg91cGRhdGVUaW1l", 
            "c3RhbXASFgoGc3RhdHVzGBAgASgFUgZzdGF0dXMSHAoJdHJkTWFya2V0GBEg", 
            "ASgFUgl0cmRNYXJrZXQingIKCk1heFRyZFF0eXMSHgoKbWF4Q2FzaEJ1eRgB", 
            "IAIoAVIKbWF4Q2FzaEJ1eRIwChNtYXhDYXNoQW5kTWFyZ2luQnV5GAIgASgB", 
            "UhNtYXhDYXNoQW5kTWFyZ2luQnV5EigKD21heFBvc2l0aW9uU2VsbBgDIAIo", 
            "AVIPbWF4UG9zaXRpb25TZWxsEiIKDG1heFNlbGxTaG9ydBgEIAEoAVIMbWF4", 
            "U2VsbFNob3J0Eh4KCm1heEJ1eUJhY2sYBSABKAFSCm1heEJ1eUJhY2sSJgoO", 
            "bG9uZ1JlcXVpcmVkSU0YBiABKAFSDmxvbmdSZXF1aXJlZElNEigKD3Nob3J0", 
            "UmVxdWlyZWRJTRgHIAEoAVIPc2hvcnRSZXF1aXJlZElNIssBChNUcmRGaWx0", 
            "ZXJDb25kaXRpb25zEhoKCGNvZGVMaXN0GAEgAygJUghjb2RlTGlzdBIWCgZp", 
            "ZExpc3QYAiADKARSBmlkTGlzdBIcCgliZWdpblRpbWUYAyABKAlSCWJlZ2lu", 
            "VGltZRIYCgdlbmRUaW1lGAQgASgJUgdlbmRUaW1lEiQKDW9yZGVySURFeExp", 
            "c3QYBSADKAlSDW9yZGVySURFeExpc3QSIgoMZmlsdGVyTWFya2V0GAYgASgF", 
            "UgxmaWx0ZXJNYXJrZXQqLgoGVHJkRW52EhMKD1RyZEVudl9TaW11bGF0ZRAA", 
            "Eg8KC1RyZEVudl9SZWFsEAEqWAoLVHJkQ2F0ZWdvcnkSFwoTVHJkQ2F0ZWdv", 
            "cnlfVW5rbm93bhAAEhgKFFRyZENhdGVnb3J5X1NlY3VyaXR5EAESFgoSVHJk", 
            "Q2F0ZWdvcnlfRnV0dXJlEAIqlwMKCVRyZE1hcmtldBIVChFUcmRNYXJrZXRf", 
            "VW5rbm93bhAAEhAKDFRyZE1hcmtldF9ISxABEhAKDFRyZE1hcmtldF9VUxAC", 
            "EhAKDFRyZE1hcmtldF9DThADEhIKDlRyZE1hcmtldF9IS0NDEAQSFQoRVHJk", 
            "TWFya2V0X0Z1dHVyZXMQBRIQCgxUcmRNYXJrZXRfU0cQBhIQCgxUcmRNYXJr", 
            "ZXRfQVUQCBIhCh1UcmRNYXJrZXRfRnV0dXJlc19TaW11bGF0ZV9ISxAKEiEK", 
            "HVRyZE1hcmtldF9GdXR1cmVzX1NpbXVsYXRlX1VTEAsSIQodVHJkTWFya2V0", 
            "X0Z1dHVyZXNfU2ltdWxhdGVfU0cQDBIhCh1UcmRNYXJrZXRfRnV0dXJlc19T", 
            "aW11bGF0ZV9KUBANEhAKDFRyZE1hcmtldF9KUBAPEhAKDFRyZE1hcmtldF9N", 
            "WRBvEhAKDFRyZE1hcmtldF9DQRBwEhUKEVRyZE1hcmtldF9IS19GdW5kEHES", 
            "FQoRVHJkTWFya2V0X1VTX0Z1bmQQeyqAAgoMVHJkU2VjTWFya2V0EhgKFFRy", 
            "ZFNlY01hcmtldF9Vbmtub3duEAASEwoPVHJkU2VjTWFya2V0X0hLEAESEwoP", 
            "VHJkU2VjTWFya2V0X1VTEAISFgoSVHJkU2VjTWFya2V0X0NOX1NIEB8SFgoS", 
            "VHJkU2VjTWFya2V0X0NOX1NaECASEwoPVHJkU2VjTWFya2V0X1NHECkSEwoP", 
            "VHJkU2VjTWFya2V0X0pQEDMSEwoPVHJkU2VjTWFya2V0X0FVED0SEwoPVHJk", 
            "U2VjTWFya2V0X01ZEEcSEwoPVHJkU2VjTWFya2V0X0NBEFESEwoPVHJkU2Vj", 
            "TWFya2V0X0ZYEFsqbQoHVHJkU2lkZRITCg9UcmRTaWRlX1Vua25vd24QABIP", 
            "CgtUcmRTaWRlX0J1eRABEhAKDFRyZFNpZGVfU2VsbBACEhUKEVRyZFNpZGVf", 
            "U2VsbFNob3J0EAMSEwoPVHJkU2lkZV9CdXlCYWNrEAQq6wMKCU9yZGVyVHlw", 
            "ZRIVChFPcmRlclR5cGVfVW5rbm93bhAAEhQKEE9yZGVyVHlwZV9Ob3JtYWwQ", 
            "ARIUChBPcmRlclR5cGVfTWFya2V0EAISGwoXT3JkZXJUeXBlX0Fic29sdXRl", 
            "TGltaXQQBRIVChFPcmRlclR5cGVfQXVjdGlvbhAGEhoKFk9yZGVyVHlwZV9B", 
            "dWN0aW9uTGltaXQQBxIaChZPcmRlclR5cGVfU3BlY2lhbExpbWl0EAgSHgoa", 
            "T3JkZXJUeXBlX1NwZWNpYWxMaW1pdF9BbGwQCRISCg5PcmRlclR5cGVfU3Rv", 
            "cBAKEhcKE09yZGVyVHlwZV9TdG9wTGltaXQQCxIdChlPcmRlclR5cGVfTWFy", 
            "a2V0aWZUb3VjaGVkEAwSHAoYT3JkZXJUeXBlX0xpbWl0aWZUb3VjaGVkEA0S", 
            "GgoWT3JkZXJUeXBlX1RyYWlsaW5nU3RvcBAOEh8KG09yZGVyVHlwZV9UcmFp", 
            "bGluZ1N0b3BMaW1pdBAPEhkKFU9yZGVyVHlwZV9UV0FQX01BUktFVBAQEhgK", 
            "FE9yZGVyVHlwZV9UV0FQX0xJTUlUEBESGQoVT3JkZXJUeXBlX1ZXQVBfTUFS", 
            "S0VUEBISGAoUT3JkZXJUeXBlX1ZXQVBfTElNSVQQEypNCglUcmFpbFR5cGUS", 
            "FQoRVHJhaWxUeXBlX1Vua25vd24QABITCg9UcmFpbFR5cGVfUmF0aW8QARIU", 
            "ChBUcmFpbFR5cGVfQW1vdW50EAIq/AMKC09yZGVyU3RhdHVzEhsKF09yZGVy", 
            "U3RhdHVzX1Vuc3VibWl0dGVkEAASIAoTT3JkZXJTdGF0dXNfVW5rbm93bhD/", 
            "//////////8BEh0KGU9yZGVyU3RhdHVzX1dhaXRpbmdTdWJtaXQQARIaChZP", 
            "cmRlclN0YXR1c19TdWJtaXR0aW5nEAISHAoYT3JkZXJTdGF0dXNfU3VibWl0", 
            "RmFpbGVkEAMSFwoTT3JkZXJTdGF0dXNfVGltZU91dBAEEhkKFU9yZGVyU3Rh", 
            "dHVzX1N1Ym1pdHRlZBAFEhsKF09yZGVyU3RhdHVzX0ZpbGxlZF9QYXJ0EAoS", 
            "GgoWT3JkZXJTdGF0dXNfRmlsbGVkX0FsbBALEh8KG09yZGVyU3RhdHVzX0Nh", 
            "bmNlbGxpbmdfUGFydBAMEh4KGk9yZGVyU3RhdHVzX0NhbmNlbGxpbmdfQWxs", 
            "EA0SHgoaT3JkZXJTdGF0dXNfQ2FuY2VsbGVkX1BhcnQQDhIdChlPcmRlclN0", 
            "YXR1c19DYW5jZWxsZWRfQWxsEA8SFgoST3JkZXJTdGF0dXNfRmFpbGVkEBUS", 
            "GAoUT3JkZXJTdGF0dXNfRGlzYWJsZWQQFhIXChNPcmRlclN0YXR1c19EZWxl", 
            "dGVkEBcSHQoZT3JkZXJTdGF0dXNfRmlsbENhbmNlbGxlZBAYKmUKD09yZGVy", 
            "RmlsbFN0YXR1cxIWChJPcmRlckZpbGxTdGF0dXNfT0sQABIdChlPcmRlckZp", 
            "bGxTdGF0dXNfQ2FuY2VsbGVkEAESGwoXT3JkZXJGaWxsU3RhdHVzX0NoYW5n", 
            "ZWQQAipgCgxQb3NpdGlvblNpZGUSFQoRUG9zaXRpb25TaWRlX0xvbmcQABIh", 
            "ChRQb3NpdGlvblNpZGVfVW5rbm93bhD///////////8BEhYKElBvc2l0aW9u", 
            "U2lkZV9TaG9ydBABKq0BCg1Nb2RpZnlPcmRlck9wEhkKFU1vZGlmeU9yZGVy", 
            "T3BfVW5rbm93bhAAEhgKFE1vZGlmeU9yZGVyT3BfTm9ybWFsEAESGAoUTW9k", 
            "aWZ5T3JkZXJPcF9DYW5jZWwQAhIZChVNb2RpZnlPcmRlck9wX0Rpc2FibGUQ", 
            "AxIYChRNb2RpZnlPcmRlck9wX0VuYWJsZRAEEhgKFE1vZGlmeU9yZGVyT3Bf", 
            "RGVsZXRlEAUqUAoKVHJkQWNjVHlwZRIWChJUcmRBY2NUeXBlX1Vua25vd24Q", 
            "ABITCg9UcmRBY2NUeXBlX0Nhc2gQARIVChFUcmRBY2NUeXBlX01hcmdpbhAC", 
            "KkIKDFRyZEFjY1N0YXR1cxIXChNUcmRBY2NTdGF0dXNfQWN0aXZlEAASGQoV", 
            "VHJkQWNjU3RhdHVzX0Rpc2FibGVkEAEqsAEKCEN1cnJlbmN5EhQKEEN1cnJl", 
            "bmN5X1Vua25vd24QABIQCgxDdXJyZW5jeV9IS0QQARIQCgxDdXJyZW5jeV9V", 
            "U0QQAhIQCgxDdXJyZW5jeV9DTkgQAxIQCgxDdXJyZW5jeV9KUFkQBBIQCgxD", 
            "dXJyZW5jeV9TR0QQBRIQCgxDdXJyZW5jeV9BVUQQBhIQCgxDdXJyZW5jeV9D", 
            "QUQQBxIQCgxDdXJyZW5jeV9NWVIQCCq2AQoMQ2x0Umlza0xldmVsEiEKFENs", 
            "dFJpc2tMZXZlbF9Vbmtub3duEP///////////wESFQoRQ2x0Umlza0xldmVs", 
            "X1NhZmUQABIYChRDbHRSaXNrTGV2ZWxfV2FybmluZxABEhcKE0NsdFJpc2tM", 
            "ZXZlbF9EYW5nZXIQAhIdChlDbHRSaXNrTGV2ZWxfQWJzb2x1dGVTYWZlEAMS", 
            "GgoWQ2x0Umlza0xldmVsX09wdERhbmdlchAEKjcKC1RpbWVJbkZvcmNlEhMK", 
            "D1RpbWVJbkZvcmNlX0RBWRAAEhMKD1RpbWVJbkZvcmNlX0dUQxABKpUBCgxT", 
            "ZWN1cml0eUZpcm0SGAoUU2VjdXJpdHlGaXJtX1Vua25vd24QABIfChtTZWN1", 
            "cml0eUZpcm1fRnV0dVNlY3VyaXRpZXMQARIYChRTZWN1cml0eUZpcm1fRnV0", 
            "dUluYxACEhcKE1NlY3VyaXR5RmlybV9GdXR1U0cQAxIXChNTZWN1cml0eUZp", 
            "cm1fRnV0dUFVEAQqaQoKU2ltQWNjVHlwZRIWChJTaW1BY2NUeXBlX1Vua25v", 
            "d24QABIUChBTaW1BY2NUeXBlX1N0b2NrEAESFQoRU2ltQWNjVHlwZV9PcHRp", 
            "b24QAhIWChJTaW1BY2NUeXBlX0Z1dHVyZXMQAyqUAgoNQ2x0Umlza1N0YXR1", 
            "cxIZChVDbHRSaXNrU3RhdHVzX1Vua25vd24QABIYChRDbHRSaXNrU3RhdHVz", 
            "X0xldmVsMRABEhgKFENsdFJpc2tTdGF0dXNfTGV2ZWwyEAISGAoUQ2x0Umlz", 
            "a1N0YXR1c19MZXZlbDMQAxIYChRDbHRSaXNrU3RhdHVzX0xldmVsNBAEEhgK", 
            "FENsdFJpc2tTdGF0dXNfTGV2ZWw1EAUSGAoUQ2x0Umlza1N0YXR1c19MZXZl", 
            "bDYQBhIYChRDbHRSaXNrU3RhdHVzX0xldmVsNxAHEhgKFENsdFJpc2tTdGF0", 
            "dXNfTGV2ZWw4EAgSGAoUQ2x0Umlza1N0YXR1c19MZXZlbDkQCSpiCghEVFN0", 
            "YXR1cxIUChBEVFN0YXR1c19Vbmtub3duEAASFgoSRFRTdGF0dXNfVW5saW1p", 
            "dGVkEAESEwoPRFRTdGF0dXNfRU1DYWxsEAISEwoPRFRTdGF0dXNfRFRDYWxs", 
            "EANCQAoTY29tLmZ1dHUub3BlbmFwaS5wYlopZ2l0aHViLmNvbS9mdXR1b3Bl", 
          "bi9mdGFwaTRnby9wYi90cmRjb21tb24="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Trd_Common_AccCashInfo__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Trd_Common_AccCashInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo, global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo.Builder>(internal__static_Trd_Common_AccCashInfo__Descriptor,
                new string[] { "Currency", "Cash", "AvailableBalance", "NetCashPower", });
        internal__static_Trd_Common_AccMarketInfo__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Trd_Common_AccMarketInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo, global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo.Builder>(internal__static_Trd_Common_AccMarketInfo__Descriptor,
                new string[] { "TrdMarket", "Assets", });
        internal__static_Trd_Common_TrdHeader__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Trd_Common_TrdHeader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdHeader, global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder>(internal__static_Trd_Common_TrdHeader__Descriptor,
                new string[] { "TrdEnv", "AccID", "TrdMarket", });
        internal__static_Trd_Common_TrdAcc__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Trd_Common_TrdAcc__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdAcc, global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.Builder>(internal__static_Trd_Common_TrdAcc__Descriptor,
                new string[] { "TrdEnv", "AccID", "TrdMarketAuthList", "AccType", "CardNum", "SecurityFirm", "SimAccType", "UniCardNum", "AccStatus", });
        internal__static_Trd_Common_Funds__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Trd_Common_Funds__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Funds, global::Futu.OpenApi.Pb.TrdCommon.Funds.Builder>(internal__static_Trd_Common_Funds__Descriptor,
                new string[] { "Power", "TotalAssets", "Cash", "MarketVal", "FrozenCash", "DebtCash", "AvlWithdrawalCash", "Currency", "AvailableFunds", "UnrealizedPL", "RealizedPL", "RiskLevel", "InitialMargin", "MaintenanceMargin", "CashInfoList", "MaxPowerShort", "NetCashPower", "LongMv", "ShortMv", "PendingAsset", "MaxWithdrawal", "RiskStatus", "MarginCallMargin", "IsPdt", "PdtSeq", "BeginningDTBP", "RemainingDTBP", "DtCallAmount", "DtStatus", "SecuritiesAssets", "FundAssets", "BondAssets", "MarketInfoList", });
        internal__static_Trd_Common_Position__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Trd_Common_Position__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Position, global::Futu.OpenApi.Pb.TrdCommon.Position.Builder>(internal__static_Trd_Common_Position__Descriptor,
                new string[] { "PositionID", "PositionSide", "Code", "Name", "Qty", "CanSellQty", "Price", "CostPrice", "Val", "PlVal", "PlRatio", "SecMarket", "TdPlVal", "TdTrdVal", "TdBuyVal", "TdBuyQty", "TdSellVal", "TdSellQty", "UnrealizedPL", "RealizedPL", "Currency", "TrdMarket", "DilutedCostPrice", "AverageCostPrice", "AveragePlRatio", });
        internal__static_Trd_Common_Order__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Trd_Common_Order__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Order, global::Futu.OpenApi.Pb.TrdCommon.Order.Builder>(internal__static_Trd_Common_Order__Descriptor,
                new string[] { "TrdSide", "OrderType", "OrderStatus", "OrderID", "OrderIDEx", "Code", "Name", "Qty", "Price", "CreateTime", "UpdateTime", "FillQty", "FillAvgPrice", "LastErrMsg", "SecMarket", "CreateTimestamp", "UpdateTimestamp", "Remark", "TimeInForce", "FillOutsideRTH", "AuxPrice", "TrailType", "TrailValue", "TrailSpread", "Currency", "TrdMarket", "Session", });
        internal__static_Trd_Common_OrderFeeItem__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Trd_Common_OrderFeeItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem, global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem.Builder>(internal__static_Trd_Common_OrderFeeItem__Descriptor,
                new string[] { "Title", "Value", });
        internal__static_Trd_Common_OrderFee__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Trd_Common_OrderFee__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.OrderFee, global::Futu.OpenApi.Pb.TrdCommon.OrderFee.Builder>(internal__static_Trd_Common_OrderFee__Descriptor,
                new string[] { "OrderIDEx", "FeeAmount", "FeeList", });
        internal__static_Trd_Common_OrderFill__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Trd_Common_OrderFill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.OrderFill, global::Futu.OpenApi.Pb.TrdCommon.OrderFill.Builder>(internal__static_Trd_Common_OrderFill__Descriptor,
                new string[] { "TrdSide", "FillID", "FillIDEx", "OrderID", "OrderIDEx", "Code", "Name", "Qty", "Price", "CreateTime", "CounterBrokerID", "CounterBrokerName", "SecMarket", "CreateTimestamp", "UpdateTimestamp", "Status", "TrdMarket", });
        internal__static_Trd_Common_MaxTrdQtys__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Trd_Common_MaxTrdQtys__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys, global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.Builder>(internal__static_Trd_Common_MaxTrdQtys__Descriptor,
                new string[] { "MaxCashBuy", "MaxCashAndMarginBuy", "MaxPositionSell", "MaxSellShort", "MaxBuyBack", "LongRequiredIM", "ShortRequiredIM", });
        internal__static_Trd_Common_TrdFilterConditions__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Trd_Common_TrdFilterConditions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions, global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.Builder>(internal__static_Trd_Common_TrdFilterConditions__Descriptor,
                new string[] { "CodeList", "IdList", "BeginTime", "EndTime", "OrderIDExList", "FilterMarket", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.Common.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Futu.OpenApi.Pb.Common.Descriptor, 
          }, assigner);
    }
    #endregion
    
    #region Enums
    public enum TrdEnv {
      TrdEnv_Simulate = 0,
      TrdEnv_Real = 1,
    }
    
    public enum TrdCategory {
      TrdCategory_Unknown = 0,
      TrdCategory_Security = 1,
      TrdCategory_Future = 2,
    }
    
    public enum TrdMarket {
      TrdMarket_Unknown = 0,
      TrdMarket_HK = 1,
      TrdMarket_US = 2,
      TrdMarket_CN = 3,
      TrdMarket_HKCC = 4,
      TrdMarket_Futures = 5,
      TrdMarket_SG = 6,
      TrdMarket_AU = 8,
      TrdMarket_Futures_Simulate_HK = 10,
      TrdMarket_Futures_Simulate_US = 11,
      TrdMarket_Futures_Simulate_SG = 12,
      TrdMarket_Futures_Simulate_JP = 13,
      TrdMarket_JP = 15,
      TrdMarket_MY = 111,
      TrdMarket_CA = 112,
      TrdMarket_HK_Fund = 113,
      TrdMarket_US_Fund = 123,
    }
    
    public enum TrdSecMarket {
      TrdSecMarket_Unknown = 0,
      TrdSecMarket_HK = 1,
      TrdSecMarket_US = 2,
      TrdSecMarket_CN_SH = 31,
      TrdSecMarket_CN_SZ = 32,
      TrdSecMarket_SG = 41,
      TrdSecMarket_JP = 51,
      TrdSecMarket_AU = 61,
      TrdSecMarket_MY = 71,
      TrdSecMarket_CA = 81,
      TrdSecMarket_FX = 91,
    }
    
    public enum TrdSide {
      TrdSide_Unknown = 0,
      TrdSide_Buy = 1,
      TrdSide_Sell = 2,
      TrdSide_SellShort = 3,
      TrdSide_BuyBack = 4,
    }
    
    public enum OrderType {
      OrderType_Unknown = 0,
      OrderType_Normal = 1,
      OrderType_Market = 2,
      OrderType_AbsoluteLimit = 5,
      OrderType_Auction = 6,
      OrderType_AuctionLimit = 7,
      OrderType_SpecialLimit = 8,
      OrderType_SpecialLimit_All = 9,
      OrderType_Stop = 10,
      OrderType_StopLimit = 11,
      OrderType_MarketifTouched = 12,
      OrderType_LimitifTouched = 13,
      OrderType_TrailingStop = 14,
      OrderType_TrailingStopLimit = 15,
      OrderType_TWAP_MARKET = 16,
      OrderType_TWAP_LIMIT = 17,
      OrderType_VWAP_MARKET = 18,
      OrderType_VWAP_LIMIT = 19,
    }
    
    public enum TrailType {
      TrailType_Unknown = 0,
      TrailType_Ratio = 1,
      TrailType_Amount = 2,
    }
    
    public enum OrderStatus {
      OrderStatus_Unsubmitted = 0,
      OrderStatus_Unknown = -1,
      OrderStatus_WaitingSubmit = 1,
      OrderStatus_Submitting = 2,
      OrderStatus_SubmitFailed = 3,
      OrderStatus_TimeOut = 4,
      OrderStatus_Submitted = 5,
      OrderStatus_Filled_Part = 10,
      OrderStatus_Filled_All = 11,
      OrderStatus_Cancelling_Part = 12,
      OrderStatus_Cancelling_All = 13,
      OrderStatus_Cancelled_Part = 14,
      OrderStatus_Cancelled_All = 15,
      OrderStatus_Failed = 21,
      OrderStatus_Disabled = 22,
      OrderStatus_Deleted = 23,
      OrderStatus_FillCancelled = 24,
    }
    
    public enum OrderFillStatus {
      OrderFillStatus_OK = 0,
      OrderFillStatus_Cancelled = 1,
      OrderFillStatus_Changed = 2,
    }
    
    public enum PositionSide {
      PositionSide_Long = 0,
      PositionSide_Unknown = -1,
      PositionSide_Short = 1,
    }
    
    public enum ModifyOrderOp {
      ModifyOrderOp_Unknown = 0,
      ModifyOrderOp_Normal = 1,
      ModifyOrderOp_Cancel = 2,
      ModifyOrderOp_Disable = 3,
      ModifyOrderOp_Enable = 4,
      ModifyOrderOp_Delete = 5,
    }
    
    public enum TrdAccType {
      TrdAccType_Unknown = 0,
      TrdAccType_Cash = 1,
      TrdAccType_Margin = 2,
    }
    
    public enum TrdAccStatus {
      TrdAccStatus_Active = 0,
      TrdAccStatus_Disabled = 1,
    }
    
    public enum Currency {
      Currency_Unknown = 0,
      Currency_HKD = 1,
      Currency_USD = 2,
      Currency_CNH = 3,
      Currency_JPY = 4,
      Currency_SGD = 5,
      Currency_AUD = 6,
      Currency_CAD = 7,
      Currency_MYR = 8,
    }
    
    public enum CltRiskLevel {
      CltRiskLevel_Unknown = -1,
      CltRiskLevel_Safe = 0,
      CltRiskLevel_Warning = 1,
      CltRiskLevel_Danger = 2,
      CltRiskLevel_AbsoluteSafe = 3,
      CltRiskLevel_OptDanger = 4,
    }
    
    public enum TimeInForce {
      TimeInForce_DAY = 0,
      TimeInForce_GTC = 1,
    }
    
    public enum SecurityFirm {
      SecurityFirm_Unknown = 0,
      SecurityFirm_FutuSecurities = 1,
      SecurityFirm_FutuInc = 2,
      SecurityFirm_FutuSG = 3,
      SecurityFirm_FutuAU = 4,
    }
    
    public enum SimAccType {
      SimAccType_Unknown = 0,
      SimAccType_Stock = 1,
      SimAccType_Option = 2,
      SimAccType_Futures = 3,
    }
    
    public enum CltRiskStatus {
      CltRiskStatus_Unknown = 0,
      CltRiskStatus_Level1 = 1,
      CltRiskStatus_Level2 = 2,
      CltRiskStatus_Level3 = 3,
      CltRiskStatus_Level4 = 4,
      CltRiskStatus_Level5 = 5,
      CltRiskStatus_Level6 = 6,
      CltRiskStatus_Level7 = 7,
      CltRiskStatus_Level8 = 8,
      CltRiskStatus_Level9 = 9,
    }
    
    public enum DTStatus {
      DTStatus_Unknown = 0,
      DTStatus_Unlimited = 1,
      DTStatus_EMCall = 2,
      DTStatus_DTCall = 3,
    }
    
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AccCashInfo : pb::GeneratedMessage<AccCashInfo, AccCashInfo.Builder> {
      private AccCashInfo() { }
      private static readonly AccCashInfo defaultInstance = new AccCashInfo().MakeReadOnly();
      private static readonly string[] _accCashInfoFieldNames = new string[] { "availableBalance", "cash", "currency", "netCashPower" };
      private static readonly uint[] _accCashInfoFieldTags = new uint[] { 25, 17, 8, 33 };
      public static AccCashInfo DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override AccCashInfo DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override AccCashInfo ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_AccCashInfo__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<AccCashInfo, AccCashInfo.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_AccCashInfo__FieldAccessorTable; }
      }
      
      public const int CurrencyFieldNumber = 1;
      private bool hasCurrency;
      private int currency_;
      public bool HasCurrency {
        get { return hasCurrency; }
      }
      public int Currency {
        get { return currency_; }
      }
      
      public const int CashFieldNumber = 2;
      private bool hasCash;
      private double cash_;
      public bool HasCash {
        get { return hasCash; }
      }
      public double Cash {
        get { return cash_; }
      }
      
      public const int AvailableBalanceFieldNumber = 3;
      private bool hasAvailableBalance;
      private double availableBalance_;
      public bool HasAvailableBalance {
        get { return hasAvailableBalance; }
      }
      public double AvailableBalance {
        get { return availableBalance_; }
      }
      
      public const int NetCashPowerFieldNumber = 4;
      private bool hasNetCashPower;
      private double netCashPower_;
      public bool HasNetCashPower {
        get { return hasNetCashPower; }
      }
      public double NetCashPower {
        get { return netCashPower_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _accCashInfoFieldNames;
        if (hasCurrency) {
          output.WriteInt32(1, field_names[2], Currency);
        }
        if (hasCash) {
          output.WriteDouble(2, field_names[1], Cash);
        }
        if (hasAvailableBalance) {
          output.WriteDouble(3, field_names[0], AvailableBalance);
        }
        if (hasNetCashPower) {
          output.WriteDouble(4, field_names[3], NetCashPower);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Currency);
        }
        if (hasCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Cash);
        }
        if (hasAvailableBalance) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, AvailableBalance);
        }
        if (hasNetCashPower) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, NetCashPower);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static AccCashInfo ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AccCashInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AccCashInfo ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AccCashInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AccCashInfo ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AccCashInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static AccCashInfo ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static AccCashInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static AccCashInfo ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AccCashInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private AccCashInfo MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(AccCashInfo prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<AccCashInfo, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(AccCashInfo cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private AccCashInfo result;
        
        private AccCashInfo PrepareBuilder() {
          if (resultIsReadOnly) {
            AccCashInfo original = result;
            result = new AccCashInfo();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override AccCashInfo MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo.Descriptor; }
        }
        
        public override AccCashInfo DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo.DefaultInstance; }
        }
        
        public override AccCashInfo BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is AccCashInfo) {
            return MergeFrom((AccCashInfo) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(AccCashInfo other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasCurrency) {
            Currency = other.Currency;
          }
          if (other.HasCash) {
            Cash = other.Cash;
          }
          if (other.HasAvailableBalance) {
            AvailableBalance = other.AvailableBalance;
          }
          if (other.HasNetCashPower) {
            NetCashPower = other.NetCashPower;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_accCashInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _accCashInfoFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasCurrency = input.ReadInt32(ref result.currency_);
                break;
              }
              case 17: {
                result.hasCash = input.ReadDouble(ref result.cash_);
                break;
              }
              case 25: {
                result.hasAvailableBalance = input.ReadDouble(ref result.availableBalance_);
                break;
              }
              case 33: {
                result.hasNetCashPower = input.ReadDouble(ref result.netCashPower_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasCurrency {
          get { return result.hasCurrency; }
        }
        public int Currency {
          get { return result.Currency; }
          set { SetCurrency(value); }
        }
        public Builder SetCurrency(int value) {
          PrepareBuilder();
          result.hasCurrency = true;
          result.currency_ = value;
          return this;
        }
        public Builder ClearCurrency() {
          PrepareBuilder();
          result.hasCurrency = false;
          result.currency_ = 0;
          return this;
        }
        
        public bool HasCash {
          get { return result.hasCash; }
        }
        public double Cash {
          get { return result.Cash; }
          set { SetCash(value); }
        }
        public Builder SetCash(double value) {
          PrepareBuilder();
          result.hasCash = true;
          result.cash_ = value;
          return this;
        }
        public Builder ClearCash() {
          PrepareBuilder();
          result.hasCash = false;
          result.cash_ = 0D;
          return this;
        }
        
        public bool HasAvailableBalance {
          get { return result.hasAvailableBalance; }
        }
        public double AvailableBalance {
          get { return result.AvailableBalance; }
          set { SetAvailableBalance(value); }
        }
        public Builder SetAvailableBalance(double value) {
          PrepareBuilder();
          result.hasAvailableBalance = true;
          result.availableBalance_ = value;
          return this;
        }
        public Builder ClearAvailableBalance() {
          PrepareBuilder();
          result.hasAvailableBalance = false;
          result.availableBalance_ = 0D;
          return this;
        }
        
        public bool HasNetCashPower {
          get { return result.hasNetCashPower; }
        }
        public double NetCashPower {
          get { return result.NetCashPower; }
          set { SetNetCashPower(value); }
        }
        public Builder SetNetCashPower(double value) {
          PrepareBuilder();
          result.hasNetCashPower = true;
          result.netCashPower_ = value;
          return this;
        }
        public Builder ClearNetCashPower() {
          PrepareBuilder();
          result.hasNetCashPower = false;
          result.netCashPower_ = 0D;
          return this;
        }
      }
      static AccCashInfo() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AccMarketInfo : pb::GeneratedMessage<AccMarketInfo, AccMarketInfo.Builder> {
      private AccMarketInfo() { }
      private static readonly AccMarketInfo defaultInstance = new AccMarketInfo().MakeReadOnly();
      private static readonly string[] _accMarketInfoFieldNames = new string[] { "assets", "trdMarket" };
      private static readonly uint[] _accMarketInfoFieldTags = new uint[] { 17, 8 };
      public static AccMarketInfo DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override AccMarketInfo DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override AccMarketInfo ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_AccMarketInfo__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<AccMarketInfo, AccMarketInfo.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_AccMarketInfo__FieldAccessorTable; }
      }
      
      public const int TrdMarketFieldNumber = 1;
      private bool hasTrdMarket;
      private int trdMarket_;
      public bool HasTrdMarket {
        get { return hasTrdMarket; }
      }
      public int TrdMarket {
        get { return trdMarket_; }
      }
      
      public const int AssetsFieldNumber = 2;
      private bool hasAssets;
      private double assets_;
      public bool HasAssets {
        get { return hasAssets; }
      }
      public double Assets {
        get { return assets_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _accMarketInfoFieldNames;
        if (hasTrdMarket) {
          output.WriteInt32(1, field_names[1], TrdMarket);
        }
        if (hasAssets) {
          output.WriteDouble(2, field_names[0], Assets);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrdMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TrdMarket);
        }
        if (hasAssets) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Assets);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static AccMarketInfo ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AccMarketInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AccMarketInfo ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static AccMarketInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static AccMarketInfo ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AccMarketInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static AccMarketInfo ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static AccMarketInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static AccMarketInfo ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static AccMarketInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private AccMarketInfo MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(AccMarketInfo prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<AccMarketInfo, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(AccMarketInfo cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private AccMarketInfo result;
        
        private AccMarketInfo PrepareBuilder() {
          if (resultIsReadOnly) {
            AccMarketInfo original = result;
            result = new AccMarketInfo();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override AccMarketInfo MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo.Descriptor; }
        }
        
        public override AccMarketInfo DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo.DefaultInstance; }
        }
        
        public override AccMarketInfo BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is AccMarketInfo) {
            return MergeFrom((AccMarketInfo) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(AccMarketInfo other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTrdMarket) {
            TrdMarket = other.TrdMarket;
          }
          if (other.HasAssets) {
            Assets = other.Assets;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_accMarketInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _accMarketInfoFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasTrdMarket = input.ReadInt32(ref result.trdMarket_);
                break;
              }
              case 17: {
                result.hasAssets = input.ReadDouble(ref result.assets_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTrdMarket {
          get { return result.hasTrdMarket; }
        }
        public int TrdMarket {
          get { return result.TrdMarket; }
          set { SetTrdMarket(value); }
        }
        public Builder SetTrdMarket(int value) {
          PrepareBuilder();
          result.hasTrdMarket = true;
          result.trdMarket_ = value;
          return this;
        }
        public Builder ClearTrdMarket() {
          PrepareBuilder();
          result.hasTrdMarket = false;
          result.trdMarket_ = 0;
          return this;
        }
        
        public bool HasAssets {
          get { return result.hasAssets; }
        }
        public double Assets {
          get { return result.Assets; }
          set { SetAssets(value); }
        }
        public Builder SetAssets(double value) {
          PrepareBuilder();
          result.hasAssets = true;
          result.assets_ = value;
          return this;
        }
        public Builder ClearAssets() {
          PrepareBuilder();
          result.hasAssets = false;
          result.assets_ = 0D;
          return this;
        }
      }
      static AccMarketInfo() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TrdHeader : pb::GeneratedMessage<TrdHeader, TrdHeader.Builder> {
      private TrdHeader() { }
      private static readonly TrdHeader defaultInstance = new TrdHeader().MakeReadOnly();
      private static readonly string[] _trdHeaderFieldNames = new string[] { "accID", "trdEnv", "trdMarket" };
      private static readonly uint[] _trdHeaderFieldTags = new uint[] { 16, 8, 24 };
      public static TrdHeader DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override TrdHeader DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override TrdHeader ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdHeader__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<TrdHeader, TrdHeader.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdHeader__FieldAccessorTable; }
      }
      
      public const int TrdEnvFieldNumber = 1;
      private bool hasTrdEnv;
      private int trdEnv_;
      public bool HasTrdEnv {
        get { return hasTrdEnv; }
      }
      public int TrdEnv {
        get { return trdEnv_; }
      }
      
      public const int AccIDFieldNumber = 2;
      private bool hasAccID;
      private ulong accID_;
      public bool HasAccID {
        get { return hasAccID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong AccID {
        get { return accID_; }
      }
      
      public const int TrdMarketFieldNumber = 3;
      private bool hasTrdMarket;
      private int trdMarket_;
      public bool HasTrdMarket {
        get { return hasTrdMarket; }
      }
      public int TrdMarket {
        get { return trdMarket_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTrdEnv) return false;
          if (!hasAccID) return false;
          if (!hasTrdMarket) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _trdHeaderFieldNames;
        if (hasTrdEnv) {
          output.WriteInt32(1, field_names[1], TrdEnv);
        }
        if (hasAccID) {
          output.WriteUInt64(2, field_names[0], AccID);
        }
        if (hasTrdMarket) {
          output.WriteInt32(3, field_names[2], TrdMarket);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrdEnv) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TrdEnv);
        }
        if (hasAccID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, AccID);
        }
        if (hasTrdMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, TrdMarket);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static TrdHeader ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdHeader ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdHeader ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static TrdHeader ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static TrdHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static TrdHeader ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private TrdHeader MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(TrdHeader prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<TrdHeader, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(TrdHeader cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private TrdHeader result;
        
        private TrdHeader PrepareBuilder() {
          if (resultIsReadOnly) {
            TrdHeader original = result;
            result = new TrdHeader();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override TrdHeader MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Descriptor; }
        }
        
        public override TrdHeader DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance; }
        }
        
        public override TrdHeader BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is TrdHeader) {
            return MergeFrom((TrdHeader) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(TrdHeader other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTrdEnv) {
            TrdEnv = other.TrdEnv;
          }
          if (other.HasAccID) {
            AccID = other.AccID;
          }
          if (other.HasTrdMarket) {
            TrdMarket = other.TrdMarket;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_trdHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _trdHeaderFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasTrdEnv = input.ReadInt32(ref result.trdEnv_);
                break;
              }
              case 16: {
                result.hasAccID = input.ReadUInt64(ref result.accID_);
                break;
              }
              case 24: {
                result.hasTrdMarket = input.ReadInt32(ref result.trdMarket_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTrdEnv {
          get { return result.hasTrdEnv; }
        }
        public int TrdEnv {
          get { return result.TrdEnv; }
          set { SetTrdEnv(value); }
        }
        public Builder SetTrdEnv(int value) {
          PrepareBuilder();
          result.hasTrdEnv = true;
          result.trdEnv_ = value;
          return this;
        }
        public Builder ClearTrdEnv() {
          PrepareBuilder();
          result.hasTrdEnv = false;
          result.trdEnv_ = 0;
          return this;
        }
        
        public bool HasAccID {
          get { return result.hasAccID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong AccID {
          get { return result.AccID; }
          set { SetAccID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetAccID(ulong value) {
          PrepareBuilder();
          result.hasAccID = true;
          result.accID_ = value;
          return this;
        }
        public Builder ClearAccID() {
          PrepareBuilder();
          result.hasAccID = false;
          result.accID_ = 0UL;
          return this;
        }
        
        public bool HasTrdMarket {
          get { return result.hasTrdMarket; }
        }
        public int TrdMarket {
          get { return result.TrdMarket; }
          set { SetTrdMarket(value); }
        }
        public Builder SetTrdMarket(int value) {
          PrepareBuilder();
          result.hasTrdMarket = true;
          result.trdMarket_ = value;
          return this;
        }
        public Builder ClearTrdMarket() {
          PrepareBuilder();
          result.hasTrdMarket = false;
          result.trdMarket_ = 0;
          return this;
        }
      }
      static TrdHeader() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TrdAcc : pb::GeneratedMessage<TrdAcc, TrdAcc.Builder> {
      private TrdAcc() { }
      private static readonly TrdAcc defaultInstance = new TrdAcc().MakeReadOnly();
      private static readonly string[] _trdAccFieldNames = new string[] { "accID", "accStatus", "accType", "cardNum", "securityFirm", "simAccType", "trdEnv", "trdMarketAuthList", "uniCardNum" };
      private static readonly uint[] _trdAccFieldTags = new uint[] { 16, 72, 32, 42, 48, 56, 8, 24, 66 };
      public static TrdAcc DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override TrdAcc DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override TrdAcc ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdAcc__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<TrdAcc, TrdAcc.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdAcc__FieldAccessorTable; }
      }
      
      public const int TrdEnvFieldNumber = 1;
      private bool hasTrdEnv;
      private int trdEnv_;
      public bool HasTrdEnv {
        get { return hasTrdEnv; }
      }
      public int TrdEnv {
        get { return trdEnv_; }
      }
      
      public const int AccIDFieldNumber = 2;
      private bool hasAccID;
      private ulong accID_;
      public bool HasAccID {
        get { return hasAccID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong AccID {
        get { return accID_; }
      }
      
      public const int TrdMarketAuthListFieldNumber = 3;
      private pbc::PopsicleList<int> trdMarketAuthList_ = new pbc::PopsicleList<int>();
      public scg::IList<int> TrdMarketAuthListList {
        get { return pbc::Lists.AsReadOnly(trdMarketAuthList_); }
      }
      public int TrdMarketAuthListCount {
        get { return trdMarketAuthList_.Count; }
      }
      public int GetTrdMarketAuthList(int index) {
        return trdMarketAuthList_[index];
      }
      
      public const int AccTypeFieldNumber = 4;
      private bool hasAccType;
      private int accType_;
      public bool HasAccType {
        get { return hasAccType; }
      }
      public int AccType {
        get { return accType_; }
      }
      
      public const int CardNumFieldNumber = 5;
      private bool hasCardNum;
      private string cardNum_ = "";
      public bool HasCardNum {
        get { return hasCardNum; }
      }
      public string CardNum {
        get { return cardNum_; }
      }
      
      public const int SecurityFirmFieldNumber = 6;
      private bool hasSecurityFirm;
      private int securityFirm_;
      public bool HasSecurityFirm {
        get { return hasSecurityFirm; }
      }
      public int SecurityFirm {
        get { return securityFirm_; }
      }
      
      public const int SimAccTypeFieldNumber = 7;
      private bool hasSimAccType;
      private int simAccType_;
      public bool HasSimAccType {
        get { return hasSimAccType; }
      }
      public int SimAccType {
        get { return simAccType_; }
      }
      
      public const int UniCardNumFieldNumber = 8;
      private bool hasUniCardNum;
      private string uniCardNum_ = "";
      public bool HasUniCardNum {
        get { return hasUniCardNum; }
      }
      public string UniCardNum {
        get { return uniCardNum_; }
      }
      
      public const int AccStatusFieldNumber = 9;
      private bool hasAccStatus;
      private int accStatus_;
      public bool HasAccStatus {
        get { return hasAccStatus; }
      }
      public int AccStatus {
        get { return accStatus_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTrdEnv) return false;
          if (!hasAccID) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _trdAccFieldNames;
        if (hasTrdEnv) {
          output.WriteInt32(1, field_names[6], TrdEnv);
        }
        if (hasAccID) {
          output.WriteUInt64(2, field_names[0], AccID);
        }
        if (trdMarketAuthList_.Count > 0) {
          output.WriteInt32Array(3, field_names[7], trdMarketAuthList_);
        }
        if (hasAccType) {
          output.WriteInt32(4, field_names[2], AccType);
        }
        if (hasCardNum) {
          output.WriteString(5, field_names[3], CardNum);
        }
        if (hasSecurityFirm) {
          output.WriteInt32(6, field_names[4], SecurityFirm);
        }
        if (hasSimAccType) {
          output.WriteInt32(7, field_names[5], SimAccType);
        }
        if (hasUniCardNum) {
          output.WriteString(8, field_names[8], UniCardNum);
        }
        if (hasAccStatus) {
          output.WriteInt32(9, field_names[1], AccStatus);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrdEnv) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TrdEnv);
        }
        if (hasAccID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, AccID);
        }
        {
          int dataSize = 0;
          foreach (int element in TrdMarketAuthListList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * trdMarketAuthList_.Count;
        }
        if (hasAccType) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, AccType);
        }
        if (hasCardNum) {
          size += pb::CodedOutputStream.ComputeStringSize(5, CardNum);
        }
        if (hasSecurityFirm) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, SecurityFirm);
        }
        if (hasSimAccType) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, SimAccType);
        }
        if (hasUniCardNum) {
          size += pb::CodedOutputStream.ComputeStringSize(8, UniCardNum);
        }
        if (hasAccStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, AccStatus);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static TrdAcc ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdAcc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdAcc ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdAcc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdAcc ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdAcc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static TrdAcc ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static TrdAcc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static TrdAcc ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdAcc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private TrdAcc MakeReadOnly() {
        trdMarketAuthList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(TrdAcc prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<TrdAcc, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(TrdAcc cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private TrdAcc result;
        
        private TrdAcc PrepareBuilder() {
          if (resultIsReadOnly) {
            TrdAcc original = result;
            result = new TrdAcc();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override TrdAcc MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.Descriptor; }
        }
        
        public override TrdAcc DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.DefaultInstance; }
        }
        
        public override TrdAcc BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is TrdAcc) {
            return MergeFrom((TrdAcc) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(TrdAcc other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTrdEnv) {
            TrdEnv = other.TrdEnv;
          }
          if (other.HasAccID) {
            AccID = other.AccID;
          }
          if (other.trdMarketAuthList_.Count != 0) {
            result.trdMarketAuthList_.Add(other.trdMarketAuthList_);
          }
          if (other.HasAccType) {
            AccType = other.AccType;
          }
          if (other.HasCardNum) {
            CardNum = other.CardNum;
          }
          if (other.HasSecurityFirm) {
            SecurityFirm = other.SecurityFirm;
          }
          if (other.HasSimAccType) {
            SimAccType = other.SimAccType;
          }
          if (other.HasUniCardNum) {
            UniCardNum = other.UniCardNum;
          }
          if (other.HasAccStatus) {
            AccStatus = other.AccStatus;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_trdAccFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _trdAccFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasTrdEnv = input.ReadInt32(ref result.trdEnv_);
                break;
              }
              case 16: {
                result.hasAccID = input.ReadUInt64(ref result.accID_);
                break;
              }
              case 26:
              case 24: {
                input.ReadInt32Array(tag, field_name, result.trdMarketAuthList_);
                break;
              }
              case 32: {
                result.hasAccType = input.ReadInt32(ref result.accType_);
                break;
              }
              case 42: {
                result.hasCardNum = input.ReadString(ref result.cardNum_);
                break;
              }
              case 48: {
                result.hasSecurityFirm = input.ReadInt32(ref result.securityFirm_);
                break;
              }
              case 56: {
                result.hasSimAccType = input.ReadInt32(ref result.simAccType_);
                break;
              }
              case 66: {
                result.hasUniCardNum = input.ReadString(ref result.uniCardNum_);
                break;
              }
              case 72: {
                result.hasAccStatus = input.ReadInt32(ref result.accStatus_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTrdEnv {
          get { return result.hasTrdEnv; }
        }
        public int TrdEnv {
          get { return result.TrdEnv; }
          set { SetTrdEnv(value); }
        }
        public Builder SetTrdEnv(int value) {
          PrepareBuilder();
          result.hasTrdEnv = true;
          result.trdEnv_ = value;
          return this;
        }
        public Builder ClearTrdEnv() {
          PrepareBuilder();
          result.hasTrdEnv = false;
          result.trdEnv_ = 0;
          return this;
        }
        
        public bool HasAccID {
          get { return result.hasAccID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong AccID {
          get { return result.AccID; }
          set { SetAccID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetAccID(ulong value) {
          PrepareBuilder();
          result.hasAccID = true;
          result.accID_ = value;
          return this;
        }
        public Builder ClearAccID() {
          PrepareBuilder();
          result.hasAccID = false;
          result.accID_ = 0UL;
          return this;
        }
        
        public pbc::IPopsicleList<int> TrdMarketAuthListList {
          get { return PrepareBuilder().trdMarketAuthList_; }
        }
        public int TrdMarketAuthListCount {
          get { return result.TrdMarketAuthListCount; }
        }
        public int GetTrdMarketAuthList(int index) {
          return result.GetTrdMarketAuthList(index);
        }
        public Builder SetTrdMarketAuthList(int index, int value) {
          PrepareBuilder();
          result.trdMarketAuthList_[index] = value;
          return this;
        }
        public Builder AddTrdMarketAuthList(int value) {
          PrepareBuilder();
          result.trdMarketAuthList_.Add(value);
          return this;
        }
        public Builder AddRangeTrdMarketAuthList(scg::IEnumerable<int> values) {
          PrepareBuilder();
          result.trdMarketAuthList_.Add(values);
          return this;
        }
        public Builder ClearTrdMarketAuthList() {
          PrepareBuilder();
          result.trdMarketAuthList_.Clear();
          return this;
        }
        
        public bool HasAccType {
          get { return result.hasAccType; }
        }
        public int AccType {
          get { return result.AccType; }
          set { SetAccType(value); }
        }
        public Builder SetAccType(int value) {
          PrepareBuilder();
          result.hasAccType = true;
          result.accType_ = value;
          return this;
        }
        public Builder ClearAccType() {
          PrepareBuilder();
          result.hasAccType = false;
          result.accType_ = 0;
          return this;
        }
        
        public bool HasCardNum {
          get { return result.hasCardNum; }
        }
        public string CardNum {
          get { return result.CardNum; }
          set { SetCardNum(value); }
        }
        public Builder SetCardNum(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCardNum = true;
          result.cardNum_ = value;
          return this;
        }
        public Builder ClearCardNum() {
          PrepareBuilder();
          result.hasCardNum = false;
          result.cardNum_ = "";
          return this;
        }
        
        public bool HasSecurityFirm {
          get { return result.hasSecurityFirm; }
        }
        public int SecurityFirm {
          get { return result.SecurityFirm; }
          set { SetSecurityFirm(value); }
        }
        public Builder SetSecurityFirm(int value) {
          PrepareBuilder();
          result.hasSecurityFirm = true;
          result.securityFirm_ = value;
          return this;
        }
        public Builder ClearSecurityFirm() {
          PrepareBuilder();
          result.hasSecurityFirm = false;
          result.securityFirm_ = 0;
          return this;
        }
        
        public bool HasSimAccType {
          get { return result.hasSimAccType; }
        }
        public int SimAccType {
          get { return result.SimAccType; }
          set { SetSimAccType(value); }
        }
        public Builder SetSimAccType(int value) {
          PrepareBuilder();
          result.hasSimAccType = true;
          result.simAccType_ = value;
          return this;
        }
        public Builder ClearSimAccType() {
          PrepareBuilder();
          result.hasSimAccType = false;
          result.simAccType_ = 0;
          return this;
        }
        
        public bool HasUniCardNum {
          get { return result.hasUniCardNum; }
        }
        public string UniCardNum {
          get { return result.UniCardNum; }
          set { SetUniCardNum(value); }
        }
        public Builder SetUniCardNum(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasUniCardNum = true;
          result.uniCardNum_ = value;
          return this;
        }
        public Builder ClearUniCardNum() {
          PrepareBuilder();
          result.hasUniCardNum = false;
          result.uniCardNum_ = "";
          return this;
        }
        
        public bool HasAccStatus {
          get { return result.hasAccStatus; }
        }
        public int AccStatus {
          get { return result.AccStatus; }
          set { SetAccStatus(value); }
        }
        public Builder SetAccStatus(int value) {
          PrepareBuilder();
          result.hasAccStatus = true;
          result.accStatus_ = value;
          return this;
        }
        public Builder ClearAccStatus() {
          PrepareBuilder();
          result.hasAccStatus = false;
          result.accStatus_ = 0;
          return this;
        }
      }
      static TrdAcc() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Funds : pb::GeneratedMessage<Funds, Funds.Builder> {
      private Funds() { }
      private static readonly Funds defaultInstance = new Funds().MakeReadOnly();
      private static readonly string[] _fundsFieldNames = new string[] { "availableFunds", "avlWithdrawalCash", "beginningDTBP", "bondAssets", "cash", "cashInfoList", "currency", "debtCash", "dtCallAmount", "dtStatus", "frozenCash", "fundAssets", "initialMargin", "isPdt", "longMv", "maintenanceMargin", "marginCallMargin", "marketInfoList", "marketVal", "maxPowerShort", "maxWithdrawal", "netCashPower", "pdtSeq", "pendingAsset", "power", "realizedPL", "remainingDTBP", "riskLevel", "riskStatus", "securitiesAssets", "shortMv", "totalAssets", "unrealizedPL" };
      private static readonly uint[] _fundsFieldTags = new uint[] { 73, 57, 209, 257, 25, 122, 64, 49, 225, 232, 41, 249, 105, 192, 145, 113, 185, 266, 33, 129, 169, 137, 202, 161, 9, 89, 217, 96, 176, 241, 153, 17, 81 };
      public static Funds DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Funds DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Funds ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Funds__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Funds, Funds.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Funds__FieldAccessorTable; }
      }
      
      public const int PowerFieldNumber = 1;
      private bool hasPower;
      private double power_;
      public bool HasPower {
        get { return hasPower; }
      }
      public double Power {
        get { return power_; }
      }
      
      public const int TotalAssetsFieldNumber = 2;
      private bool hasTotalAssets;
      private double totalAssets_;
      public bool HasTotalAssets {
        get { return hasTotalAssets; }
      }
      public double TotalAssets {
        get { return totalAssets_; }
      }
      
      public const int CashFieldNumber = 3;
      private bool hasCash;
      private double cash_;
      public bool HasCash {
        get { return hasCash; }
      }
      public double Cash {
        get { return cash_; }
      }
      
      public const int MarketValFieldNumber = 4;
      private bool hasMarketVal;
      private double marketVal_;
      public bool HasMarketVal {
        get { return hasMarketVal; }
      }
      public double MarketVal {
        get { return marketVal_; }
      }
      
      public const int FrozenCashFieldNumber = 5;
      private bool hasFrozenCash;
      private double frozenCash_;
      public bool HasFrozenCash {
        get { return hasFrozenCash; }
      }
      public double FrozenCash {
        get { return frozenCash_; }
      }
      
      public const int DebtCashFieldNumber = 6;
      private bool hasDebtCash;
      private double debtCash_;
      public bool HasDebtCash {
        get { return hasDebtCash; }
      }
      public double DebtCash {
        get { return debtCash_; }
      }
      
      public const int AvlWithdrawalCashFieldNumber = 7;
      private bool hasAvlWithdrawalCash;
      private double avlWithdrawalCash_;
      public bool HasAvlWithdrawalCash {
        get { return hasAvlWithdrawalCash; }
      }
      public double AvlWithdrawalCash {
        get { return avlWithdrawalCash_; }
      }
      
      public const int CurrencyFieldNumber = 8;
      private bool hasCurrency;
      private int currency_;
      public bool HasCurrency {
        get { return hasCurrency; }
      }
      public int Currency {
        get { return currency_; }
      }
      
      public const int AvailableFundsFieldNumber = 9;
      private bool hasAvailableFunds;
      private double availableFunds_;
      public bool HasAvailableFunds {
        get { return hasAvailableFunds; }
      }
      public double AvailableFunds {
        get { return availableFunds_; }
      }
      
      public const int UnrealizedPLFieldNumber = 10;
      private bool hasUnrealizedPL;
      private double unrealizedPL_;
      public bool HasUnrealizedPL {
        get { return hasUnrealizedPL; }
      }
      public double UnrealizedPL {
        get { return unrealizedPL_; }
      }
      
      public const int RealizedPLFieldNumber = 11;
      private bool hasRealizedPL;
      private double realizedPL_;
      public bool HasRealizedPL {
        get { return hasRealizedPL; }
      }
      public double RealizedPL {
        get { return realizedPL_; }
      }
      
      public const int RiskLevelFieldNumber = 12;
      private bool hasRiskLevel;
      private int riskLevel_;
      public bool HasRiskLevel {
        get { return hasRiskLevel; }
      }
      public int RiskLevel {
        get { return riskLevel_; }
      }
      
      public const int InitialMarginFieldNumber = 13;
      private bool hasInitialMargin;
      private double initialMargin_;
      public bool HasInitialMargin {
        get { return hasInitialMargin; }
      }
      public double InitialMargin {
        get { return initialMargin_; }
      }
      
      public const int MaintenanceMarginFieldNumber = 14;
      private bool hasMaintenanceMargin;
      private double maintenanceMargin_;
      public bool HasMaintenanceMargin {
        get { return hasMaintenanceMargin; }
      }
      public double MaintenanceMargin {
        get { return maintenanceMargin_; }
      }
      
      public const int CashInfoListFieldNumber = 15;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo> cashInfoList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo>();
      public scg::IList<global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo> CashInfoListList {
        get { return cashInfoList_; }
      }
      public int CashInfoListCount {
        get { return cashInfoList_.Count; }
      }
      public global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo GetCashInfoList(int index) {
        return cashInfoList_[index];
      }
      
      public const int MaxPowerShortFieldNumber = 16;
      private bool hasMaxPowerShort;
      private double maxPowerShort_;
      public bool HasMaxPowerShort {
        get { return hasMaxPowerShort; }
      }
      public double MaxPowerShort {
        get { return maxPowerShort_; }
      }
      
      public const int NetCashPowerFieldNumber = 17;
      private bool hasNetCashPower;
      private double netCashPower_;
      public bool HasNetCashPower {
        get { return hasNetCashPower; }
      }
      public double NetCashPower {
        get { return netCashPower_; }
      }
      
      public const int LongMvFieldNumber = 18;
      private bool hasLongMv;
      private double longMv_;
      public bool HasLongMv {
        get { return hasLongMv; }
      }
      public double LongMv {
        get { return longMv_; }
      }
      
      public const int ShortMvFieldNumber = 19;
      private bool hasShortMv;
      private double shortMv_;
      public bool HasShortMv {
        get { return hasShortMv; }
      }
      public double ShortMv {
        get { return shortMv_; }
      }
      
      public const int PendingAssetFieldNumber = 20;
      private bool hasPendingAsset;
      private double pendingAsset_;
      public bool HasPendingAsset {
        get { return hasPendingAsset; }
      }
      public double PendingAsset {
        get { return pendingAsset_; }
      }
      
      public const int MaxWithdrawalFieldNumber = 21;
      private bool hasMaxWithdrawal;
      private double maxWithdrawal_;
      public bool HasMaxWithdrawal {
        get { return hasMaxWithdrawal; }
      }
      public double MaxWithdrawal {
        get { return maxWithdrawal_; }
      }
      
      public const int RiskStatusFieldNumber = 22;
      private bool hasRiskStatus;
      private int riskStatus_;
      public bool HasRiskStatus {
        get { return hasRiskStatus; }
      }
      public int RiskStatus {
        get { return riskStatus_; }
      }
      
      public const int MarginCallMarginFieldNumber = 23;
      private bool hasMarginCallMargin;
      private double marginCallMargin_;
      public bool HasMarginCallMargin {
        get { return hasMarginCallMargin; }
      }
      public double MarginCallMargin {
        get { return marginCallMargin_; }
      }
      
      public const int IsPdtFieldNumber = 24;
      private bool hasIsPdt;
      private bool isPdt_;
      public bool HasIsPdt {
        get { return hasIsPdt; }
      }
      public bool IsPdt {
        get { return isPdt_; }
      }
      
      public const int PdtSeqFieldNumber = 25;
      private bool hasPdtSeq;
      private string pdtSeq_ = "";
      public bool HasPdtSeq {
        get { return hasPdtSeq; }
      }
      public string PdtSeq {
        get { return pdtSeq_; }
      }
      
      public const int BeginningDTBPFieldNumber = 26;
      private bool hasBeginningDTBP;
      private double beginningDTBP_;
      public bool HasBeginningDTBP {
        get { return hasBeginningDTBP; }
      }
      public double BeginningDTBP {
        get { return beginningDTBP_; }
      }
      
      public const int RemainingDTBPFieldNumber = 27;
      private bool hasRemainingDTBP;
      private double remainingDTBP_;
      public bool HasRemainingDTBP {
        get { return hasRemainingDTBP; }
      }
      public double RemainingDTBP {
        get { return remainingDTBP_; }
      }
      
      public const int DtCallAmountFieldNumber = 28;
      private bool hasDtCallAmount;
      private double dtCallAmount_;
      public bool HasDtCallAmount {
        get { return hasDtCallAmount; }
      }
      public double DtCallAmount {
        get { return dtCallAmount_; }
      }
      
      public const int DtStatusFieldNumber = 29;
      private bool hasDtStatus;
      private int dtStatus_;
      public bool HasDtStatus {
        get { return hasDtStatus; }
      }
      public int DtStatus {
        get { return dtStatus_; }
      }
      
      public const int SecuritiesAssetsFieldNumber = 30;
      private bool hasSecuritiesAssets;
      private double securitiesAssets_;
      public bool HasSecuritiesAssets {
        get { return hasSecuritiesAssets; }
      }
      public double SecuritiesAssets {
        get { return securitiesAssets_; }
      }
      
      public const int FundAssetsFieldNumber = 31;
      private bool hasFundAssets;
      private double fundAssets_;
      public bool HasFundAssets {
        get { return hasFundAssets; }
      }
      public double FundAssets {
        get { return fundAssets_; }
      }
      
      public const int BondAssetsFieldNumber = 32;
      private bool hasBondAssets;
      private double bondAssets_;
      public bool HasBondAssets {
        get { return hasBondAssets; }
      }
      public double BondAssets {
        get { return bondAssets_; }
      }
      
      public const int MarketInfoListFieldNumber = 33;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo> marketInfoList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo>();
      public scg::IList<global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo> MarketInfoListList {
        get { return marketInfoList_; }
      }
      public int MarketInfoListCount {
        get { return marketInfoList_.Count; }
      }
      public global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo GetMarketInfoList(int index) {
        return marketInfoList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasPower) return false;
          if (!hasTotalAssets) return false;
          if (!hasCash) return false;
          if (!hasMarketVal) return false;
          if (!hasFrozenCash) return false;
          if (!hasDebtCash) return false;
          if (!hasAvlWithdrawalCash) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _fundsFieldNames;
        if (hasPower) {
          output.WriteDouble(1, field_names[24], Power);
        }
        if (hasTotalAssets) {
          output.WriteDouble(2, field_names[31], TotalAssets);
        }
        if (hasCash) {
          output.WriteDouble(3, field_names[4], Cash);
        }
        if (hasMarketVal) {
          output.WriteDouble(4, field_names[18], MarketVal);
        }
        if (hasFrozenCash) {
          output.WriteDouble(5, field_names[10], FrozenCash);
        }
        if (hasDebtCash) {
          output.WriteDouble(6, field_names[7], DebtCash);
        }
        if (hasAvlWithdrawalCash) {
          output.WriteDouble(7, field_names[1], AvlWithdrawalCash);
        }
        if (hasCurrency) {
          output.WriteInt32(8, field_names[6], Currency);
        }
        if (hasAvailableFunds) {
          output.WriteDouble(9, field_names[0], AvailableFunds);
        }
        if (hasUnrealizedPL) {
          output.WriteDouble(10, field_names[32], UnrealizedPL);
        }
        if (hasRealizedPL) {
          output.WriteDouble(11, field_names[25], RealizedPL);
        }
        if (hasRiskLevel) {
          output.WriteInt32(12, field_names[27], RiskLevel);
        }
        if (hasInitialMargin) {
          output.WriteDouble(13, field_names[12], InitialMargin);
        }
        if (hasMaintenanceMargin) {
          output.WriteDouble(14, field_names[15], MaintenanceMargin);
        }
        if (cashInfoList_.Count > 0) {
          output.WriteMessageArray(15, field_names[5], cashInfoList_);
        }
        if (hasMaxPowerShort) {
          output.WriteDouble(16, field_names[19], MaxPowerShort);
        }
        if (hasNetCashPower) {
          output.WriteDouble(17, field_names[21], NetCashPower);
        }
        if (hasLongMv) {
          output.WriteDouble(18, field_names[14], LongMv);
        }
        if (hasShortMv) {
          output.WriteDouble(19, field_names[30], ShortMv);
        }
        if (hasPendingAsset) {
          output.WriteDouble(20, field_names[23], PendingAsset);
        }
        if (hasMaxWithdrawal) {
          output.WriteDouble(21, field_names[20], MaxWithdrawal);
        }
        if (hasRiskStatus) {
          output.WriteInt32(22, field_names[28], RiskStatus);
        }
        if (hasMarginCallMargin) {
          output.WriteDouble(23, field_names[16], MarginCallMargin);
        }
        if (hasIsPdt) {
          output.WriteBool(24, field_names[13], IsPdt);
        }
        if (hasPdtSeq) {
          output.WriteString(25, field_names[22], PdtSeq);
        }
        if (hasBeginningDTBP) {
          output.WriteDouble(26, field_names[2], BeginningDTBP);
        }
        if (hasRemainingDTBP) {
          output.WriteDouble(27, field_names[26], RemainingDTBP);
        }
        if (hasDtCallAmount) {
          output.WriteDouble(28, field_names[8], DtCallAmount);
        }
        if (hasDtStatus) {
          output.WriteInt32(29, field_names[9], DtStatus);
        }
        if (hasSecuritiesAssets) {
          output.WriteDouble(30, field_names[29], SecuritiesAssets);
        }
        if (hasFundAssets) {
          output.WriteDouble(31, field_names[11], FundAssets);
        }
        if (hasBondAssets) {
          output.WriteDouble(32, field_names[3], BondAssets);
        }
        if (marketInfoList_.Count > 0) {
          output.WriteMessageArray(33, field_names[17], marketInfoList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPower) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, Power);
        }
        if (hasTotalAssets) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, TotalAssets);
        }
        if (hasCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, Cash);
        }
        if (hasMarketVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, MarketVal);
        }
        if (hasFrozenCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, FrozenCash);
        }
        if (hasDebtCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, DebtCash);
        }
        if (hasAvlWithdrawalCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, AvlWithdrawalCash);
        }
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Currency);
        }
        if (hasAvailableFunds) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, AvailableFunds);
        }
        if (hasUnrealizedPL) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, UnrealizedPL);
        }
        if (hasRealizedPL) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, RealizedPL);
        }
        if (hasRiskLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, RiskLevel);
        }
        if (hasInitialMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, InitialMargin);
        }
        if (hasMaintenanceMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, MaintenanceMargin);
        }
        foreach (global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo element in CashInfoListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, element);
        }
        if (hasMaxPowerShort) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, MaxPowerShort);
        }
        if (hasNetCashPower) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, NetCashPower);
        }
        if (hasLongMv) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, LongMv);
        }
        if (hasShortMv) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, ShortMv);
        }
        if (hasPendingAsset) {
          size += pb::CodedOutputStream.ComputeDoubleSize(20, PendingAsset);
        }
        if (hasMaxWithdrawal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, MaxWithdrawal);
        }
        if (hasRiskStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, RiskStatus);
        }
        if (hasMarginCallMargin) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, MarginCallMargin);
        }
        if (hasIsPdt) {
          size += pb::CodedOutputStream.ComputeBoolSize(24, IsPdt);
        }
        if (hasPdtSeq) {
          size += pb::CodedOutputStream.ComputeStringSize(25, PdtSeq);
        }
        if (hasBeginningDTBP) {
          size += pb::CodedOutputStream.ComputeDoubleSize(26, BeginningDTBP);
        }
        if (hasRemainingDTBP) {
          size += pb::CodedOutputStream.ComputeDoubleSize(27, RemainingDTBP);
        }
        if (hasDtCallAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(28, DtCallAmount);
        }
        if (hasDtStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(29, DtStatus);
        }
        if (hasSecuritiesAssets) {
          size += pb::CodedOutputStream.ComputeDoubleSize(30, SecuritiesAssets);
        }
        if (hasFundAssets) {
          size += pb::CodedOutputStream.ComputeDoubleSize(31, FundAssets);
        }
        if (hasBondAssets) {
          size += pb::CodedOutputStream.ComputeDoubleSize(32, BondAssets);
        }
        foreach (global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo element in MarketInfoListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(33, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Funds ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Funds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Funds ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Funds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Funds ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Funds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Funds ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Funds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Funds ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Funds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Funds MakeReadOnly() {
        cashInfoList_.MakeReadOnly();
        marketInfoList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Funds prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Funds, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Funds cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Funds result;
        
        private Funds PrepareBuilder() {
          if (resultIsReadOnly) {
            Funds original = result;
            result = new Funds();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Funds MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Funds.Descriptor; }
        }
        
        public override Funds DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Funds.DefaultInstance; }
        }
        
        public override Funds BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Funds) {
            return MergeFrom((Funds) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Funds other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.Funds.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasPower) {
            Power = other.Power;
          }
          if (other.HasTotalAssets) {
            TotalAssets = other.TotalAssets;
          }
          if (other.HasCash) {
            Cash = other.Cash;
          }
          if (other.HasMarketVal) {
            MarketVal = other.MarketVal;
          }
          if (other.HasFrozenCash) {
            FrozenCash = other.FrozenCash;
          }
          if (other.HasDebtCash) {
            DebtCash = other.DebtCash;
          }
          if (other.HasAvlWithdrawalCash) {
            AvlWithdrawalCash = other.AvlWithdrawalCash;
          }
          if (other.HasCurrency) {
            Currency = other.Currency;
          }
          if (other.HasAvailableFunds) {
            AvailableFunds = other.AvailableFunds;
          }
          if (other.HasUnrealizedPL) {
            UnrealizedPL = other.UnrealizedPL;
          }
          if (other.HasRealizedPL) {
            RealizedPL = other.RealizedPL;
          }
          if (other.HasRiskLevel) {
            RiskLevel = other.RiskLevel;
          }
          if (other.HasInitialMargin) {
            InitialMargin = other.InitialMargin;
          }
          if (other.HasMaintenanceMargin) {
            MaintenanceMargin = other.MaintenanceMargin;
          }
          if (other.cashInfoList_.Count != 0) {
            result.cashInfoList_.Add(other.cashInfoList_);
          }
          if (other.HasMaxPowerShort) {
            MaxPowerShort = other.MaxPowerShort;
          }
          if (other.HasNetCashPower) {
            NetCashPower = other.NetCashPower;
          }
          if (other.HasLongMv) {
            LongMv = other.LongMv;
          }
          if (other.HasShortMv) {
            ShortMv = other.ShortMv;
          }
          if (other.HasPendingAsset) {
            PendingAsset = other.PendingAsset;
          }
          if (other.HasMaxWithdrawal) {
            MaxWithdrawal = other.MaxWithdrawal;
          }
          if (other.HasRiskStatus) {
            RiskStatus = other.RiskStatus;
          }
          if (other.HasMarginCallMargin) {
            MarginCallMargin = other.MarginCallMargin;
          }
          if (other.HasIsPdt) {
            IsPdt = other.IsPdt;
          }
          if (other.HasPdtSeq) {
            PdtSeq = other.PdtSeq;
          }
          if (other.HasBeginningDTBP) {
            BeginningDTBP = other.BeginningDTBP;
          }
          if (other.HasRemainingDTBP) {
            RemainingDTBP = other.RemainingDTBP;
          }
          if (other.HasDtCallAmount) {
            DtCallAmount = other.DtCallAmount;
          }
          if (other.HasDtStatus) {
            DtStatus = other.DtStatus;
          }
          if (other.HasSecuritiesAssets) {
            SecuritiesAssets = other.SecuritiesAssets;
          }
          if (other.HasFundAssets) {
            FundAssets = other.FundAssets;
          }
          if (other.HasBondAssets) {
            BondAssets = other.BondAssets;
          }
          if (other.marketInfoList_.Count != 0) {
            result.marketInfoList_.Add(other.marketInfoList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_fundsFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _fundsFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasPower = input.ReadDouble(ref result.power_);
                break;
              }
              case 17: {
                result.hasTotalAssets = input.ReadDouble(ref result.totalAssets_);
                break;
              }
              case 25: {
                result.hasCash = input.ReadDouble(ref result.cash_);
                break;
              }
              case 33: {
                result.hasMarketVal = input.ReadDouble(ref result.marketVal_);
                break;
              }
              case 41: {
                result.hasFrozenCash = input.ReadDouble(ref result.frozenCash_);
                break;
              }
              case 49: {
                result.hasDebtCash = input.ReadDouble(ref result.debtCash_);
                break;
              }
              case 57: {
                result.hasAvlWithdrawalCash = input.ReadDouble(ref result.avlWithdrawalCash_);
                break;
              }
              case 64: {
                result.hasCurrency = input.ReadInt32(ref result.currency_);
                break;
              }
              case 73: {
                result.hasAvailableFunds = input.ReadDouble(ref result.availableFunds_);
                break;
              }
              case 81: {
                result.hasUnrealizedPL = input.ReadDouble(ref result.unrealizedPL_);
                break;
              }
              case 89: {
                result.hasRealizedPL = input.ReadDouble(ref result.realizedPL_);
                break;
              }
              case 96: {
                result.hasRiskLevel = input.ReadInt32(ref result.riskLevel_);
                break;
              }
              case 105: {
                result.hasInitialMargin = input.ReadDouble(ref result.initialMargin_);
                break;
              }
              case 113: {
                result.hasMaintenanceMargin = input.ReadDouble(ref result.maintenanceMargin_);
                break;
              }
              case 122: {
                input.ReadMessageArray(tag, field_name, result.cashInfoList_, global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo.DefaultInstance, extensionRegistry);
                break;
              }
              case 129: {
                result.hasMaxPowerShort = input.ReadDouble(ref result.maxPowerShort_);
                break;
              }
              case 137: {
                result.hasNetCashPower = input.ReadDouble(ref result.netCashPower_);
                break;
              }
              case 145: {
                result.hasLongMv = input.ReadDouble(ref result.longMv_);
                break;
              }
              case 153: {
                result.hasShortMv = input.ReadDouble(ref result.shortMv_);
                break;
              }
              case 161: {
                result.hasPendingAsset = input.ReadDouble(ref result.pendingAsset_);
                break;
              }
              case 169: {
                result.hasMaxWithdrawal = input.ReadDouble(ref result.maxWithdrawal_);
                break;
              }
              case 176: {
                result.hasRiskStatus = input.ReadInt32(ref result.riskStatus_);
                break;
              }
              case 185: {
                result.hasMarginCallMargin = input.ReadDouble(ref result.marginCallMargin_);
                break;
              }
              case 192: {
                result.hasIsPdt = input.ReadBool(ref result.isPdt_);
                break;
              }
              case 202: {
                result.hasPdtSeq = input.ReadString(ref result.pdtSeq_);
                break;
              }
              case 209: {
                result.hasBeginningDTBP = input.ReadDouble(ref result.beginningDTBP_);
                break;
              }
              case 217: {
                result.hasRemainingDTBP = input.ReadDouble(ref result.remainingDTBP_);
                break;
              }
              case 225: {
                result.hasDtCallAmount = input.ReadDouble(ref result.dtCallAmount_);
                break;
              }
              case 232: {
                result.hasDtStatus = input.ReadInt32(ref result.dtStatus_);
                break;
              }
              case 241: {
                result.hasSecuritiesAssets = input.ReadDouble(ref result.securitiesAssets_);
                break;
              }
              case 249: {
                result.hasFundAssets = input.ReadDouble(ref result.fundAssets_);
                break;
              }
              case 257: {
                result.hasBondAssets = input.ReadDouble(ref result.bondAssets_);
                break;
              }
              case 266: {
                input.ReadMessageArray(tag, field_name, result.marketInfoList_, global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasPower {
          get { return result.hasPower; }
        }
        public double Power {
          get { return result.Power; }
          set { SetPower(value); }
        }
        public Builder SetPower(double value) {
          PrepareBuilder();
          result.hasPower = true;
          result.power_ = value;
          return this;
        }
        public Builder ClearPower() {
          PrepareBuilder();
          result.hasPower = false;
          result.power_ = 0D;
          return this;
        }
        
        public bool HasTotalAssets {
          get { return result.hasTotalAssets; }
        }
        public double TotalAssets {
          get { return result.TotalAssets; }
          set { SetTotalAssets(value); }
        }
        public Builder SetTotalAssets(double value) {
          PrepareBuilder();
          result.hasTotalAssets = true;
          result.totalAssets_ = value;
          return this;
        }
        public Builder ClearTotalAssets() {
          PrepareBuilder();
          result.hasTotalAssets = false;
          result.totalAssets_ = 0D;
          return this;
        }
        
        public bool HasCash {
          get { return result.hasCash; }
        }
        public double Cash {
          get { return result.Cash; }
          set { SetCash(value); }
        }
        public Builder SetCash(double value) {
          PrepareBuilder();
          result.hasCash = true;
          result.cash_ = value;
          return this;
        }
        public Builder ClearCash() {
          PrepareBuilder();
          result.hasCash = false;
          result.cash_ = 0D;
          return this;
        }
        
        public bool HasMarketVal {
          get { return result.hasMarketVal; }
        }
        public double MarketVal {
          get { return result.MarketVal; }
          set { SetMarketVal(value); }
        }
        public Builder SetMarketVal(double value) {
          PrepareBuilder();
          result.hasMarketVal = true;
          result.marketVal_ = value;
          return this;
        }
        public Builder ClearMarketVal() {
          PrepareBuilder();
          result.hasMarketVal = false;
          result.marketVal_ = 0D;
          return this;
        }
        
        public bool HasFrozenCash {
          get { return result.hasFrozenCash; }
        }
        public double FrozenCash {
          get { return result.FrozenCash; }
          set { SetFrozenCash(value); }
        }
        public Builder SetFrozenCash(double value) {
          PrepareBuilder();
          result.hasFrozenCash = true;
          result.frozenCash_ = value;
          return this;
        }
        public Builder ClearFrozenCash() {
          PrepareBuilder();
          result.hasFrozenCash = false;
          result.frozenCash_ = 0D;
          return this;
        }
        
        public bool HasDebtCash {
          get { return result.hasDebtCash; }
        }
        public double DebtCash {
          get { return result.DebtCash; }
          set { SetDebtCash(value); }
        }
        public Builder SetDebtCash(double value) {
          PrepareBuilder();
          result.hasDebtCash = true;
          result.debtCash_ = value;
          return this;
        }
        public Builder ClearDebtCash() {
          PrepareBuilder();
          result.hasDebtCash = false;
          result.debtCash_ = 0D;
          return this;
        }
        
        public bool HasAvlWithdrawalCash {
          get { return result.hasAvlWithdrawalCash; }
        }
        public double AvlWithdrawalCash {
          get { return result.AvlWithdrawalCash; }
          set { SetAvlWithdrawalCash(value); }
        }
        public Builder SetAvlWithdrawalCash(double value) {
          PrepareBuilder();
          result.hasAvlWithdrawalCash = true;
          result.avlWithdrawalCash_ = value;
          return this;
        }
        public Builder ClearAvlWithdrawalCash() {
          PrepareBuilder();
          result.hasAvlWithdrawalCash = false;
          result.avlWithdrawalCash_ = 0D;
          return this;
        }
        
        public bool HasCurrency {
          get { return result.hasCurrency; }
        }
        public int Currency {
          get { return result.Currency; }
          set { SetCurrency(value); }
        }
        public Builder SetCurrency(int value) {
          PrepareBuilder();
          result.hasCurrency = true;
          result.currency_ = value;
          return this;
        }
        public Builder ClearCurrency() {
          PrepareBuilder();
          result.hasCurrency = false;
          result.currency_ = 0;
          return this;
        }
        
        public bool HasAvailableFunds {
          get { return result.hasAvailableFunds; }
        }
        public double AvailableFunds {
          get { return result.AvailableFunds; }
          set { SetAvailableFunds(value); }
        }
        public Builder SetAvailableFunds(double value) {
          PrepareBuilder();
          result.hasAvailableFunds = true;
          result.availableFunds_ = value;
          return this;
        }
        public Builder ClearAvailableFunds() {
          PrepareBuilder();
          result.hasAvailableFunds = false;
          result.availableFunds_ = 0D;
          return this;
        }
        
        public bool HasUnrealizedPL {
          get { return result.hasUnrealizedPL; }
        }
        public double UnrealizedPL {
          get { return result.UnrealizedPL; }
          set { SetUnrealizedPL(value); }
        }
        public Builder SetUnrealizedPL(double value) {
          PrepareBuilder();
          result.hasUnrealizedPL = true;
          result.unrealizedPL_ = value;
          return this;
        }
        public Builder ClearUnrealizedPL() {
          PrepareBuilder();
          result.hasUnrealizedPL = false;
          result.unrealizedPL_ = 0D;
          return this;
        }
        
        public bool HasRealizedPL {
          get { return result.hasRealizedPL; }
        }
        public double RealizedPL {
          get { return result.RealizedPL; }
          set { SetRealizedPL(value); }
        }
        public Builder SetRealizedPL(double value) {
          PrepareBuilder();
          result.hasRealizedPL = true;
          result.realizedPL_ = value;
          return this;
        }
        public Builder ClearRealizedPL() {
          PrepareBuilder();
          result.hasRealizedPL = false;
          result.realizedPL_ = 0D;
          return this;
        }
        
        public bool HasRiskLevel {
          get { return result.hasRiskLevel; }
        }
        public int RiskLevel {
          get { return result.RiskLevel; }
          set { SetRiskLevel(value); }
        }
        public Builder SetRiskLevel(int value) {
          PrepareBuilder();
          result.hasRiskLevel = true;
          result.riskLevel_ = value;
          return this;
        }
        public Builder ClearRiskLevel() {
          PrepareBuilder();
          result.hasRiskLevel = false;
          result.riskLevel_ = 0;
          return this;
        }
        
        public bool HasInitialMargin {
          get { return result.hasInitialMargin; }
        }
        public double InitialMargin {
          get { return result.InitialMargin; }
          set { SetInitialMargin(value); }
        }
        public Builder SetInitialMargin(double value) {
          PrepareBuilder();
          result.hasInitialMargin = true;
          result.initialMargin_ = value;
          return this;
        }
        public Builder ClearInitialMargin() {
          PrepareBuilder();
          result.hasInitialMargin = false;
          result.initialMargin_ = 0D;
          return this;
        }
        
        public bool HasMaintenanceMargin {
          get { return result.hasMaintenanceMargin; }
        }
        public double MaintenanceMargin {
          get { return result.MaintenanceMargin; }
          set { SetMaintenanceMargin(value); }
        }
        public Builder SetMaintenanceMargin(double value) {
          PrepareBuilder();
          result.hasMaintenanceMargin = true;
          result.maintenanceMargin_ = value;
          return this;
        }
        public Builder ClearMaintenanceMargin() {
          PrepareBuilder();
          result.hasMaintenanceMargin = false;
          result.maintenanceMargin_ = 0D;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo> CashInfoListList {
          get { return PrepareBuilder().cashInfoList_; }
        }
        public int CashInfoListCount {
          get { return result.CashInfoListCount; }
        }
        public global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo GetCashInfoList(int index) {
          return result.GetCashInfoList(index);
        }
        public Builder SetCashInfoList(int index, global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.cashInfoList_[index] = value;
          return this;
        }
        public Builder SetCashInfoList(int index, global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.cashInfoList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddCashInfoList(global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.cashInfoList_.Add(value);
          return this;
        }
        public Builder AddCashInfoList(global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.cashInfoList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeCashInfoList(scg::IEnumerable<global::Futu.OpenApi.Pb.TrdCommon.AccCashInfo> values) {
          PrepareBuilder();
          result.cashInfoList_.Add(values);
          return this;
        }
        public Builder ClearCashInfoList() {
          PrepareBuilder();
          result.cashInfoList_.Clear();
          return this;
        }
        
        public bool HasMaxPowerShort {
          get { return result.hasMaxPowerShort; }
        }
        public double MaxPowerShort {
          get { return result.MaxPowerShort; }
          set { SetMaxPowerShort(value); }
        }
        public Builder SetMaxPowerShort(double value) {
          PrepareBuilder();
          result.hasMaxPowerShort = true;
          result.maxPowerShort_ = value;
          return this;
        }
        public Builder ClearMaxPowerShort() {
          PrepareBuilder();
          result.hasMaxPowerShort = false;
          result.maxPowerShort_ = 0D;
          return this;
        }
        
        public bool HasNetCashPower {
          get { return result.hasNetCashPower; }
        }
        public double NetCashPower {
          get { return result.NetCashPower; }
          set { SetNetCashPower(value); }
        }
        public Builder SetNetCashPower(double value) {
          PrepareBuilder();
          result.hasNetCashPower = true;
          result.netCashPower_ = value;
          return this;
        }
        public Builder ClearNetCashPower() {
          PrepareBuilder();
          result.hasNetCashPower = false;
          result.netCashPower_ = 0D;
          return this;
        }
        
        public bool HasLongMv {
          get { return result.hasLongMv; }
        }
        public double LongMv {
          get { return result.LongMv; }
          set { SetLongMv(value); }
        }
        public Builder SetLongMv(double value) {
          PrepareBuilder();
          result.hasLongMv = true;
          result.longMv_ = value;
          return this;
        }
        public Builder ClearLongMv() {
          PrepareBuilder();
          result.hasLongMv = false;
          result.longMv_ = 0D;
          return this;
        }
        
        public bool HasShortMv {
          get { return result.hasShortMv; }
        }
        public double ShortMv {
          get { return result.ShortMv; }
          set { SetShortMv(value); }
        }
        public Builder SetShortMv(double value) {
          PrepareBuilder();
          result.hasShortMv = true;
          result.shortMv_ = value;
          return this;
        }
        public Builder ClearShortMv() {
          PrepareBuilder();
          result.hasShortMv = false;
          result.shortMv_ = 0D;
          return this;
        }
        
        public bool HasPendingAsset {
          get { return result.hasPendingAsset; }
        }
        public double PendingAsset {
          get { return result.PendingAsset; }
          set { SetPendingAsset(value); }
        }
        public Builder SetPendingAsset(double value) {
          PrepareBuilder();
          result.hasPendingAsset = true;
          result.pendingAsset_ = value;
          return this;
        }
        public Builder ClearPendingAsset() {
          PrepareBuilder();
          result.hasPendingAsset = false;
          result.pendingAsset_ = 0D;
          return this;
        }
        
        public bool HasMaxWithdrawal {
          get { return result.hasMaxWithdrawal; }
        }
        public double MaxWithdrawal {
          get { return result.MaxWithdrawal; }
          set { SetMaxWithdrawal(value); }
        }
        public Builder SetMaxWithdrawal(double value) {
          PrepareBuilder();
          result.hasMaxWithdrawal = true;
          result.maxWithdrawal_ = value;
          return this;
        }
        public Builder ClearMaxWithdrawal() {
          PrepareBuilder();
          result.hasMaxWithdrawal = false;
          result.maxWithdrawal_ = 0D;
          return this;
        }
        
        public bool HasRiskStatus {
          get { return result.hasRiskStatus; }
        }
        public int RiskStatus {
          get { return result.RiskStatus; }
          set { SetRiskStatus(value); }
        }
        public Builder SetRiskStatus(int value) {
          PrepareBuilder();
          result.hasRiskStatus = true;
          result.riskStatus_ = value;
          return this;
        }
        public Builder ClearRiskStatus() {
          PrepareBuilder();
          result.hasRiskStatus = false;
          result.riskStatus_ = 0;
          return this;
        }
        
        public bool HasMarginCallMargin {
          get { return result.hasMarginCallMargin; }
        }
        public double MarginCallMargin {
          get { return result.MarginCallMargin; }
          set { SetMarginCallMargin(value); }
        }
        public Builder SetMarginCallMargin(double value) {
          PrepareBuilder();
          result.hasMarginCallMargin = true;
          result.marginCallMargin_ = value;
          return this;
        }
        public Builder ClearMarginCallMargin() {
          PrepareBuilder();
          result.hasMarginCallMargin = false;
          result.marginCallMargin_ = 0D;
          return this;
        }
        
        public bool HasIsPdt {
          get { return result.hasIsPdt; }
        }
        public bool IsPdt {
          get { return result.IsPdt; }
          set { SetIsPdt(value); }
        }
        public Builder SetIsPdt(bool value) {
          PrepareBuilder();
          result.hasIsPdt = true;
          result.isPdt_ = value;
          return this;
        }
        public Builder ClearIsPdt() {
          PrepareBuilder();
          result.hasIsPdt = false;
          result.isPdt_ = false;
          return this;
        }
        
        public bool HasPdtSeq {
          get { return result.hasPdtSeq; }
        }
        public string PdtSeq {
          get { return result.PdtSeq; }
          set { SetPdtSeq(value); }
        }
        public Builder SetPdtSeq(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasPdtSeq = true;
          result.pdtSeq_ = value;
          return this;
        }
        public Builder ClearPdtSeq() {
          PrepareBuilder();
          result.hasPdtSeq = false;
          result.pdtSeq_ = "";
          return this;
        }
        
        public bool HasBeginningDTBP {
          get { return result.hasBeginningDTBP; }
        }
        public double BeginningDTBP {
          get { return result.BeginningDTBP; }
          set { SetBeginningDTBP(value); }
        }
        public Builder SetBeginningDTBP(double value) {
          PrepareBuilder();
          result.hasBeginningDTBP = true;
          result.beginningDTBP_ = value;
          return this;
        }
        public Builder ClearBeginningDTBP() {
          PrepareBuilder();
          result.hasBeginningDTBP = false;
          result.beginningDTBP_ = 0D;
          return this;
        }
        
        public bool HasRemainingDTBP {
          get { return result.hasRemainingDTBP; }
        }
        public double RemainingDTBP {
          get { return result.RemainingDTBP; }
          set { SetRemainingDTBP(value); }
        }
        public Builder SetRemainingDTBP(double value) {
          PrepareBuilder();
          result.hasRemainingDTBP = true;
          result.remainingDTBP_ = value;
          return this;
        }
        public Builder ClearRemainingDTBP() {
          PrepareBuilder();
          result.hasRemainingDTBP = false;
          result.remainingDTBP_ = 0D;
          return this;
        }
        
        public bool HasDtCallAmount {
          get { return result.hasDtCallAmount; }
        }
        public double DtCallAmount {
          get { return result.DtCallAmount; }
          set { SetDtCallAmount(value); }
        }
        public Builder SetDtCallAmount(double value) {
          PrepareBuilder();
          result.hasDtCallAmount = true;
          result.dtCallAmount_ = value;
          return this;
        }
        public Builder ClearDtCallAmount() {
          PrepareBuilder();
          result.hasDtCallAmount = false;
          result.dtCallAmount_ = 0D;
          return this;
        }
        
        public bool HasDtStatus {
          get { return result.hasDtStatus; }
        }
        public int DtStatus {
          get { return result.DtStatus; }
          set { SetDtStatus(value); }
        }
        public Builder SetDtStatus(int value) {
          PrepareBuilder();
          result.hasDtStatus = true;
          result.dtStatus_ = value;
          return this;
        }
        public Builder ClearDtStatus() {
          PrepareBuilder();
          result.hasDtStatus = false;
          result.dtStatus_ = 0;
          return this;
        }
        
        public bool HasSecuritiesAssets {
          get { return result.hasSecuritiesAssets; }
        }
        public double SecuritiesAssets {
          get { return result.SecuritiesAssets; }
          set { SetSecuritiesAssets(value); }
        }
        public Builder SetSecuritiesAssets(double value) {
          PrepareBuilder();
          result.hasSecuritiesAssets = true;
          result.securitiesAssets_ = value;
          return this;
        }
        public Builder ClearSecuritiesAssets() {
          PrepareBuilder();
          result.hasSecuritiesAssets = false;
          result.securitiesAssets_ = 0D;
          return this;
        }
        
        public bool HasFundAssets {
          get { return result.hasFundAssets; }
        }
        public double FundAssets {
          get { return result.FundAssets; }
          set { SetFundAssets(value); }
        }
        public Builder SetFundAssets(double value) {
          PrepareBuilder();
          result.hasFundAssets = true;
          result.fundAssets_ = value;
          return this;
        }
        public Builder ClearFundAssets() {
          PrepareBuilder();
          result.hasFundAssets = false;
          result.fundAssets_ = 0D;
          return this;
        }
        
        public bool HasBondAssets {
          get { return result.hasBondAssets; }
        }
        public double BondAssets {
          get { return result.BondAssets; }
          set { SetBondAssets(value); }
        }
        public Builder SetBondAssets(double value) {
          PrepareBuilder();
          result.hasBondAssets = true;
          result.bondAssets_ = value;
          return this;
        }
        public Builder ClearBondAssets() {
          PrepareBuilder();
          result.hasBondAssets = false;
          result.bondAssets_ = 0D;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo> MarketInfoListList {
          get { return PrepareBuilder().marketInfoList_; }
        }
        public int MarketInfoListCount {
          get { return result.MarketInfoListCount; }
        }
        public global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo GetMarketInfoList(int index) {
          return result.GetMarketInfoList(index);
        }
        public Builder SetMarketInfoList(int index, global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.marketInfoList_[index] = value;
          return this;
        }
        public Builder SetMarketInfoList(int index, global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.marketInfoList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddMarketInfoList(global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.marketInfoList_.Add(value);
          return this;
        }
        public Builder AddMarketInfoList(global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.marketInfoList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeMarketInfoList(scg::IEnumerable<global::Futu.OpenApi.Pb.TrdCommon.AccMarketInfo> values) {
          PrepareBuilder();
          result.marketInfoList_.Add(values);
          return this;
        }
        public Builder ClearMarketInfoList() {
          PrepareBuilder();
          result.marketInfoList_.Clear();
          return this;
        }
      }
      static Funds() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Position : pb::GeneratedMessage<Position, Position.Builder> {
      private Position() { }
      private static readonly Position defaultInstance = new Position().MakeReadOnly();
      private static readonly string[] _positionFieldNames = new string[] { "averageCostPrice", "averagePlRatio", "canSellQty", "code", "costPrice", "currency", "dilutedCostPrice", "name", "plRatio", "plVal", "positionID", "positionSide", "price", "qty", "realizedPL", "secMarket", "td_buyQty", "td_buyVal", "td_plVal", "td_sellQty", "td_sellVal", "td_trdVal", "trdMarket", "unrealizedPL", "val" };
      private static readonly uint[] _positionFieldTags = new uint[] { 265, 273, 49, 26, 65, 240, 257, 34, 89, 81, 8, 16, 57, 41, 233, 96, 193, 185, 169, 209, 201, 177, 248, 225, 73 };
      public static Position DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Position DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Position ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Position__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Position, Position.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Position__FieldAccessorTable; }
      }
      
      public const int PositionIDFieldNumber = 1;
      private bool hasPositionID;
      private ulong positionID_;
      public bool HasPositionID {
        get { return hasPositionID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong PositionID {
        get { return positionID_; }
      }
      
      public const int PositionSideFieldNumber = 2;
      private bool hasPositionSide;
      private int positionSide_;
      public bool HasPositionSide {
        get { return hasPositionSide; }
      }
      public int PositionSide {
        get { return positionSide_; }
      }
      
      public const int CodeFieldNumber = 3;
      private bool hasCode;
      private string code_ = "";
      public bool HasCode {
        get { return hasCode; }
      }
      public string Code {
        get { return code_; }
      }
      
      public const int NameFieldNumber = 4;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int QtyFieldNumber = 5;
      private bool hasQty;
      private double qty_;
      public bool HasQty {
        get { return hasQty; }
      }
      public double Qty {
        get { return qty_; }
      }
      
      public const int CanSellQtyFieldNumber = 6;
      private bool hasCanSellQty;
      private double canSellQty_;
      public bool HasCanSellQty {
        get { return hasCanSellQty; }
      }
      public double CanSellQty {
        get { return canSellQty_; }
      }
      
      public const int PriceFieldNumber = 7;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int CostPriceFieldNumber = 8;
      private bool hasCostPrice;
      private double costPrice_;
      public bool HasCostPrice {
        get { return hasCostPrice; }
      }
      public double CostPrice {
        get { return costPrice_; }
      }
      
      public const int ValFieldNumber = 9;
      private bool hasVal;
      private double val_;
      public bool HasVal {
        get { return hasVal; }
      }
      public double Val {
        get { return val_; }
      }
      
      public const int PlValFieldNumber = 10;
      private bool hasPlVal;
      private double plVal_;
      public bool HasPlVal {
        get { return hasPlVal; }
      }
      public double PlVal {
        get { return plVal_; }
      }
      
      public const int PlRatioFieldNumber = 11;
      private bool hasPlRatio;
      private double plRatio_;
      public bool HasPlRatio {
        get { return hasPlRatio; }
      }
      public double PlRatio {
        get { return plRatio_; }
      }
      
      public const int SecMarketFieldNumber = 12;
      private bool hasSecMarket;
      private int secMarket_;
      public bool HasSecMarket {
        get { return hasSecMarket; }
      }
      public int SecMarket {
        get { return secMarket_; }
      }
      
      public const int TdPlValFieldNumber = 21;
      private bool hasTdPlVal;
      private double tdPlVal_;
      public bool HasTdPlVal {
        get { return hasTdPlVal; }
      }
      public double TdPlVal {
        get { return tdPlVal_; }
      }
      
      public const int TdTrdValFieldNumber = 22;
      private bool hasTdTrdVal;
      private double tdTrdVal_;
      public bool HasTdTrdVal {
        get { return hasTdTrdVal; }
      }
      public double TdTrdVal {
        get { return tdTrdVal_; }
      }
      
      public const int TdBuyValFieldNumber = 23;
      private bool hasTdBuyVal;
      private double tdBuyVal_;
      public bool HasTdBuyVal {
        get { return hasTdBuyVal; }
      }
      public double TdBuyVal {
        get { return tdBuyVal_; }
      }
      
      public const int TdBuyQtyFieldNumber = 24;
      private bool hasTdBuyQty;
      private double tdBuyQty_;
      public bool HasTdBuyQty {
        get { return hasTdBuyQty; }
      }
      public double TdBuyQty {
        get { return tdBuyQty_; }
      }
      
      public const int TdSellValFieldNumber = 25;
      private bool hasTdSellVal;
      private double tdSellVal_;
      public bool HasTdSellVal {
        get { return hasTdSellVal; }
      }
      public double TdSellVal {
        get { return tdSellVal_; }
      }
      
      public const int TdSellQtyFieldNumber = 26;
      private bool hasTdSellQty;
      private double tdSellQty_;
      public bool HasTdSellQty {
        get { return hasTdSellQty; }
      }
      public double TdSellQty {
        get { return tdSellQty_; }
      }
      
      public const int UnrealizedPLFieldNumber = 28;
      private bool hasUnrealizedPL;
      private double unrealizedPL_;
      public bool HasUnrealizedPL {
        get { return hasUnrealizedPL; }
      }
      public double UnrealizedPL {
        get { return unrealizedPL_; }
      }
      
      public const int RealizedPLFieldNumber = 29;
      private bool hasRealizedPL;
      private double realizedPL_;
      public bool HasRealizedPL {
        get { return hasRealizedPL; }
      }
      public double RealizedPL {
        get { return realizedPL_; }
      }
      
      public const int CurrencyFieldNumber = 30;
      private bool hasCurrency;
      private int currency_;
      public bool HasCurrency {
        get { return hasCurrency; }
      }
      public int Currency {
        get { return currency_; }
      }
      
      public const int TrdMarketFieldNumber = 31;
      private bool hasTrdMarket;
      private int trdMarket_;
      public bool HasTrdMarket {
        get { return hasTrdMarket; }
      }
      public int TrdMarket {
        get { return trdMarket_; }
      }
      
      public const int DilutedCostPriceFieldNumber = 32;
      private bool hasDilutedCostPrice;
      private double dilutedCostPrice_;
      public bool HasDilutedCostPrice {
        get { return hasDilutedCostPrice; }
      }
      public double DilutedCostPrice {
        get { return dilutedCostPrice_; }
      }
      
      public const int AverageCostPriceFieldNumber = 33;
      private bool hasAverageCostPrice;
      private double averageCostPrice_;
      public bool HasAverageCostPrice {
        get { return hasAverageCostPrice; }
      }
      public double AverageCostPrice {
        get { return averageCostPrice_; }
      }
      
      public const int AveragePlRatioFieldNumber = 34;
      private bool hasAveragePlRatio;
      private double averagePlRatio_;
      public bool HasAveragePlRatio {
        get { return hasAveragePlRatio; }
      }
      public double AveragePlRatio {
        get { return averagePlRatio_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasPositionID) return false;
          if (!hasPositionSide) return false;
          if (!hasCode) return false;
          if (!hasName) return false;
          if (!hasQty) return false;
          if (!hasCanSellQty) return false;
          if (!hasPrice) return false;
          if (!hasVal) return false;
          if (!hasPlVal) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _positionFieldNames;
        if (hasPositionID) {
          output.WriteUInt64(1, field_names[10], PositionID);
        }
        if (hasPositionSide) {
          output.WriteInt32(2, field_names[11], PositionSide);
        }
        if (hasCode) {
          output.WriteString(3, field_names[3], Code);
        }
        if (hasName) {
          output.WriteString(4, field_names[7], Name);
        }
        if (hasQty) {
          output.WriteDouble(5, field_names[13], Qty);
        }
        if (hasCanSellQty) {
          output.WriteDouble(6, field_names[2], CanSellQty);
        }
        if (hasPrice) {
          output.WriteDouble(7, field_names[12], Price);
        }
        if (hasCostPrice) {
          output.WriteDouble(8, field_names[4], CostPrice);
        }
        if (hasVal) {
          output.WriteDouble(9, field_names[24], Val);
        }
        if (hasPlVal) {
          output.WriteDouble(10, field_names[9], PlVal);
        }
        if (hasPlRatio) {
          output.WriteDouble(11, field_names[8], PlRatio);
        }
        if (hasSecMarket) {
          output.WriteInt32(12, field_names[15], SecMarket);
        }
        if (hasTdPlVal) {
          output.WriteDouble(21, field_names[18], TdPlVal);
        }
        if (hasTdTrdVal) {
          output.WriteDouble(22, field_names[21], TdTrdVal);
        }
        if (hasTdBuyVal) {
          output.WriteDouble(23, field_names[17], TdBuyVal);
        }
        if (hasTdBuyQty) {
          output.WriteDouble(24, field_names[16], TdBuyQty);
        }
        if (hasTdSellVal) {
          output.WriteDouble(25, field_names[20], TdSellVal);
        }
        if (hasTdSellQty) {
          output.WriteDouble(26, field_names[19], TdSellQty);
        }
        if (hasUnrealizedPL) {
          output.WriteDouble(28, field_names[23], UnrealizedPL);
        }
        if (hasRealizedPL) {
          output.WriteDouble(29, field_names[14], RealizedPL);
        }
        if (hasCurrency) {
          output.WriteInt32(30, field_names[5], Currency);
        }
        if (hasTrdMarket) {
          output.WriteInt32(31, field_names[22], TrdMarket);
        }
        if (hasDilutedCostPrice) {
          output.WriteDouble(32, field_names[6], DilutedCostPrice);
        }
        if (hasAverageCostPrice) {
          output.WriteDouble(33, field_names[0], AverageCostPrice);
        }
        if (hasAveragePlRatio) {
          output.WriteDouble(34, field_names[1], AveragePlRatio);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPositionID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, PositionID);
        }
        if (hasPositionSide) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, PositionSide);
        }
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Code);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        if (hasQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, Qty);
        }
        if (hasCanSellQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, CanSellQty);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, Price);
        }
        if (hasCostPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, CostPrice);
        }
        if (hasVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Val);
        }
        if (hasPlVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, PlVal);
        }
        if (hasPlRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, PlRatio);
        }
        if (hasSecMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, SecMarket);
        }
        if (hasTdPlVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, TdPlVal);
        }
        if (hasTdTrdVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(22, TdTrdVal);
        }
        if (hasTdBuyVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, TdBuyVal);
        }
        if (hasTdBuyQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(24, TdBuyQty);
        }
        if (hasTdSellVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(25, TdSellVal);
        }
        if (hasTdSellQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(26, TdSellQty);
        }
        if (hasUnrealizedPL) {
          size += pb::CodedOutputStream.ComputeDoubleSize(28, UnrealizedPL);
        }
        if (hasRealizedPL) {
          size += pb::CodedOutputStream.ComputeDoubleSize(29, RealizedPL);
        }
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeInt32Size(30, Currency);
        }
        if (hasTrdMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(31, TrdMarket);
        }
        if (hasDilutedCostPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(32, DilutedCostPrice);
        }
        if (hasAverageCostPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(33, AverageCostPrice);
        }
        if (hasAveragePlRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(34, AveragePlRatio);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Position ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Position ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Position ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Position ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Position ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Position MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Position prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Position, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Position cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Position result;
        
        private Position PrepareBuilder() {
          if (resultIsReadOnly) {
            Position original = result;
            result = new Position();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Position MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Position.Descriptor; }
        }
        
        public override Position DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Position.DefaultInstance; }
        }
        
        public override Position BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Position) {
            return MergeFrom((Position) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Position other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.Position.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasPositionID) {
            PositionID = other.PositionID;
          }
          if (other.HasPositionSide) {
            PositionSide = other.PositionSide;
          }
          if (other.HasCode) {
            Code = other.Code;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasQty) {
            Qty = other.Qty;
          }
          if (other.HasCanSellQty) {
            CanSellQty = other.CanSellQty;
          }
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasCostPrice) {
            CostPrice = other.CostPrice;
          }
          if (other.HasVal) {
            Val = other.Val;
          }
          if (other.HasPlVal) {
            PlVal = other.PlVal;
          }
          if (other.HasPlRatio) {
            PlRatio = other.PlRatio;
          }
          if (other.HasSecMarket) {
            SecMarket = other.SecMarket;
          }
          if (other.HasTdPlVal) {
            TdPlVal = other.TdPlVal;
          }
          if (other.HasTdTrdVal) {
            TdTrdVal = other.TdTrdVal;
          }
          if (other.HasTdBuyVal) {
            TdBuyVal = other.TdBuyVal;
          }
          if (other.HasTdBuyQty) {
            TdBuyQty = other.TdBuyQty;
          }
          if (other.HasTdSellVal) {
            TdSellVal = other.TdSellVal;
          }
          if (other.HasTdSellQty) {
            TdSellQty = other.TdSellQty;
          }
          if (other.HasUnrealizedPL) {
            UnrealizedPL = other.UnrealizedPL;
          }
          if (other.HasRealizedPL) {
            RealizedPL = other.RealizedPL;
          }
          if (other.HasCurrency) {
            Currency = other.Currency;
          }
          if (other.HasTrdMarket) {
            TrdMarket = other.TrdMarket;
          }
          if (other.HasDilutedCostPrice) {
            DilutedCostPrice = other.DilutedCostPrice;
          }
          if (other.HasAverageCostPrice) {
            AverageCostPrice = other.AverageCostPrice;
          }
          if (other.HasAveragePlRatio) {
            AveragePlRatio = other.AveragePlRatio;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_positionFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _positionFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasPositionID = input.ReadUInt64(ref result.positionID_);
                break;
              }
              case 16: {
                result.hasPositionSide = input.ReadInt32(ref result.positionSide_);
                break;
              }
              case 26: {
                result.hasCode = input.ReadString(ref result.code_);
                break;
              }
              case 34: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 41: {
                result.hasQty = input.ReadDouble(ref result.qty_);
                break;
              }
              case 49: {
                result.hasCanSellQty = input.ReadDouble(ref result.canSellQty_);
                break;
              }
              case 57: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 65: {
                result.hasCostPrice = input.ReadDouble(ref result.costPrice_);
                break;
              }
              case 73: {
                result.hasVal = input.ReadDouble(ref result.val_);
                break;
              }
              case 81: {
                result.hasPlVal = input.ReadDouble(ref result.plVal_);
                break;
              }
              case 89: {
                result.hasPlRatio = input.ReadDouble(ref result.plRatio_);
                break;
              }
              case 96: {
                result.hasSecMarket = input.ReadInt32(ref result.secMarket_);
                break;
              }
              case 169: {
                result.hasTdPlVal = input.ReadDouble(ref result.tdPlVal_);
                break;
              }
              case 177: {
                result.hasTdTrdVal = input.ReadDouble(ref result.tdTrdVal_);
                break;
              }
              case 185: {
                result.hasTdBuyVal = input.ReadDouble(ref result.tdBuyVal_);
                break;
              }
              case 193: {
                result.hasTdBuyQty = input.ReadDouble(ref result.tdBuyQty_);
                break;
              }
              case 201: {
                result.hasTdSellVal = input.ReadDouble(ref result.tdSellVal_);
                break;
              }
              case 209: {
                result.hasTdSellQty = input.ReadDouble(ref result.tdSellQty_);
                break;
              }
              case 225: {
                result.hasUnrealizedPL = input.ReadDouble(ref result.unrealizedPL_);
                break;
              }
              case 233: {
                result.hasRealizedPL = input.ReadDouble(ref result.realizedPL_);
                break;
              }
              case 240: {
                result.hasCurrency = input.ReadInt32(ref result.currency_);
                break;
              }
              case 248: {
                result.hasTrdMarket = input.ReadInt32(ref result.trdMarket_);
                break;
              }
              case 257: {
                result.hasDilutedCostPrice = input.ReadDouble(ref result.dilutedCostPrice_);
                break;
              }
              case 265: {
                result.hasAverageCostPrice = input.ReadDouble(ref result.averageCostPrice_);
                break;
              }
              case 273: {
                result.hasAveragePlRatio = input.ReadDouble(ref result.averagePlRatio_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasPositionID {
          get { return result.hasPositionID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong PositionID {
          get { return result.PositionID; }
          set { SetPositionID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetPositionID(ulong value) {
          PrepareBuilder();
          result.hasPositionID = true;
          result.positionID_ = value;
          return this;
        }
        public Builder ClearPositionID() {
          PrepareBuilder();
          result.hasPositionID = false;
          result.positionID_ = 0UL;
          return this;
        }
        
        public bool HasPositionSide {
          get { return result.hasPositionSide; }
        }
        public int PositionSide {
          get { return result.PositionSide; }
          set { SetPositionSide(value); }
        }
        public Builder SetPositionSide(int value) {
          PrepareBuilder();
          result.hasPositionSide = true;
          result.positionSide_ = value;
          return this;
        }
        public Builder ClearPositionSide() {
          PrepareBuilder();
          result.hasPositionSide = false;
          result.positionSide_ = 0;
          return this;
        }
        
        public bool HasCode {
          get { return result.hasCode; }
        }
        public string Code {
          get { return result.Code; }
          set { SetCode(value); }
        }
        public Builder SetCode(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCode = true;
          result.code_ = value;
          return this;
        }
        public Builder ClearCode() {
          PrepareBuilder();
          result.hasCode = false;
          result.code_ = "";
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasQty {
          get { return result.hasQty; }
        }
        public double Qty {
          get { return result.Qty; }
          set { SetQty(value); }
        }
        public Builder SetQty(double value) {
          PrepareBuilder();
          result.hasQty = true;
          result.qty_ = value;
          return this;
        }
        public Builder ClearQty() {
          PrepareBuilder();
          result.hasQty = false;
          result.qty_ = 0D;
          return this;
        }
        
        public bool HasCanSellQty {
          get { return result.hasCanSellQty; }
        }
        public double CanSellQty {
          get { return result.CanSellQty; }
          set { SetCanSellQty(value); }
        }
        public Builder SetCanSellQty(double value) {
          PrepareBuilder();
          result.hasCanSellQty = true;
          result.canSellQty_ = value;
          return this;
        }
        public Builder ClearCanSellQty() {
          PrepareBuilder();
          result.hasCanSellQty = false;
          result.canSellQty_ = 0D;
          return this;
        }
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasCostPrice {
          get { return result.hasCostPrice; }
        }
        public double CostPrice {
          get { return result.CostPrice; }
          set { SetCostPrice(value); }
        }
        public Builder SetCostPrice(double value) {
          PrepareBuilder();
          result.hasCostPrice = true;
          result.costPrice_ = value;
          return this;
        }
        public Builder ClearCostPrice() {
          PrepareBuilder();
          result.hasCostPrice = false;
          result.costPrice_ = 0D;
          return this;
        }
        
        public bool HasVal {
          get { return result.hasVal; }
        }
        public double Val {
          get { return result.Val; }
          set { SetVal(value); }
        }
        public Builder SetVal(double value) {
          PrepareBuilder();
          result.hasVal = true;
          result.val_ = value;
          return this;
        }
        public Builder ClearVal() {
          PrepareBuilder();
          result.hasVal = false;
          result.val_ = 0D;
          return this;
        }
        
        public bool HasPlVal {
          get { return result.hasPlVal; }
        }
        public double PlVal {
          get { return result.PlVal; }
          set { SetPlVal(value); }
        }
        public Builder SetPlVal(double value) {
          PrepareBuilder();
          result.hasPlVal = true;
          result.plVal_ = value;
          return this;
        }
        public Builder ClearPlVal() {
          PrepareBuilder();
          result.hasPlVal = false;
          result.plVal_ = 0D;
          return this;
        }
        
        public bool HasPlRatio {
          get { return result.hasPlRatio; }
        }
        public double PlRatio {
          get { return result.PlRatio; }
          set { SetPlRatio(value); }
        }
        public Builder SetPlRatio(double value) {
          PrepareBuilder();
          result.hasPlRatio = true;
          result.plRatio_ = value;
          return this;
        }
        public Builder ClearPlRatio() {
          PrepareBuilder();
          result.hasPlRatio = false;
          result.plRatio_ = 0D;
          return this;
        }
        
        public bool HasSecMarket {
          get { return result.hasSecMarket; }
        }
        public int SecMarket {
          get { return result.SecMarket; }
          set { SetSecMarket(value); }
        }
        public Builder SetSecMarket(int value) {
          PrepareBuilder();
          result.hasSecMarket = true;
          result.secMarket_ = value;
          return this;
        }
        public Builder ClearSecMarket() {
          PrepareBuilder();
          result.hasSecMarket = false;
          result.secMarket_ = 0;
          return this;
        }
        
        public bool HasTdPlVal {
          get { return result.hasTdPlVal; }
        }
        public double TdPlVal {
          get { return result.TdPlVal; }
          set { SetTdPlVal(value); }
        }
        public Builder SetTdPlVal(double value) {
          PrepareBuilder();
          result.hasTdPlVal = true;
          result.tdPlVal_ = value;
          return this;
        }
        public Builder ClearTdPlVal() {
          PrepareBuilder();
          result.hasTdPlVal = false;
          result.tdPlVal_ = 0D;
          return this;
        }
        
        public bool HasTdTrdVal {
          get { return result.hasTdTrdVal; }
        }
        public double TdTrdVal {
          get { return result.TdTrdVal; }
          set { SetTdTrdVal(value); }
        }
        public Builder SetTdTrdVal(double value) {
          PrepareBuilder();
          result.hasTdTrdVal = true;
          result.tdTrdVal_ = value;
          return this;
        }
        public Builder ClearTdTrdVal() {
          PrepareBuilder();
          result.hasTdTrdVal = false;
          result.tdTrdVal_ = 0D;
          return this;
        }
        
        public bool HasTdBuyVal {
          get { return result.hasTdBuyVal; }
        }
        public double TdBuyVal {
          get { return result.TdBuyVal; }
          set { SetTdBuyVal(value); }
        }
        public Builder SetTdBuyVal(double value) {
          PrepareBuilder();
          result.hasTdBuyVal = true;
          result.tdBuyVal_ = value;
          return this;
        }
        public Builder ClearTdBuyVal() {
          PrepareBuilder();
          result.hasTdBuyVal = false;
          result.tdBuyVal_ = 0D;
          return this;
        }
        
        public bool HasTdBuyQty {
          get { return result.hasTdBuyQty; }
        }
        public double TdBuyQty {
          get { return result.TdBuyQty; }
          set { SetTdBuyQty(value); }
        }
        public Builder SetTdBuyQty(double value) {
          PrepareBuilder();
          result.hasTdBuyQty = true;
          result.tdBuyQty_ = value;
          return this;
        }
        public Builder ClearTdBuyQty() {
          PrepareBuilder();
          result.hasTdBuyQty = false;
          result.tdBuyQty_ = 0D;
          return this;
        }
        
        public bool HasTdSellVal {
          get { return result.hasTdSellVal; }
        }
        public double TdSellVal {
          get { return result.TdSellVal; }
          set { SetTdSellVal(value); }
        }
        public Builder SetTdSellVal(double value) {
          PrepareBuilder();
          result.hasTdSellVal = true;
          result.tdSellVal_ = value;
          return this;
        }
        public Builder ClearTdSellVal() {
          PrepareBuilder();
          result.hasTdSellVal = false;
          result.tdSellVal_ = 0D;
          return this;
        }
        
        public bool HasTdSellQty {
          get { return result.hasTdSellQty; }
        }
        public double TdSellQty {
          get { return result.TdSellQty; }
          set { SetTdSellQty(value); }
        }
        public Builder SetTdSellQty(double value) {
          PrepareBuilder();
          result.hasTdSellQty = true;
          result.tdSellQty_ = value;
          return this;
        }
        public Builder ClearTdSellQty() {
          PrepareBuilder();
          result.hasTdSellQty = false;
          result.tdSellQty_ = 0D;
          return this;
        }
        
        public bool HasUnrealizedPL {
          get { return result.hasUnrealizedPL; }
        }
        public double UnrealizedPL {
          get { return result.UnrealizedPL; }
          set { SetUnrealizedPL(value); }
        }
        public Builder SetUnrealizedPL(double value) {
          PrepareBuilder();
          result.hasUnrealizedPL = true;
          result.unrealizedPL_ = value;
          return this;
        }
        public Builder ClearUnrealizedPL() {
          PrepareBuilder();
          result.hasUnrealizedPL = false;
          result.unrealizedPL_ = 0D;
          return this;
        }
        
        public bool HasRealizedPL {
          get { return result.hasRealizedPL; }
        }
        public double RealizedPL {
          get { return result.RealizedPL; }
          set { SetRealizedPL(value); }
        }
        public Builder SetRealizedPL(double value) {
          PrepareBuilder();
          result.hasRealizedPL = true;
          result.realizedPL_ = value;
          return this;
        }
        public Builder ClearRealizedPL() {
          PrepareBuilder();
          result.hasRealizedPL = false;
          result.realizedPL_ = 0D;
          return this;
        }
        
        public bool HasCurrency {
          get { return result.hasCurrency; }
        }
        public int Currency {
          get { return result.Currency; }
          set { SetCurrency(value); }
        }
        public Builder SetCurrency(int value) {
          PrepareBuilder();
          result.hasCurrency = true;
          result.currency_ = value;
          return this;
        }
        public Builder ClearCurrency() {
          PrepareBuilder();
          result.hasCurrency = false;
          result.currency_ = 0;
          return this;
        }
        
        public bool HasTrdMarket {
          get { return result.hasTrdMarket; }
        }
        public int TrdMarket {
          get { return result.TrdMarket; }
          set { SetTrdMarket(value); }
        }
        public Builder SetTrdMarket(int value) {
          PrepareBuilder();
          result.hasTrdMarket = true;
          result.trdMarket_ = value;
          return this;
        }
        public Builder ClearTrdMarket() {
          PrepareBuilder();
          result.hasTrdMarket = false;
          result.trdMarket_ = 0;
          return this;
        }
        
        public bool HasDilutedCostPrice {
          get { return result.hasDilutedCostPrice; }
        }
        public double DilutedCostPrice {
          get { return result.DilutedCostPrice; }
          set { SetDilutedCostPrice(value); }
        }
        public Builder SetDilutedCostPrice(double value) {
          PrepareBuilder();
          result.hasDilutedCostPrice = true;
          result.dilutedCostPrice_ = value;
          return this;
        }
        public Builder ClearDilutedCostPrice() {
          PrepareBuilder();
          result.hasDilutedCostPrice = false;
          result.dilutedCostPrice_ = 0D;
          return this;
        }
        
        public bool HasAverageCostPrice {
          get { return result.hasAverageCostPrice; }
        }
        public double AverageCostPrice {
          get { return result.AverageCostPrice; }
          set { SetAverageCostPrice(value); }
        }
        public Builder SetAverageCostPrice(double value) {
          PrepareBuilder();
          result.hasAverageCostPrice = true;
          result.averageCostPrice_ = value;
          return this;
        }
        public Builder ClearAverageCostPrice() {
          PrepareBuilder();
          result.hasAverageCostPrice = false;
          result.averageCostPrice_ = 0D;
          return this;
        }
        
        public bool HasAveragePlRatio {
          get { return result.hasAveragePlRatio; }
        }
        public double AveragePlRatio {
          get { return result.AveragePlRatio; }
          set { SetAveragePlRatio(value); }
        }
        public Builder SetAveragePlRatio(double value) {
          PrepareBuilder();
          result.hasAveragePlRatio = true;
          result.averagePlRatio_ = value;
          return this;
        }
        public Builder ClearAveragePlRatio() {
          PrepareBuilder();
          result.hasAveragePlRatio = false;
          result.averagePlRatio_ = 0D;
          return this;
        }
      }
      static Position() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Order : pb::GeneratedMessage<Order, Order.Builder> {
      private Order() { }
      private static readonly Order defaultInstance = new Order().MakeReadOnly();
      private static readonly string[] _orderFieldNames = new string[] { "auxPrice", "code", "createTime", "createTimestamp", "currency", "fillAvgPrice", "fillOutsideRTH", "fillQty", "lastErrMsg", "name", "orderID", "orderIDEx", "orderStatus", "orderType", "price", "qty", "remark", "secMarket", "session", "timeInForce", "trailSpread", "trailType", "trailValue", "trdMarket", "trdSide", "updateTime", "updateTimestamp" };
      private static readonly uint[] _orderFieldTags = new uint[] { 169, 50, 82, 129, 200, 105, 160, 97, 114, 58, 32, 42, 24, 16, 73, 65, 146, 120, 216, 152, 193, 176, 185, 208, 8, 90, 137 };
      public static Order DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Order DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Order ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Order__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Order, Order.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Order__FieldAccessorTable; }
      }
      
      public const int TrdSideFieldNumber = 1;
      private bool hasTrdSide;
      private int trdSide_;
      public bool HasTrdSide {
        get { return hasTrdSide; }
      }
      public int TrdSide {
        get { return trdSide_; }
      }
      
      public const int OrderTypeFieldNumber = 2;
      private bool hasOrderType;
      private int orderType_;
      public bool HasOrderType {
        get { return hasOrderType; }
      }
      public int OrderType {
        get { return orderType_; }
      }
      
      public const int OrderStatusFieldNumber = 3;
      private bool hasOrderStatus;
      private int orderStatus_;
      public bool HasOrderStatus {
        get { return hasOrderStatus; }
      }
      public int OrderStatus {
        get { return orderStatus_; }
      }
      
      public const int OrderIDFieldNumber = 4;
      private bool hasOrderID;
      private ulong orderID_;
      public bool HasOrderID {
        get { return hasOrderID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong OrderID {
        get { return orderID_; }
      }
      
      public const int OrderIDExFieldNumber = 5;
      private bool hasOrderIDEx;
      private string orderIDEx_ = "";
      public bool HasOrderIDEx {
        get { return hasOrderIDEx; }
      }
      public string OrderIDEx {
        get { return orderIDEx_; }
      }
      
      public const int CodeFieldNumber = 6;
      private bool hasCode;
      private string code_ = "";
      public bool HasCode {
        get { return hasCode; }
      }
      public string Code {
        get { return code_; }
      }
      
      public const int NameFieldNumber = 7;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int QtyFieldNumber = 8;
      private bool hasQty;
      private double qty_;
      public bool HasQty {
        get { return hasQty; }
      }
      public double Qty {
        get { return qty_; }
      }
      
      public const int PriceFieldNumber = 9;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int CreateTimeFieldNumber = 10;
      private bool hasCreateTime;
      private string createTime_ = "";
      public bool HasCreateTime {
        get { return hasCreateTime; }
      }
      public string CreateTime {
        get { return createTime_; }
      }
      
      public const int UpdateTimeFieldNumber = 11;
      private bool hasUpdateTime;
      private string updateTime_ = "";
      public bool HasUpdateTime {
        get { return hasUpdateTime; }
      }
      public string UpdateTime {
        get { return updateTime_; }
      }
      
      public const int FillQtyFieldNumber = 12;
      private bool hasFillQty;
      private double fillQty_;
      public bool HasFillQty {
        get { return hasFillQty; }
      }
      public double FillQty {
        get { return fillQty_; }
      }
      
      public const int FillAvgPriceFieldNumber = 13;
      private bool hasFillAvgPrice;
      private double fillAvgPrice_;
      public bool HasFillAvgPrice {
        get { return hasFillAvgPrice; }
      }
      public double FillAvgPrice {
        get { return fillAvgPrice_; }
      }
      
      public const int LastErrMsgFieldNumber = 14;
      private bool hasLastErrMsg;
      private string lastErrMsg_ = "";
      public bool HasLastErrMsg {
        get { return hasLastErrMsg; }
      }
      public string LastErrMsg {
        get { return lastErrMsg_; }
      }
      
      public const int SecMarketFieldNumber = 15;
      private bool hasSecMarket;
      private int secMarket_;
      public bool HasSecMarket {
        get { return hasSecMarket; }
      }
      public int SecMarket {
        get { return secMarket_; }
      }
      
      public const int CreateTimestampFieldNumber = 16;
      private bool hasCreateTimestamp;
      private double createTimestamp_;
      public bool HasCreateTimestamp {
        get { return hasCreateTimestamp; }
      }
      public double CreateTimestamp {
        get { return createTimestamp_; }
      }
      
      public const int UpdateTimestampFieldNumber = 17;
      private bool hasUpdateTimestamp;
      private double updateTimestamp_;
      public bool HasUpdateTimestamp {
        get { return hasUpdateTimestamp; }
      }
      public double UpdateTimestamp {
        get { return updateTimestamp_; }
      }
      
      public const int RemarkFieldNumber = 18;
      private bool hasRemark;
      private string remark_ = "";
      public bool HasRemark {
        get { return hasRemark; }
      }
      public string Remark {
        get { return remark_; }
      }
      
      public const int TimeInForceFieldNumber = 19;
      private bool hasTimeInForce;
      private int timeInForce_;
      public bool HasTimeInForce {
        get { return hasTimeInForce; }
      }
      public int TimeInForce {
        get { return timeInForce_; }
      }
      
      public const int FillOutsideRTHFieldNumber = 20;
      private bool hasFillOutsideRTH;
      private bool fillOutsideRTH_;
      public bool HasFillOutsideRTH {
        get { return hasFillOutsideRTH; }
      }
      public bool FillOutsideRTH {
        get { return fillOutsideRTH_; }
      }
      
      public const int AuxPriceFieldNumber = 21;
      private bool hasAuxPrice;
      private double auxPrice_;
      public bool HasAuxPrice {
        get { return hasAuxPrice; }
      }
      public double AuxPrice {
        get { return auxPrice_; }
      }
      
      public const int TrailTypeFieldNumber = 22;
      private bool hasTrailType;
      private int trailType_;
      public bool HasTrailType {
        get { return hasTrailType; }
      }
      public int TrailType {
        get { return trailType_; }
      }
      
      public const int TrailValueFieldNumber = 23;
      private bool hasTrailValue;
      private double trailValue_;
      public bool HasTrailValue {
        get { return hasTrailValue; }
      }
      public double TrailValue {
        get { return trailValue_; }
      }
      
      public const int TrailSpreadFieldNumber = 24;
      private bool hasTrailSpread;
      private double trailSpread_;
      public bool HasTrailSpread {
        get { return hasTrailSpread; }
      }
      public double TrailSpread {
        get { return trailSpread_; }
      }
      
      public const int CurrencyFieldNumber = 25;
      private bool hasCurrency;
      private int currency_;
      public bool HasCurrency {
        get { return hasCurrency; }
      }
      public int Currency {
        get { return currency_; }
      }
      
      public const int TrdMarketFieldNumber = 26;
      private bool hasTrdMarket;
      private int trdMarket_;
      public bool HasTrdMarket {
        get { return hasTrdMarket; }
      }
      public int TrdMarket {
        get { return trdMarket_; }
      }
      
      public const int SessionFieldNumber = 27;
      private bool hasSession;
      private int session_;
      public bool HasSession {
        get { return hasSession; }
      }
      public int Session {
        get { return session_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTrdSide) return false;
          if (!hasOrderType) return false;
          if (!hasOrderStatus) return false;
          if (!hasOrderID) return false;
          if (!hasOrderIDEx) return false;
          if (!hasCode) return false;
          if (!hasName) return false;
          if (!hasQty) return false;
          if (!hasCreateTime) return false;
          if (!hasUpdateTime) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _orderFieldNames;
        if (hasTrdSide) {
          output.WriteInt32(1, field_names[24], TrdSide);
        }
        if (hasOrderType) {
          output.WriteInt32(2, field_names[13], OrderType);
        }
        if (hasOrderStatus) {
          output.WriteInt32(3, field_names[12], OrderStatus);
        }
        if (hasOrderID) {
          output.WriteUInt64(4, field_names[10], OrderID);
        }
        if (hasOrderIDEx) {
          output.WriteString(5, field_names[11], OrderIDEx);
        }
        if (hasCode) {
          output.WriteString(6, field_names[1], Code);
        }
        if (hasName) {
          output.WriteString(7, field_names[9], Name);
        }
        if (hasQty) {
          output.WriteDouble(8, field_names[15], Qty);
        }
        if (hasPrice) {
          output.WriteDouble(9, field_names[14], Price);
        }
        if (hasCreateTime) {
          output.WriteString(10, field_names[2], CreateTime);
        }
        if (hasUpdateTime) {
          output.WriteString(11, field_names[25], UpdateTime);
        }
        if (hasFillQty) {
          output.WriteDouble(12, field_names[7], FillQty);
        }
        if (hasFillAvgPrice) {
          output.WriteDouble(13, field_names[5], FillAvgPrice);
        }
        if (hasLastErrMsg) {
          output.WriteString(14, field_names[8], LastErrMsg);
        }
        if (hasSecMarket) {
          output.WriteInt32(15, field_names[17], SecMarket);
        }
        if (hasCreateTimestamp) {
          output.WriteDouble(16, field_names[3], CreateTimestamp);
        }
        if (hasUpdateTimestamp) {
          output.WriteDouble(17, field_names[26], UpdateTimestamp);
        }
        if (hasRemark) {
          output.WriteString(18, field_names[16], Remark);
        }
        if (hasTimeInForce) {
          output.WriteInt32(19, field_names[19], TimeInForce);
        }
        if (hasFillOutsideRTH) {
          output.WriteBool(20, field_names[6], FillOutsideRTH);
        }
        if (hasAuxPrice) {
          output.WriteDouble(21, field_names[0], AuxPrice);
        }
        if (hasTrailType) {
          output.WriteInt32(22, field_names[21], TrailType);
        }
        if (hasTrailValue) {
          output.WriteDouble(23, field_names[22], TrailValue);
        }
        if (hasTrailSpread) {
          output.WriteDouble(24, field_names[20], TrailSpread);
        }
        if (hasCurrency) {
          output.WriteInt32(25, field_names[4], Currency);
        }
        if (hasTrdMarket) {
          output.WriteInt32(26, field_names[23], TrdMarket);
        }
        if (hasSession) {
          output.WriteInt32(27, field_names[18], Session);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrdSide) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TrdSide);
        }
        if (hasOrderType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, OrderType);
        }
        if (hasOrderStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, OrderStatus);
        }
        if (hasOrderID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, OrderID);
        }
        if (hasOrderIDEx) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderIDEx);
        }
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Code);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Name);
        }
        if (hasQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, Qty);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Price);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(10, CreateTime);
        }
        if (hasUpdateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(11, UpdateTime);
        }
        if (hasFillQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, FillQty);
        }
        if (hasFillAvgPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, FillAvgPrice);
        }
        if (hasLastErrMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(14, LastErrMsg);
        }
        if (hasSecMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, SecMarket);
        }
        if (hasCreateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, CreateTimestamp);
        }
        if (hasUpdateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, UpdateTimestamp);
        }
        if (hasRemark) {
          size += pb::CodedOutputStream.ComputeStringSize(18, Remark);
        }
        if (hasTimeInForce) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, TimeInForce);
        }
        if (hasFillOutsideRTH) {
          size += pb::CodedOutputStream.ComputeBoolSize(20, FillOutsideRTH);
        }
        if (hasAuxPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, AuxPrice);
        }
        if (hasTrailType) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, TrailType);
        }
        if (hasTrailValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, TrailValue);
        }
        if (hasTrailSpread) {
          size += pb::CodedOutputStream.ComputeDoubleSize(24, TrailSpread);
        }
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeInt32Size(25, Currency);
        }
        if (hasTrdMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(26, TrdMarket);
        }
        if (hasSession) {
          size += pb::CodedOutputStream.ComputeInt32Size(27, Session);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Order ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Order ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Order ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Order ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Order ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Order ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Order ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Order ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Order ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Order ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Order MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Order prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Order, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Order cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Order result;
        
        private Order PrepareBuilder() {
          if (resultIsReadOnly) {
            Order original = result;
            result = new Order();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Order MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Order.Descriptor; }
        }
        
        public override Order DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Order.DefaultInstance; }
        }
        
        public override Order BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Order) {
            return MergeFrom((Order) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Order other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.Order.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTrdSide) {
            TrdSide = other.TrdSide;
          }
          if (other.HasOrderType) {
            OrderType = other.OrderType;
          }
          if (other.HasOrderStatus) {
            OrderStatus = other.OrderStatus;
          }
          if (other.HasOrderID) {
            OrderID = other.OrderID;
          }
          if (other.HasOrderIDEx) {
            OrderIDEx = other.OrderIDEx;
          }
          if (other.HasCode) {
            Code = other.Code;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasQty) {
            Qty = other.Qty;
          }
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasCreateTime) {
            CreateTime = other.CreateTime;
          }
          if (other.HasUpdateTime) {
            UpdateTime = other.UpdateTime;
          }
          if (other.HasFillQty) {
            FillQty = other.FillQty;
          }
          if (other.HasFillAvgPrice) {
            FillAvgPrice = other.FillAvgPrice;
          }
          if (other.HasLastErrMsg) {
            LastErrMsg = other.LastErrMsg;
          }
          if (other.HasSecMarket) {
            SecMarket = other.SecMarket;
          }
          if (other.HasCreateTimestamp) {
            CreateTimestamp = other.CreateTimestamp;
          }
          if (other.HasUpdateTimestamp) {
            UpdateTimestamp = other.UpdateTimestamp;
          }
          if (other.HasRemark) {
            Remark = other.Remark;
          }
          if (other.HasTimeInForce) {
            TimeInForce = other.TimeInForce;
          }
          if (other.HasFillOutsideRTH) {
            FillOutsideRTH = other.FillOutsideRTH;
          }
          if (other.HasAuxPrice) {
            AuxPrice = other.AuxPrice;
          }
          if (other.HasTrailType) {
            TrailType = other.TrailType;
          }
          if (other.HasTrailValue) {
            TrailValue = other.TrailValue;
          }
          if (other.HasTrailSpread) {
            TrailSpread = other.TrailSpread;
          }
          if (other.HasCurrency) {
            Currency = other.Currency;
          }
          if (other.HasTrdMarket) {
            TrdMarket = other.TrdMarket;
          }
          if (other.HasSession) {
            Session = other.Session;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_orderFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _orderFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasTrdSide = input.ReadInt32(ref result.trdSide_);
                break;
              }
              case 16: {
                result.hasOrderType = input.ReadInt32(ref result.orderType_);
                break;
              }
              case 24: {
                result.hasOrderStatus = input.ReadInt32(ref result.orderStatus_);
                break;
              }
              case 32: {
                result.hasOrderID = input.ReadUInt64(ref result.orderID_);
                break;
              }
              case 42: {
                result.hasOrderIDEx = input.ReadString(ref result.orderIDEx_);
                break;
              }
              case 50: {
                result.hasCode = input.ReadString(ref result.code_);
                break;
              }
              case 58: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 65: {
                result.hasQty = input.ReadDouble(ref result.qty_);
                break;
              }
              case 73: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 82: {
                result.hasCreateTime = input.ReadString(ref result.createTime_);
                break;
              }
              case 90: {
                result.hasUpdateTime = input.ReadString(ref result.updateTime_);
                break;
              }
              case 97: {
                result.hasFillQty = input.ReadDouble(ref result.fillQty_);
                break;
              }
              case 105: {
                result.hasFillAvgPrice = input.ReadDouble(ref result.fillAvgPrice_);
                break;
              }
              case 114: {
                result.hasLastErrMsg = input.ReadString(ref result.lastErrMsg_);
                break;
              }
              case 120: {
                result.hasSecMarket = input.ReadInt32(ref result.secMarket_);
                break;
              }
              case 129: {
                result.hasCreateTimestamp = input.ReadDouble(ref result.createTimestamp_);
                break;
              }
              case 137: {
                result.hasUpdateTimestamp = input.ReadDouble(ref result.updateTimestamp_);
                break;
              }
              case 146: {
                result.hasRemark = input.ReadString(ref result.remark_);
                break;
              }
              case 152: {
                result.hasTimeInForce = input.ReadInt32(ref result.timeInForce_);
                break;
              }
              case 160: {
                result.hasFillOutsideRTH = input.ReadBool(ref result.fillOutsideRTH_);
                break;
              }
              case 169: {
                result.hasAuxPrice = input.ReadDouble(ref result.auxPrice_);
                break;
              }
              case 176: {
                result.hasTrailType = input.ReadInt32(ref result.trailType_);
                break;
              }
              case 185: {
                result.hasTrailValue = input.ReadDouble(ref result.trailValue_);
                break;
              }
              case 193: {
                result.hasTrailSpread = input.ReadDouble(ref result.trailSpread_);
                break;
              }
              case 200: {
                result.hasCurrency = input.ReadInt32(ref result.currency_);
                break;
              }
              case 208: {
                result.hasTrdMarket = input.ReadInt32(ref result.trdMarket_);
                break;
              }
              case 216: {
                result.hasSession = input.ReadInt32(ref result.session_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTrdSide {
          get { return result.hasTrdSide; }
        }
        public int TrdSide {
          get { return result.TrdSide; }
          set { SetTrdSide(value); }
        }
        public Builder SetTrdSide(int value) {
          PrepareBuilder();
          result.hasTrdSide = true;
          result.trdSide_ = value;
          return this;
        }
        public Builder ClearTrdSide() {
          PrepareBuilder();
          result.hasTrdSide = false;
          result.trdSide_ = 0;
          return this;
        }
        
        public bool HasOrderType {
          get { return result.hasOrderType; }
        }
        public int OrderType {
          get { return result.OrderType; }
          set { SetOrderType(value); }
        }
        public Builder SetOrderType(int value) {
          PrepareBuilder();
          result.hasOrderType = true;
          result.orderType_ = value;
          return this;
        }
        public Builder ClearOrderType() {
          PrepareBuilder();
          result.hasOrderType = false;
          result.orderType_ = 0;
          return this;
        }
        
        public bool HasOrderStatus {
          get { return result.hasOrderStatus; }
        }
        public int OrderStatus {
          get { return result.OrderStatus; }
          set { SetOrderStatus(value); }
        }
        public Builder SetOrderStatus(int value) {
          PrepareBuilder();
          result.hasOrderStatus = true;
          result.orderStatus_ = value;
          return this;
        }
        public Builder ClearOrderStatus() {
          PrepareBuilder();
          result.hasOrderStatus = false;
          result.orderStatus_ = 0;
          return this;
        }
        
        public bool HasOrderID {
          get { return result.hasOrderID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong OrderID {
          get { return result.OrderID; }
          set { SetOrderID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetOrderID(ulong value) {
          PrepareBuilder();
          result.hasOrderID = true;
          result.orderID_ = value;
          return this;
        }
        public Builder ClearOrderID() {
          PrepareBuilder();
          result.hasOrderID = false;
          result.orderID_ = 0UL;
          return this;
        }
        
        public bool HasOrderIDEx {
          get { return result.hasOrderIDEx; }
        }
        public string OrderIDEx {
          get { return result.OrderIDEx; }
          set { SetOrderIDEx(value); }
        }
        public Builder SetOrderIDEx(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOrderIDEx = true;
          result.orderIDEx_ = value;
          return this;
        }
        public Builder ClearOrderIDEx() {
          PrepareBuilder();
          result.hasOrderIDEx = false;
          result.orderIDEx_ = "";
          return this;
        }
        
        public bool HasCode {
          get { return result.hasCode; }
        }
        public string Code {
          get { return result.Code; }
          set { SetCode(value); }
        }
        public Builder SetCode(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCode = true;
          result.code_ = value;
          return this;
        }
        public Builder ClearCode() {
          PrepareBuilder();
          result.hasCode = false;
          result.code_ = "";
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasQty {
          get { return result.hasQty; }
        }
        public double Qty {
          get { return result.Qty; }
          set { SetQty(value); }
        }
        public Builder SetQty(double value) {
          PrepareBuilder();
          result.hasQty = true;
          result.qty_ = value;
          return this;
        }
        public Builder ClearQty() {
          PrepareBuilder();
          result.hasQty = false;
          result.qty_ = 0D;
          return this;
        }
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasCreateTime {
          get { return result.hasCreateTime; }
        }
        public string CreateTime {
          get { return result.CreateTime; }
          set { SetCreateTime(value); }
        }
        public Builder SetCreateTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCreateTime = true;
          result.createTime_ = value;
          return this;
        }
        public Builder ClearCreateTime() {
          PrepareBuilder();
          result.hasCreateTime = false;
          result.createTime_ = "";
          return this;
        }
        
        public bool HasUpdateTime {
          get { return result.hasUpdateTime; }
        }
        public string UpdateTime {
          get { return result.UpdateTime; }
          set { SetUpdateTime(value); }
        }
        public Builder SetUpdateTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasUpdateTime = true;
          result.updateTime_ = value;
          return this;
        }
        public Builder ClearUpdateTime() {
          PrepareBuilder();
          result.hasUpdateTime = false;
          result.updateTime_ = "";
          return this;
        }
        
        public bool HasFillQty {
          get { return result.hasFillQty; }
        }
        public double FillQty {
          get { return result.FillQty; }
          set { SetFillQty(value); }
        }
        public Builder SetFillQty(double value) {
          PrepareBuilder();
          result.hasFillQty = true;
          result.fillQty_ = value;
          return this;
        }
        public Builder ClearFillQty() {
          PrepareBuilder();
          result.hasFillQty = false;
          result.fillQty_ = 0D;
          return this;
        }
        
        public bool HasFillAvgPrice {
          get { return result.hasFillAvgPrice; }
        }
        public double FillAvgPrice {
          get { return result.FillAvgPrice; }
          set { SetFillAvgPrice(value); }
        }
        public Builder SetFillAvgPrice(double value) {
          PrepareBuilder();
          result.hasFillAvgPrice = true;
          result.fillAvgPrice_ = value;
          return this;
        }
        public Builder ClearFillAvgPrice() {
          PrepareBuilder();
          result.hasFillAvgPrice = false;
          result.fillAvgPrice_ = 0D;
          return this;
        }
        
        public bool HasLastErrMsg {
          get { return result.hasLastErrMsg; }
        }
        public string LastErrMsg {
          get { return result.LastErrMsg; }
          set { SetLastErrMsg(value); }
        }
        public Builder SetLastErrMsg(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasLastErrMsg = true;
          result.lastErrMsg_ = value;
          return this;
        }
        public Builder ClearLastErrMsg() {
          PrepareBuilder();
          result.hasLastErrMsg = false;
          result.lastErrMsg_ = "";
          return this;
        }
        
        public bool HasSecMarket {
          get { return result.hasSecMarket; }
        }
        public int SecMarket {
          get { return result.SecMarket; }
          set { SetSecMarket(value); }
        }
        public Builder SetSecMarket(int value) {
          PrepareBuilder();
          result.hasSecMarket = true;
          result.secMarket_ = value;
          return this;
        }
        public Builder ClearSecMarket() {
          PrepareBuilder();
          result.hasSecMarket = false;
          result.secMarket_ = 0;
          return this;
        }
        
        public bool HasCreateTimestamp {
          get { return result.hasCreateTimestamp; }
        }
        public double CreateTimestamp {
          get { return result.CreateTimestamp; }
          set { SetCreateTimestamp(value); }
        }
        public Builder SetCreateTimestamp(double value) {
          PrepareBuilder();
          result.hasCreateTimestamp = true;
          result.createTimestamp_ = value;
          return this;
        }
        public Builder ClearCreateTimestamp() {
          PrepareBuilder();
          result.hasCreateTimestamp = false;
          result.createTimestamp_ = 0D;
          return this;
        }
        
        public bool HasUpdateTimestamp {
          get { return result.hasUpdateTimestamp; }
        }
        public double UpdateTimestamp {
          get { return result.UpdateTimestamp; }
          set { SetUpdateTimestamp(value); }
        }
        public Builder SetUpdateTimestamp(double value) {
          PrepareBuilder();
          result.hasUpdateTimestamp = true;
          result.updateTimestamp_ = value;
          return this;
        }
        public Builder ClearUpdateTimestamp() {
          PrepareBuilder();
          result.hasUpdateTimestamp = false;
          result.updateTimestamp_ = 0D;
          return this;
        }
        
        public bool HasRemark {
          get { return result.hasRemark; }
        }
        public string Remark {
          get { return result.Remark; }
          set { SetRemark(value); }
        }
        public Builder SetRemark(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRemark = true;
          result.remark_ = value;
          return this;
        }
        public Builder ClearRemark() {
          PrepareBuilder();
          result.hasRemark = false;
          result.remark_ = "";
          return this;
        }
        
        public bool HasTimeInForce {
          get { return result.hasTimeInForce; }
        }
        public int TimeInForce {
          get { return result.TimeInForce; }
          set { SetTimeInForce(value); }
        }
        public Builder SetTimeInForce(int value) {
          PrepareBuilder();
          result.hasTimeInForce = true;
          result.timeInForce_ = value;
          return this;
        }
        public Builder ClearTimeInForce() {
          PrepareBuilder();
          result.hasTimeInForce = false;
          result.timeInForce_ = 0;
          return this;
        }
        
        public bool HasFillOutsideRTH {
          get { return result.hasFillOutsideRTH; }
        }
        public bool FillOutsideRTH {
          get { return result.FillOutsideRTH; }
          set { SetFillOutsideRTH(value); }
        }
        public Builder SetFillOutsideRTH(bool value) {
          PrepareBuilder();
          result.hasFillOutsideRTH = true;
          result.fillOutsideRTH_ = value;
          return this;
        }
        public Builder ClearFillOutsideRTH() {
          PrepareBuilder();
          result.hasFillOutsideRTH = false;
          result.fillOutsideRTH_ = false;
          return this;
        }
        
        public bool HasAuxPrice {
          get { return result.hasAuxPrice; }
        }
        public double AuxPrice {
          get { return result.AuxPrice; }
          set { SetAuxPrice(value); }
        }
        public Builder SetAuxPrice(double value) {
          PrepareBuilder();
          result.hasAuxPrice = true;
          result.auxPrice_ = value;
          return this;
        }
        public Builder ClearAuxPrice() {
          PrepareBuilder();
          result.hasAuxPrice = false;
          result.auxPrice_ = 0D;
          return this;
        }
        
        public bool HasTrailType {
          get { return result.hasTrailType; }
        }
        public int TrailType {
          get { return result.TrailType; }
          set { SetTrailType(value); }
        }
        public Builder SetTrailType(int value) {
          PrepareBuilder();
          result.hasTrailType = true;
          result.trailType_ = value;
          return this;
        }
        public Builder ClearTrailType() {
          PrepareBuilder();
          result.hasTrailType = false;
          result.trailType_ = 0;
          return this;
        }
        
        public bool HasTrailValue {
          get { return result.hasTrailValue; }
        }
        public double TrailValue {
          get { return result.TrailValue; }
          set { SetTrailValue(value); }
        }
        public Builder SetTrailValue(double value) {
          PrepareBuilder();
          result.hasTrailValue = true;
          result.trailValue_ = value;
          return this;
        }
        public Builder ClearTrailValue() {
          PrepareBuilder();
          result.hasTrailValue = false;
          result.trailValue_ = 0D;
          return this;
        }
        
        public bool HasTrailSpread {
          get { return result.hasTrailSpread; }
        }
        public double TrailSpread {
          get { return result.TrailSpread; }
          set { SetTrailSpread(value); }
        }
        public Builder SetTrailSpread(double value) {
          PrepareBuilder();
          result.hasTrailSpread = true;
          result.trailSpread_ = value;
          return this;
        }
        public Builder ClearTrailSpread() {
          PrepareBuilder();
          result.hasTrailSpread = false;
          result.trailSpread_ = 0D;
          return this;
        }
        
        public bool HasCurrency {
          get { return result.hasCurrency; }
        }
        public int Currency {
          get { return result.Currency; }
          set { SetCurrency(value); }
        }
        public Builder SetCurrency(int value) {
          PrepareBuilder();
          result.hasCurrency = true;
          result.currency_ = value;
          return this;
        }
        public Builder ClearCurrency() {
          PrepareBuilder();
          result.hasCurrency = false;
          result.currency_ = 0;
          return this;
        }
        
        public bool HasTrdMarket {
          get { return result.hasTrdMarket; }
        }
        public int TrdMarket {
          get { return result.TrdMarket; }
          set { SetTrdMarket(value); }
        }
        public Builder SetTrdMarket(int value) {
          PrepareBuilder();
          result.hasTrdMarket = true;
          result.trdMarket_ = value;
          return this;
        }
        public Builder ClearTrdMarket() {
          PrepareBuilder();
          result.hasTrdMarket = false;
          result.trdMarket_ = 0;
          return this;
        }
        
        public bool HasSession {
          get { return result.hasSession; }
        }
        public int Session {
          get { return result.Session; }
          set { SetSession(value); }
        }
        public Builder SetSession(int value) {
          PrepareBuilder();
          result.hasSession = true;
          result.session_ = value;
          return this;
        }
        public Builder ClearSession() {
          PrepareBuilder();
          result.hasSession = false;
          result.session_ = 0;
          return this;
        }
      }
      static Order() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OrderFeeItem : pb::GeneratedMessage<OrderFeeItem, OrderFeeItem.Builder> {
      private OrderFeeItem() { }
      private static readonly OrderFeeItem defaultInstance = new OrderFeeItem().MakeReadOnly();
      private static readonly string[] _orderFeeItemFieldNames = new string[] { "title", "value" };
      private static readonly uint[] _orderFeeItemFieldTags = new uint[] { 10, 17 };
      public static OrderFeeItem DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override OrderFeeItem DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override OrderFeeItem ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_OrderFeeItem__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<OrderFeeItem, OrderFeeItem.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_OrderFeeItem__FieldAccessorTable; }
      }
      
      public const int TitleFieldNumber = 1;
      private bool hasTitle;
      private string title_ = "";
      public bool HasTitle {
        get { return hasTitle; }
      }
      public string Title {
        get { return title_; }
      }
      
      public const int ValueFieldNumber = 2;
      private bool hasValue;
      private double value_;
      public bool HasValue {
        get { return hasValue; }
      }
      public double Value {
        get { return value_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _orderFeeItemFieldNames;
        if (hasTitle) {
          output.WriteString(1, field_names[0], Title);
        }
        if (hasValue) {
          output.WriteDouble(2, field_names[1], Value);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Title);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static OrderFeeItem ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderFeeItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderFeeItem ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderFeeItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderFeeItem ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderFeeItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static OrderFeeItem ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static OrderFeeItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static OrderFeeItem ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderFeeItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private OrderFeeItem MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(OrderFeeItem prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<OrderFeeItem, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(OrderFeeItem cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private OrderFeeItem result;
        
        private OrderFeeItem PrepareBuilder() {
          if (resultIsReadOnly) {
            OrderFeeItem original = result;
            result = new OrderFeeItem();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override OrderFeeItem MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem.Descriptor; }
        }
        
        public override OrderFeeItem DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem.DefaultInstance; }
        }
        
        public override OrderFeeItem BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is OrderFeeItem) {
            return MergeFrom((OrderFeeItem) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(OrderFeeItem other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTitle) {
            Title = other.Title;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_orderFeeItemFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _orderFeeItemFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasTitle = input.ReadString(ref result.title_);
                break;
              }
              case 17: {
                result.hasValue = input.ReadDouble(ref result.value_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTitle {
          get { return result.hasTitle; }
        }
        public string Title {
          get { return result.Title; }
          set { SetTitle(value); }
        }
        public Builder SetTitle(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasTitle = true;
          result.title_ = value;
          return this;
        }
        public Builder ClearTitle() {
          PrepareBuilder();
          result.hasTitle = false;
          result.title_ = "";
          return this;
        }
        
        public bool HasValue {
          get { return result.hasValue; }
        }
        public double Value {
          get { return result.Value; }
          set { SetValue(value); }
        }
        public Builder SetValue(double value) {
          PrepareBuilder();
          result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder ClearValue() {
          PrepareBuilder();
          result.hasValue = false;
          result.value_ = 0D;
          return this;
        }
      }
      static OrderFeeItem() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OrderFee : pb::GeneratedMessage<OrderFee, OrderFee.Builder> {
      private OrderFee() { }
      private static readonly OrderFee defaultInstance = new OrderFee().MakeReadOnly();
      private static readonly string[] _orderFeeFieldNames = new string[] { "feeAmount", "feeList", "orderIDEx" };
      private static readonly uint[] _orderFeeFieldTags = new uint[] { 17, 26, 10 };
      public static OrderFee DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override OrderFee DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override OrderFee ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_OrderFee__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<OrderFee, OrderFee.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_OrderFee__FieldAccessorTable; }
      }
      
      public const int OrderIDExFieldNumber = 1;
      private bool hasOrderIDEx;
      private string orderIDEx_ = "";
      public bool HasOrderIDEx {
        get { return hasOrderIDEx; }
      }
      public string OrderIDEx {
        get { return orderIDEx_; }
      }
      
      public const int FeeAmountFieldNumber = 2;
      private bool hasFeeAmount;
      private double feeAmount_;
      public bool HasFeeAmount {
        get { return hasFeeAmount; }
      }
      public double FeeAmount {
        get { return feeAmount_; }
      }
      
      public const int FeeListFieldNumber = 3;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem> feeList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem>();
      public scg::IList<global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem> FeeListList {
        get { return feeList_; }
      }
      public int FeeListCount {
        get { return feeList_.Count; }
      }
      public global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem GetFeeList(int index) {
        return feeList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasOrderIDEx) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _orderFeeFieldNames;
        if (hasOrderIDEx) {
          output.WriteString(1, field_names[2], OrderIDEx);
        }
        if (hasFeeAmount) {
          output.WriteDouble(2, field_names[0], FeeAmount);
        }
        if (feeList_.Count > 0) {
          output.WriteMessageArray(3, field_names[1], feeList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOrderIDEx) {
          size += pb::CodedOutputStream.ComputeStringSize(1, OrderIDEx);
        }
        if (hasFeeAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, FeeAmount);
        }
        foreach (global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem element in FeeListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static OrderFee ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderFee ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderFee ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderFee ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderFee ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderFee ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static OrderFee ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static OrderFee ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static OrderFee ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderFee ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private OrderFee MakeReadOnly() {
        feeList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(OrderFee prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<OrderFee, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(OrderFee cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private OrderFee result;
        
        private OrderFee PrepareBuilder() {
          if (resultIsReadOnly) {
            OrderFee original = result;
            result = new OrderFee();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override OrderFee MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.OrderFee.Descriptor; }
        }
        
        public override OrderFee DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.OrderFee.DefaultInstance; }
        }
        
        public override OrderFee BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is OrderFee) {
            return MergeFrom((OrderFee) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(OrderFee other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.OrderFee.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasOrderIDEx) {
            OrderIDEx = other.OrderIDEx;
          }
          if (other.HasFeeAmount) {
            FeeAmount = other.FeeAmount;
          }
          if (other.feeList_.Count != 0) {
            result.feeList_.Add(other.feeList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_orderFeeFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _orderFeeFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasOrderIDEx = input.ReadString(ref result.orderIDEx_);
                break;
              }
              case 17: {
                result.hasFeeAmount = input.ReadDouble(ref result.feeAmount_);
                break;
              }
              case 26: {
                input.ReadMessageArray(tag, field_name, result.feeList_, global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasOrderIDEx {
          get { return result.hasOrderIDEx; }
        }
        public string OrderIDEx {
          get { return result.OrderIDEx; }
          set { SetOrderIDEx(value); }
        }
        public Builder SetOrderIDEx(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOrderIDEx = true;
          result.orderIDEx_ = value;
          return this;
        }
        public Builder ClearOrderIDEx() {
          PrepareBuilder();
          result.hasOrderIDEx = false;
          result.orderIDEx_ = "";
          return this;
        }
        
        public bool HasFeeAmount {
          get { return result.hasFeeAmount; }
        }
        public double FeeAmount {
          get { return result.FeeAmount; }
          set { SetFeeAmount(value); }
        }
        public Builder SetFeeAmount(double value) {
          PrepareBuilder();
          result.hasFeeAmount = true;
          result.feeAmount_ = value;
          return this;
        }
        public Builder ClearFeeAmount() {
          PrepareBuilder();
          result.hasFeeAmount = false;
          result.feeAmount_ = 0D;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem> FeeListList {
          get { return PrepareBuilder().feeList_; }
        }
        public int FeeListCount {
          get { return result.FeeListCount; }
        }
        public global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem GetFeeList(int index) {
          return result.GetFeeList(index);
        }
        public Builder SetFeeList(int index, global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.feeList_[index] = value;
          return this;
        }
        public Builder SetFeeList(int index, global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.feeList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddFeeList(global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.feeList_.Add(value);
          return this;
        }
        public Builder AddFeeList(global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.feeList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeFeeList(scg::IEnumerable<global::Futu.OpenApi.Pb.TrdCommon.OrderFeeItem> values) {
          PrepareBuilder();
          result.feeList_.Add(values);
          return this;
        }
        public Builder ClearFeeList() {
          PrepareBuilder();
          result.feeList_.Clear();
          return this;
        }
      }
      static OrderFee() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OrderFill : pb::GeneratedMessage<OrderFill, OrderFill.Builder> {
      private OrderFill() { }
      private static readonly OrderFill defaultInstance = new OrderFill().MakeReadOnly();
      private static readonly string[] _orderFillFieldNames = new string[] { "code", "counterBrokerID", "counterBrokerName", "createTime", "createTimestamp", "fillID", "fillIDEx", "name", "orderID", "orderIDEx", "price", "qty", "secMarket", "status", "trdMarket", "trdSide", "updateTimestamp" };
      private static readonly uint[] _orderFillFieldTags = new uint[] { 50, 88, 98, 82, 113, 16, 26, 58, 32, 42, 73, 65, 104, 128, 136, 8, 121 };
      public static OrderFill DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override OrderFill DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override OrderFill ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_OrderFill__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<OrderFill, OrderFill.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_OrderFill__FieldAccessorTable; }
      }
      
      public const int TrdSideFieldNumber = 1;
      private bool hasTrdSide;
      private int trdSide_;
      public bool HasTrdSide {
        get { return hasTrdSide; }
      }
      public int TrdSide {
        get { return trdSide_; }
      }
      
      public const int FillIDFieldNumber = 2;
      private bool hasFillID;
      private ulong fillID_;
      public bool HasFillID {
        get { return hasFillID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong FillID {
        get { return fillID_; }
      }
      
      public const int FillIDExFieldNumber = 3;
      private bool hasFillIDEx;
      private string fillIDEx_ = "";
      public bool HasFillIDEx {
        get { return hasFillIDEx; }
      }
      public string FillIDEx {
        get { return fillIDEx_; }
      }
      
      public const int OrderIDFieldNumber = 4;
      private bool hasOrderID;
      private ulong orderID_;
      public bool HasOrderID {
        get { return hasOrderID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong OrderID {
        get { return orderID_; }
      }
      
      public const int OrderIDExFieldNumber = 5;
      private bool hasOrderIDEx;
      private string orderIDEx_ = "";
      public bool HasOrderIDEx {
        get { return hasOrderIDEx; }
      }
      public string OrderIDEx {
        get { return orderIDEx_; }
      }
      
      public const int CodeFieldNumber = 6;
      private bool hasCode;
      private string code_ = "";
      public bool HasCode {
        get { return hasCode; }
      }
      public string Code {
        get { return code_; }
      }
      
      public const int NameFieldNumber = 7;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int QtyFieldNumber = 8;
      private bool hasQty;
      private double qty_;
      public bool HasQty {
        get { return hasQty; }
      }
      public double Qty {
        get { return qty_; }
      }
      
      public const int PriceFieldNumber = 9;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int CreateTimeFieldNumber = 10;
      private bool hasCreateTime;
      private string createTime_ = "";
      public bool HasCreateTime {
        get { return hasCreateTime; }
      }
      public string CreateTime {
        get { return createTime_; }
      }
      
      public const int CounterBrokerIDFieldNumber = 11;
      private bool hasCounterBrokerID;
      private int counterBrokerID_;
      public bool HasCounterBrokerID {
        get { return hasCounterBrokerID; }
      }
      public int CounterBrokerID {
        get { return counterBrokerID_; }
      }
      
      public const int CounterBrokerNameFieldNumber = 12;
      private bool hasCounterBrokerName;
      private string counterBrokerName_ = "";
      public bool HasCounterBrokerName {
        get { return hasCounterBrokerName; }
      }
      public string CounterBrokerName {
        get { return counterBrokerName_; }
      }
      
      public const int SecMarketFieldNumber = 13;
      private bool hasSecMarket;
      private int secMarket_;
      public bool HasSecMarket {
        get { return hasSecMarket; }
      }
      public int SecMarket {
        get { return secMarket_; }
      }
      
      public const int CreateTimestampFieldNumber = 14;
      private bool hasCreateTimestamp;
      private double createTimestamp_;
      public bool HasCreateTimestamp {
        get { return hasCreateTimestamp; }
      }
      public double CreateTimestamp {
        get { return createTimestamp_; }
      }
      
      public const int UpdateTimestampFieldNumber = 15;
      private bool hasUpdateTimestamp;
      private double updateTimestamp_;
      public bool HasUpdateTimestamp {
        get { return hasUpdateTimestamp; }
      }
      public double UpdateTimestamp {
        get { return updateTimestamp_; }
      }
      
      public const int StatusFieldNumber = 16;
      private bool hasStatus;
      private int status_;
      public bool HasStatus {
        get { return hasStatus; }
      }
      public int Status {
        get { return status_; }
      }
      
      public const int TrdMarketFieldNumber = 17;
      private bool hasTrdMarket;
      private int trdMarket_;
      public bool HasTrdMarket {
        get { return hasTrdMarket; }
      }
      public int TrdMarket {
        get { return trdMarket_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTrdSide) return false;
          if (!hasFillID) return false;
          if (!hasFillIDEx) return false;
          if (!hasCode) return false;
          if (!hasName) return false;
          if (!hasQty) return false;
          if (!hasPrice) return false;
          if (!hasCreateTime) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _orderFillFieldNames;
        if (hasTrdSide) {
          output.WriteInt32(1, field_names[15], TrdSide);
        }
        if (hasFillID) {
          output.WriteUInt64(2, field_names[5], FillID);
        }
        if (hasFillIDEx) {
          output.WriteString(3, field_names[6], FillIDEx);
        }
        if (hasOrderID) {
          output.WriteUInt64(4, field_names[8], OrderID);
        }
        if (hasOrderIDEx) {
          output.WriteString(5, field_names[9], OrderIDEx);
        }
        if (hasCode) {
          output.WriteString(6, field_names[0], Code);
        }
        if (hasName) {
          output.WriteString(7, field_names[7], Name);
        }
        if (hasQty) {
          output.WriteDouble(8, field_names[11], Qty);
        }
        if (hasPrice) {
          output.WriteDouble(9, field_names[10], Price);
        }
        if (hasCreateTime) {
          output.WriteString(10, field_names[3], CreateTime);
        }
        if (hasCounterBrokerID) {
          output.WriteInt32(11, field_names[1], CounterBrokerID);
        }
        if (hasCounterBrokerName) {
          output.WriteString(12, field_names[2], CounterBrokerName);
        }
        if (hasSecMarket) {
          output.WriteInt32(13, field_names[12], SecMarket);
        }
        if (hasCreateTimestamp) {
          output.WriteDouble(14, field_names[4], CreateTimestamp);
        }
        if (hasUpdateTimestamp) {
          output.WriteDouble(15, field_names[16], UpdateTimestamp);
        }
        if (hasStatus) {
          output.WriteInt32(16, field_names[13], Status);
        }
        if (hasTrdMarket) {
          output.WriteInt32(17, field_names[14], TrdMarket);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrdSide) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TrdSide);
        }
        if (hasFillID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, FillID);
        }
        if (hasFillIDEx) {
          size += pb::CodedOutputStream.ComputeStringSize(3, FillIDEx);
        }
        if (hasOrderID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, OrderID);
        }
        if (hasOrderIDEx) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderIDEx);
        }
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Code);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Name);
        }
        if (hasQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, Qty);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Price);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(10, CreateTime);
        }
        if (hasCounterBrokerID) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, CounterBrokerID);
        }
        if (hasCounterBrokerName) {
          size += pb::CodedOutputStream.ComputeStringSize(12, CounterBrokerName);
        }
        if (hasSecMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, SecMarket);
        }
        if (hasCreateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, CreateTimestamp);
        }
        if (hasUpdateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, UpdateTimestamp);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, Status);
        }
        if (hasTrdMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, TrdMarket);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static OrderFill ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderFill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderFill ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderFill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderFill ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderFill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static OrderFill ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static OrderFill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static OrderFill ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderFill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private OrderFill MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(OrderFill prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<OrderFill, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(OrderFill cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private OrderFill result;
        
        private OrderFill PrepareBuilder() {
          if (resultIsReadOnly) {
            OrderFill original = result;
            result = new OrderFill();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override OrderFill MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.OrderFill.Descriptor; }
        }
        
        public override OrderFill DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.OrderFill.DefaultInstance; }
        }
        
        public override OrderFill BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is OrderFill) {
            return MergeFrom((OrderFill) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(OrderFill other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.OrderFill.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTrdSide) {
            TrdSide = other.TrdSide;
          }
          if (other.HasFillID) {
            FillID = other.FillID;
          }
          if (other.HasFillIDEx) {
            FillIDEx = other.FillIDEx;
          }
          if (other.HasOrderID) {
            OrderID = other.OrderID;
          }
          if (other.HasOrderIDEx) {
            OrderIDEx = other.OrderIDEx;
          }
          if (other.HasCode) {
            Code = other.Code;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasQty) {
            Qty = other.Qty;
          }
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasCreateTime) {
            CreateTime = other.CreateTime;
          }
          if (other.HasCounterBrokerID) {
            CounterBrokerID = other.CounterBrokerID;
          }
          if (other.HasCounterBrokerName) {
            CounterBrokerName = other.CounterBrokerName;
          }
          if (other.HasSecMarket) {
            SecMarket = other.SecMarket;
          }
          if (other.HasCreateTimestamp) {
            CreateTimestamp = other.CreateTimestamp;
          }
          if (other.HasUpdateTimestamp) {
            UpdateTimestamp = other.UpdateTimestamp;
          }
          if (other.HasStatus) {
            Status = other.Status;
          }
          if (other.HasTrdMarket) {
            TrdMarket = other.TrdMarket;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_orderFillFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _orderFillFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasTrdSide = input.ReadInt32(ref result.trdSide_);
                break;
              }
              case 16: {
                result.hasFillID = input.ReadUInt64(ref result.fillID_);
                break;
              }
              case 26: {
                result.hasFillIDEx = input.ReadString(ref result.fillIDEx_);
                break;
              }
              case 32: {
                result.hasOrderID = input.ReadUInt64(ref result.orderID_);
                break;
              }
              case 42: {
                result.hasOrderIDEx = input.ReadString(ref result.orderIDEx_);
                break;
              }
              case 50: {
                result.hasCode = input.ReadString(ref result.code_);
                break;
              }
              case 58: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 65: {
                result.hasQty = input.ReadDouble(ref result.qty_);
                break;
              }
              case 73: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 82: {
                result.hasCreateTime = input.ReadString(ref result.createTime_);
                break;
              }
              case 88: {
                result.hasCounterBrokerID = input.ReadInt32(ref result.counterBrokerID_);
                break;
              }
              case 98: {
                result.hasCounterBrokerName = input.ReadString(ref result.counterBrokerName_);
                break;
              }
              case 104: {
                result.hasSecMarket = input.ReadInt32(ref result.secMarket_);
                break;
              }
              case 113: {
                result.hasCreateTimestamp = input.ReadDouble(ref result.createTimestamp_);
                break;
              }
              case 121: {
                result.hasUpdateTimestamp = input.ReadDouble(ref result.updateTimestamp_);
                break;
              }
              case 128: {
                result.hasStatus = input.ReadInt32(ref result.status_);
                break;
              }
              case 136: {
                result.hasTrdMarket = input.ReadInt32(ref result.trdMarket_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTrdSide {
          get { return result.hasTrdSide; }
        }
        public int TrdSide {
          get { return result.TrdSide; }
          set { SetTrdSide(value); }
        }
        public Builder SetTrdSide(int value) {
          PrepareBuilder();
          result.hasTrdSide = true;
          result.trdSide_ = value;
          return this;
        }
        public Builder ClearTrdSide() {
          PrepareBuilder();
          result.hasTrdSide = false;
          result.trdSide_ = 0;
          return this;
        }
        
        public bool HasFillID {
          get { return result.hasFillID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong FillID {
          get { return result.FillID; }
          set { SetFillID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetFillID(ulong value) {
          PrepareBuilder();
          result.hasFillID = true;
          result.fillID_ = value;
          return this;
        }
        public Builder ClearFillID() {
          PrepareBuilder();
          result.hasFillID = false;
          result.fillID_ = 0UL;
          return this;
        }
        
        public bool HasFillIDEx {
          get { return result.hasFillIDEx; }
        }
        public string FillIDEx {
          get { return result.FillIDEx; }
          set { SetFillIDEx(value); }
        }
        public Builder SetFillIDEx(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasFillIDEx = true;
          result.fillIDEx_ = value;
          return this;
        }
        public Builder ClearFillIDEx() {
          PrepareBuilder();
          result.hasFillIDEx = false;
          result.fillIDEx_ = "";
          return this;
        }
        
        public bool HasOrderID {
          get { return result.hasOrderID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong OrderID {
          get { return result.OrderID; }
          set { SetOrderID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetOrderID(ulong value) {
          PrepareBuilder();
          result.hasOrderID = true;
          result.orderID_ = value;
          return this;
        }
        public Builder ClearOrderID() {
          PrepareBuilder();
          result.hasOrderID = false;
          result.orderID_ = 0UL;
          return this;
        }
        
        public bool HasOrderIDEx {
          get { return result.hasOrderIDEx; }
        }
        public string OrderIDEx {
          get { return result.OrderIDEx; }
          set { SetOrderIDEx(value); }
        }
        public Builder SetOrderIDEx(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOrderIDEx = true;
          result.orderIDEx_ = value;
          return this;
        }
        public Builder ClearOrderIDEx() {
          PrepareBuilder();
          result.hasOrderIDEx = false;
          result.orderIDEx_ = "";
          return this;
        }
        
        public bool HasCode {
          get { return result.hasCode; }
        }
        public string Code {
          get { return result.Code; }
          set { SetCode(value); }
        }
        public Builder SetCode(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCode = true;
          result.code_ = value;
          return this;
        }
        public Builder ClearCode() {
          PrepareBuilder();
          result.hasCode = false;
          result.code_ = "";
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasQty {
          get { return result.hasQty; }
        }
        public double Qty {
          get { return result.Qty; }
          set { SetQty(value); }
        }
        public Builder SetQty(double value) {
          PrepareBuilder();
          result.hasQty = true;
          result.qty_ = value;
          return this;
        }
        public Builder ClearQty() {
          PrepareBuilder();
          result.hasQty = false;
          result.qty_ = 0D;
          return this;
        }
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasCreateTime {
          get { return result.hasCreateTime; }
        }
        public string CreateTime {
          get { return result.CreateTime; }
          set { SetCreateTime(value); }
        }
        public Builder SetCreateTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCreateTime = true;
          result.createTime_ = value;
          return this;
        }
        public Builder ClearCreateTime() {
          PrepareBuilder();
          result.hasCreateTime = false;
          result.createTime_ = "";
          return this;
        }
        
        public bool HasCounterBrokerID {
          get { return result.hasCounterBrokerID; }
        }
        public int CounterBrokerID {
          get { return result.CounterBrokerID; }
          set { SetCounterBrokerID(value); }
        }
        public Builder SetCounterBrokerID(int value) {
          PrepareBuilder();
          result.hasCounterBrokerID = true;
          result.counterBrokerID_ = value;
          return this;
        }
        public Builder ClearCounterBrokerID() {
          PrepareBuilder();
          result.hasCounterBrokerID = false;
          result.counterBrokerID_ = 0;
          return this;
        }
        
        public bool HasCounterBrokerName {
          get { return result.hasCounterBrokerName; }
        }
        public string CounterBrokerName {
          get { return result.CounterBrokerName; }
          set { SetCounterBrokerName(value); }
        }
        public Builder SetCounterBrokerName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCounterBrokerName = true;
          result.counterBrokerName_ = value;
          return this;
        }
        public Builder ClearCounterBrokerName() {
          PrepareBuilder();
          result.hasCounterBrokerName = false;
          result.counterBrokerName_ = "";
          return this;
        }
        
        public bool HasSecMarket {
          get { return result.hasSecMarket; }
        }
        public int SecMarket {
          get { return result.SecMarket; }
          set { SetSecMarket(value); }
        }
        public Builder SetSecMarket(int value) {
          PrepareBuilder();
          result.hasSecMarket = true;
          result.secMarket_ = value;
          return this;
        }
        public Builder ClearSecMarket() {
          PrepareBuilder();
          result.hasSecMarket = false;
          result.secMarket_ = 0;
          return this;
        }
        
        public bool HasCreateTimestamp {
          get { return result.hasCreateTimestamp; }
        }
        public double CreateTimestamp {
          get { return result.CreateTimestamp; }
          set { SetCreateTimestamp(value); }
        }
        public Builder SetCreateTimestamp(double value) {
          PrepareBuilder();
          result.hasCreateTimestamp = true;
          result.createTimestamp_ = value;
          return this;
        }
        public Builder ClearCreateTimestamp() {
          PrepareBuilder();
          result.hasCreateTimestamp = false;
          result.createTimestamp_ = 0D;
          return this;
        }
        
        public bool HasUpdateTimestamp {
          get { return result.hasUpdateTimestamp; }
        }
        public double UpdateTimestamp {
          get { return result.UpdateTimestamp; }
          set { SetUpdateTimestamp(value); }
        }
        public Builder SetUpdateTimestamp(double value) {
          PrepareBuilder();
          result.hasUpdateTimestamp = true;
          result.updateTimestamp_ = value;
          return this;
        }
        public Builder ClearUpdateTimestamp() {
          PrepareBuilder();
          result.hasUpdateTimestamp = false;
          result.updateTimestamp_ = 0D;
          return this;
        }
        
        public bool HasStatus {
          get { return result.hasStatus; }
        }
        public int Status {
          get { return result.Status; }
          set { SetStatus(value); }
        }
        public Builder SetStatus(int value) {
          PrepareBuilder();
          result.hasStatus = true;
          result.status_ = value;
          return this;
        }
        public Builder ClearStatus() {
          PrepareBuilder();
          result.hasStatus = false;
          result.status_ = 0;
          return this;
        }
        
        public bool HasTrdMarket {
          get { return result.hasTrdMarket; }
        }
        public int TrdMarket {
          get { return result.TrdMarket; }
          set { SetTrdMarket(value); }
        }
        public Builder SetTrdMarket(int value) {
          PrepareBuilder();
          result.hasTrdMarket = true;
          result.trdMarket_ = value;
          return this;
        }
        public Builder ClearTrdMarket() {
          PrepareBuilder();
          result.hasTrdMarket = false;
          result.trdMarket_ = 0;
          return this;
        }
      }
      static OrderFill() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MaxTrdQtys : pb::GeneratedMessage<MaxTrdQtys, MaxTrdQtys.Builder> {
      private MaxTrdQtys() { }
      private static readonly MaxTrdQtys defaultInstance = new MaxTrdQtys().MakeReadOnly();
      private static readonly string[] _maxTrdQtysFieldNames = new string[] { "longRequiredIM", "maxBuyBack", "maxCashAndMarginBuy", "maxCashBuy", "maxPositionSell", "maxSellShort", "shortRequiredIM" };
      private static readonly uint[] _maxTrdQtysFieldTags = new uint[] { 49, 41, 17, 9, 25, 33, 57 };
      public static MaxTrdQtys DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override MaxTrdQtys DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override MaxTrdQtys ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_MaxTrdQtys__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<MaxTrdQtys, MaxTrdQtys.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_MaxTrdQtys__FieldAccessorTable; }
      }
      
      public const int MaxCashBuyFieldNumber = 1;
      private bool hasMaxCashBuy;
      private double maxCashBuy_;
      public bool HasMaxCashBuy {
        get { return hasMaxCashBuy; }
      }
      public double MaxCashBuy {
        get { return maxCashBuy_; }
      }
      
      public const int MaxCashAndMarginBuyFieldNumber = 2;
      private bool hasMaxCashAndMarginBuy;
      private double maxCashAndMarginBuy_;
      public bool HasMaxCashAndMarginBuy {
        get { return hasMaxCashAndMarginBuy; }
      }
      public double MaxCashAndMarginBuy {
        get { return maxCashAndMarginBuy_; }
      }
      
      public const int MaxPositionSellFieldNumber = 3;
      private bool hasMaxPositionSell;
      private double maxPositionSell_;
      public bool HasMaxPositionSell {
        get { return hasMaxPositionSell; }
      }
      public double MaxPositionSell {
        get { return maxPositionSell_; }
      }
      
      public const int MaxSellShortFieldNumber = 4;
      private bool hasMaxSellShort;
      private double maxSellShort_;
      public bool HasMaxSellShort {
        get { return hasMaxSellShort; }
      }
      public double MaxSellShort {
        get { return maxSellShort_; }
      }
      
      public const int MaxBuyBackFieldNumber = 5;
      private bool hasMaxBuyBack;
      private double maxBuyBack_;
      public bool HasMaxBuyBack {
        get { return hasMaxBuyBack; }
      }
      public double MaxBuyBack {
        get { return maxBuyBack_; }
      }
      
      public const int LongRequiredIMFieldNumber = 6;
      private bool hasLongRequiredIM;
      private double longRequiredIM_;
      public bool HasLongRequiredIM {
        get { return hasLongRequiredIM; }
      }
      public double LongRequiredIM {
        get { return longRequiredIM_; }
      }
      
      public const int ShortRequiredIMFieldNumber = 7;
      private bool hasShortRequiredIM;
      private double shortRequiredIM_;
      public bool HasShortRequiredIM {
        get { return hasShortRequiredIM; }
      }
      public double ShortRequiredIM {
        get { return shortRequiredIM_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasMaxCashBuy) return false;
          if (!hasMaxPositionSell) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _maxTrdQtysFieldNames;
        if (hasMaxCashBuy) {
          output.WriteDouble(1, field_names[3], MaxCashBuy);
        }
        if (hasMaxCashAndMarginBuy) {
          output.WriteDouble(2, field_names[2], MaxCashAndMarginBuy);
        }
        if (hasMaxPositionSell) {
          output.WriteDouble(3, field_names[4], MaxPositionSell);
        }
        if (hasMaxSellShort) {
          output.WriteDouble(4, field_names[5], MaxSellShort);
        }
        if (hasMaxBuyBack) {
          output.WriteDouble(5, field_names[1], MaxBuyBack);
        }
        if (hasLongRequiredIM) {
          output.WriteDouble(6, field_names[0], LongRequiredIM);
        }
        if (hasShortRequiredIM) {
          output.WriteDouble(7, field_names[6], ShortRequiredIM);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMaxCashBuy) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, MaxCashBuy);
        }
        if (hasMaxCashAndMarginBuy) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, MaxCashAndMarginBuy);
        }
        if (hasMaxPositionSell) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, MaxPositionSell);
        }
        if (hasMaxSellShort) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, MaxSellShort);
        }
        if (hasMaxBuyBack) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, MaxBuyBack);
        }
        if (hasLongRequiredIM) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, LongRequiredIM);
        }
        if (hasShortRequiredIM) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, ShortRequiredIM);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static MaxTrdQtys ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static MaxTrdQtys ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static MaxTrdQtys ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private MaxTrdQtys MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(MaxTrdQtys prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<MaxTrdQtys, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(MaxTrdQtys cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private MaxTrdQtys result;
        
        private MaxTrdQtys PrepareBuilder() {
          if (resultIsReadOnly) {
            MaxTrdQtys original = result;
            result = new MaxTrdQtys();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override MaxTrdQtys MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.Descriptor; }
        }
        
        public override MaxTrdQtys DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.DefaultInstance; }
        }
        
        public override MaxTrdQtys BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is MaxTrdQtys) {
            return MergeFrom((MaxTrdQtys) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(MaxTrdQtys other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasMaxCashBuy) {
            MaxCashBuy = other.MaxCashBuy;
          }
          if (other.HasMaxCashAndMarginBuy) {
            MaxCashAndMarginBuy = other.MaxCashAndMarginBuy;
          }
          if (other.HasMaxPositionSell) {
            MaxPositionSell = other.MaxPositionSell;
          }
          if (other.HasMaxSellShort) {
            MaxSellShort = other.MaxSellShort;
          }
          if (other.HasMaxBuyBack) {
            MaxBuyBack = other.MaxBuyBack;
          }
          if (other.HasLongRequiredIM) {
            LongRequiredIM = other.LongRequiredIM;
          }
          if (other.HasShortRequiredIM) {
            ShortRequiredIM = other.ShortRequiredIM;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_maxTrdQtysFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _maxTrdQtysFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasMaxCashBuy = input.ReadDouble(ref result.maxCashBuy_);
                break;
              }
              case 17: {
                result.hasMaxCashAndMarginBuy = input.ReadDouble(ref result.maxCashAndMarginBuy_);
                break;
              }
              case 25: {
                result.hasMaxPositionSell = input.ReadDouble(ref result.maxPositionSell_);
                break;
              }
              case 33: {
                result.hasMaxSellShort = input.ReadDouble(ref result.maxSellShort_);
                break;
              }
              case 41: {
                result.hasMaxBuyBack = input.ReadDouble(ref result.maxBuyBack_);
                break;
              }
              case 49: {
                result.hasLongRequiredIM = input.ReadDouble(ref result.longRequiredIM_);
                break;
              }
              case 57: {
                result.hasShortRequiredIM = input.ReadDouble(ref result.shortRequiredIM_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasMaxCashBuy {
          get { return result.hasMaxCashBuy; }
        }
        public double MaxCashBuy {
          get { return result.MaxCashBuy; }
          set { SetMaxCashBuy(value); }
        }
        public Builder SetMaxCashBuy(double value) {
          PrepareBuilder();
          result.hasMaxCashBuy = true;
          result.maxCashBuy_ = value;
          return this;
        }
        public Builder ClearMaxCashBuy() {
          PrepareBuilder();
          result.hasMaxCashBuy = false;
          result.maxCashBuy_ = 0D;
          return this;
        }
        
        public bool HasMaxCashAndMarginBuy {
          get { return result.hasMaxCashAndMarginBuy; }
        }
        public double MaxCashAndMarginBuy {
          get { return result.MaxCashAndMarginBuy; }
          set { SetMaxCashAndMarginBuy(value); }
        }
        public Builder SetMaxCashAndMarginBuy(double value) {
          PrepareBuilder();
          result.hasMaxCashAndMarginBuy = true;
          result.maxCashAndMarginBuy_ = value;
          return this;
        }
        public Builder ClearMaxCashAndMarginBuy() {
          PrepareBuilder();
          result.hasMaxCashAndMarginBuy = false;
          result.maxCashAndMarginBuy_ = 0D;
          return this;
        }
        
        public bool HasMaxPositionSell {
          get { return result.hasMaxPositionSell; }
        }
        public double MaxPositionSell {
          get { return result.MaxPositionSell; }
          set { SetMaxPositionSell(value); }
        }
        public Builder SetMaxPositionSell(double value) {
          PrepareBuilder();
          result.hasMaxPositionSell = true;
          result.maxPositionSell_ = value;
          return this;
        }
        public Builder ClearMaxPositionSell() {
          PrepareBuilder();
          result.hasMaxPositionSell = false;
          result.maxPositionSell_ = 0D;
          return this;
        }
        
        public bool HasMaxSellShort {
          get { return result.hasMaxSellShort; }
        }
        public double MaxSellShort {
          get { return result.MaxSellShort; }
          set { SetMaxSellShort(value); }
        }
        public Builder SetMaxSellShort(double value) {
          PrepareBuilder();
          result.hasMaxSellShort = true;
          result.maxSellShort_ = value;
          return this;
        }
        public Builder ClearMaxSellShort() {
          PrepareBuilder();
          result.hasMaxSellShort = false;
          result.maxSellShort_ = 0D;
          return this;
        }
        
        public bool HasMaxBuyBack {
          get { return result.hasMaxBuyBack; }
        }
        public double MaxBuyBack {
          get { return result.MaxBuyBack; }
          set { SetMaxBuyBack(value); }
        }
        public Builder SetMaxBuyBack(double value) {
          PrepareBuilder();
          result.hasMaxBuyBack = true;
          result.maxBuyBack_ = value;
          return this;
        }
        public Builder ClearMaxBuyBack() {
          PrepareBuilder();
          result.hasMaxBuyBack = false;
          result.maxBuyBack_ = 0D;
          return this;
        }
        
        public bool HasLongRequiredIM {
          get { return result.hasLongRequiredIM; }
        }
        public double LongRequiredIM {
          get { return result.LongRequiredIM; }
          set { SetLongRequiredIM(value); }
        }
        public Builder SetLongRequiredIM(double value) {
          PrepareBuilder();
          result.hasLongRequiredIM = true;
          result.longRequiredIM_ = value;
          return this;
        }
        public Builder ClearLongRequiredIM() {
          PrepareBuilder();
          result.hasLongRequiredIM = false;
          result.longRequiredIM_ = 0D;
          return this;
        }
        
        public bool HasShortRequiredIM {
          get { return result.hasShortRequiredIM; }
        }
        public double ShortRequiredIM {
          get { return result.ShortRequiredIM; }
          set { SetShortRequiredIM(value); }
        }
        public Builder SetShortRequiredIM(double value) {
          PrepareBuilder();
          result.hasShortRequiredIM = true;
          result.shortRequiredIM_ = value;
          return this;
        }
        public Builder ClearShortRequiredIM() {
          PrepareBuilder();
          result.hasShortRequiredIM = false;
          result.shortRequiredIM_ = 0D;
          return this;
        }
      }
      static MaxTrdQtys() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TrdFilterConditions : pb::GeneratedMessage<TrdFilterConditions, TrdFilterConditions.Builder> {
      private TrdFilterConditions() { }
      private static readonly TrdFilterConditions defaultInstance = new TrdFilterConditions().MakeReadOnly();
      private static readonly string[] _trdFilterConditionsFieldNames = new string[] { "beginTime", "codeList", "endTime", "filterMarket", "idList", "orderIDExList" };
      private static readonly uint[] _trdFilterConditionsFieldTags = new uint[] { 26, 10, 34, 48, 16, 42 };
      public static TrdFilterConditions DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override TrdFilterConditions DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override TrdFilterConditions ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdFilterConditions__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<TrdFilterConditions, TrdFilterConditions.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdFilterConditions__FieldAccessorTable; }
      }
      
      public const int CodeListFieldNumber = 1;
      private pbc::PopsicleList<string> codeList_ = new pbc::PopsicleList<string>();
      public scg::IList<string> CodeListList {
        get { return pbc::Lists.AsReadOnly(codeList_); }
      }
      public int CodeListCount {
        get { return codeList_.Count; }
      }
      public string GetCodeList(int index) {
        return codeList_[index];
      }
      
      public const int IdListFieldNumber = 2;
      private pbc::PopsicleList<ulong> idList_ = new pbc::PopsicleList<ulong>();
      [global::System.CLSCompliant(false)]
      public scg::IList<ulong> IdListList {
        get { return pbc::Lists.AsReadOnly(idList_); }
      }
      public int IdListCount {
        get { return idList_.Count; }
      }
      [global::System.CLSCompliant(false)]
      public ulong GetIdList(int index) {
        return idList_[index];
      }
      
      public const int BeginTimeFieldNumber = 3;
      private bool hasBeginTime;
      private string beginTime_ = "";
      public bool HasBeginTime {
        get { return hasBeginTime; }
      }
      public string BeginTime {
        get { return beginTime_; }
      }
      
      public const int EndTimeFieldNumber = 4;
      private bool hasEndTime;
      private string endTime_ = "";
      public bool HasEndTime {
        get { return hasEndTime; }
      }
      public string EndTime {
        get { return endTime_; }
      }
      
      public const int OrderIDExListFieldNumber = 5;
      private pbc::PopsicleList<string> orderIDExList_ = new pbc::PopsicleList<string>();
      public scg::IList<string> OrderIDExListList {
        get { return pbc::Lists.AsReadOnly(orderIDExList_); }
      }
      public int OrderIDExListCount {
        get { return orderIDExList_.Count; }
      }
      public string GetOrderIDExList(int index) {
        return orderIDExList_[index];
      }
      
      public const int FilterMarketFieldNumber = 6;
      private bool hasFilterMarket;
      private int filterMarket_;
      public bool HasFilterMarket {
        get { return hasFilterMarket; }
      }
      public int FilterMarket {
        get { return filterMarket_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _trdFilterConditionsFieldNames;
        if (codeList_.Count > 0) {
          output.WriteStringArray(1, field_names[1], codeList_);
        }
        if (idList_.Count > 0) {
          output.WriteUInt64Array(2, field_names[4], idList_);
        }
        if (hasBeginTime) {
          output.WriteString(3, field_names[0], BeginTime);
        }
        if (hasEndTime) {
          output.WriteString(4, field_names[2], EndTime);
        }
        if (orderIDExList_.Count > 0) {
          output.WriteStringArray(5, field_names[5], orderIDExList_);
        }
        if (hasFilterMarket) {
          output.WriteInt32(6, field_names[3], FilterMarket);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (string element in CodeListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * codeList_.Count;
        }
        {
          int dataSize = 0;
          foreach (ulong element in IdListList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * idList_.Count;
        }
        if (hasBeginTime) {
          size += pb::CodedOutputStream.ComputeStringSize(3, BeginTime);
        }
        if (hasEndTime) {
          size += pb::CodedOutputStream.ComputeStringSize(4, EndTime);
        }
        {
          int dataSize = 0;
          foreach (string element in OrderIDExListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * orderIDExList_.Count;
        }
        if (hasFilterMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, FilterMarket);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static TrdFilterConditions ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static TrdFilterConditions ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static TrdFilterConditions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private TrdFilterConditions MakeReadOnly() {
        codeList_.MakeReadOnly();
        idList_.MakeReadOnly();
        orderIDExList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(TrdFilterConditions prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<TrdFilterConditions, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(TrdFilterConditions cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private TrdFilterConditions result;
        
        private TrdFilterConditions PrepareBuilder() {
          if (resultIsReadOnly) {
            TrdFilterConditions original = result;
            result = new TrdFilterConditions();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override TrdFilterConditions MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.Descriptor; }
        }
        
        public override TrdFilterConditions DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.DefaultInstance; }
        }
        
        public override TrdFilterConditions BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is TrdFilterConditions) {
            return MergeFrom((TrdFilterConditions) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(TrdFilterConditions other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.DefaultInstance) return this;
          PrepareBuilder();
          if (other.codeList_.Count != 0) {
            result.codeList_.Add(other.codeList_);
          }
          if (other.idList_.Count != 0) {
            result.idList_.Add(other.idList_);
          }
          if (other.HasBeginTime) {
            BeginTime = other.BeginTime;
          }
          if (other.HasEndTime) {
            EndTime = other.EndTime;
          }
          if (other.orderIDExList_.Count != 0) {
            result.orderIDExList_.Add(other.orderIDExList_);
          }
          if (other.HasFilterMarket) {
            FilterMarket = other.FilterMarket;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_trdFilterConditionsFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _trdFilterConditionsFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                input.ReadStringArray(tag, field_name, result.codeList_);
                break;
              }
              case 18:
              case 16: {
                input.ReadUInt64Array(tag, field_name, result.idList_);
                break;
              }
              case 26: {
                result.hasBeginTime = input.ReadString(ref result.beginTime_);
                break;
              }
              case 34: {
                result.hasEndTime = input.ReadString(ref result.endTime_);
                break;
              }
              case 42: {
                input.ReadStringArray(tag, field_name, result.orderIDExList_);
                break;
              }
              case 48: {
                result.hasFilterMarket = input.ReadInt32(ref result.filterMarket_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public pbc::IPopsicleList<string> CodeListList {
          get { return PrepareBuilder().codeList_; }
        }
        public int CodeListCount {
          get { return result.CodeListCount; }
        }
        public string GetCodeList(int index) {
          return result.GetCodeList(index);
        }
        public Builder SetCodeList(int index, string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.codeList_[index] = value;
          return this;
        }
        public Builder AddCodeList(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.codeList_.Add(value);
          return this;
        }
        public Builder AddRangeCodeList(scg::IEnumerable<string> values) {
          PrepareBuilder();
          result.codeList_.Add(values);
          return this;
        }
        public Builder ClearCodeList() {
          PrepareBuilder();
          result.codeList_.Clear();
          return this;
        }
        
        [global::System.CLSCompliant(false)]
        public pbc::IPopsicleList<ulong> IdListList {
          get { return PrepareBuilder().idList_; }
        }
        public int IdListCount {
          get { return result.IdListCount; }
        }
        [global::System.CLSCompliant(false)]
        public ulong GetIdList(int index) {
          return result.GetIdList(index);
        }
        [global::System.CLSCompliant(false)]
        public Builder SetIdList(int index, ulong value) {
          PrepareBuilder();
          result.idList_[index] = value;
          return this;
        }
        [global::System.CLSCompliant(false)]
        public Builder AddIdList(ulong value) {
          PrepareBuilder();
          result.idList_.Add(value);
          return this;
        }
        [global::System.CLSCompliant(false)]
        public Builder AddRangeIdList(scg::IEnumerable<ulong> values) {
          PrepareBuilder();
          result.idList_.Add(values);
          return this;
        }
        public Builder ClearIdList() {
          PrepareBuilder();
          result.idList_.Clear();
          return this;
        }
        
        public bool HasBeginTime {
          get { return result.hasBeginTime; }
        }
        public string BeginTime {
          get { return result.BeginTime; }
          set { SetBeginTime(value); }
        }
        public Builder SetBeginTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasBeginTime = true;
          result.beginTime_ = value;
          return this;
        }
        public Builder ClearBeginTime() {
          PrepareBuilder();
          result.hasBeginTime = false;
          result.beginTime_ = "";
          return this;
        }
        
        public bool HasEndTime {
          get { return result.hasEndTime; }
        }
        public string EndTime {
          get { return result.EndTime; }
          set { SetEndTime(value); }
        }
        public Builder SetEndTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasEndTime = true;
          result.endTime_ = value;
          return this;
        }
        public Builder ClearEndTime() {
          PrepareBuilder();
          result.hasEndTime = false;
          result.endTime_ = "";
          return this;
        }
        
        public pbc::IPopsicleList<string> OrderIDExListList {
          get { return PrepareBuilder().orderIDExList_; }
        }
        public int OrderIDExListCount {
          get { return result.OrderIDExListCount; }
        }
        public string GetOrderIDExList(int index) {
          return result.GetOrderIDExList(index);
        }
        public Builder SetOrderIDExList(int index, string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.orderIDExList_[index] = value;
          return this;
        }
        public Builder AddOrderIDExList(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.orderIDExList_.Add(value);
          return this;
        }
        public Builder AddRangeOrderIDExList(scg::IEnumerable<string> values) {
          PrepareBuilder();
          result.orderIDExList_.Add(values);
          return this;
        }
        public Builder ClearOrderIDExList() {
          PrepareBuilder();
          result.orderIDExList_.Clear();
          return this;
        }
        
        public bool HasFilterMarket {
          get { return result.hasFilterMarket; }
        }
        public int FilterMarket {
          get { return result.FilterMarket; }
          set { SetFilterMarket(value); }
        }
        public Builder SetFilterMarket(int value) {
          PrepareBuilder();
          result.hasFilterMarket = true;
          result.filterMarket_ = value;
          return this;
        }
        public Builder ClearFilterMarket() {
          PrepareBuilder();
          result.hasFilterMarket = false;
          result.filterMarket_ = 0;
          return this;
        }
      }
      static TrdFilterConditions() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
