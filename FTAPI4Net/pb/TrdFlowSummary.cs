// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Futu.OpenApi.Pb {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class TrdFlowSummary {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_Trd_FlowSummary_FlowSummaryInfo__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo, global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo.Builder> internal__static_Trd_FlowSummary_FlowSummaryInfo__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_FlowSummary_C2S__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.C2S, global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.Builder> internal__static_Trd_FlowSummary_C2S__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_FlowSummary_S2C__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.S2C, global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.Builder> internal__static_Trd_FlowSummary_S2C__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_FlowSummary_Request__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.Request, global::Futu.OpenApi.Pb.TrdFlowSummary.Request.Builder> internal__static_Trd_FlowSummary_Request__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_FlowSummary_Response__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.Response, global::Futu.OpenApi.Pb.TrdFlowSummary.Response.Builder> internal__static_Trd_FlowSummary_Response__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static TrdFlowSummary() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVUcmRfRmxvd1N1bW1hcnkucHJvdG8SD1RyZF9GbG93U3VtbWFyeRoQVHJk", 
            "X0NvbW1vbi5wcm90byK7AgoPRmxvd1N1bW1hcnlJbmZvEiIKDGNsZWFyaW5n", 
            "RGF0ZRgBIAEoCVIMY2xlYXJpbmdEYXRlEiYKDnNldHRsZW1lbnREYXRlGAIg", 
            "ASgJUg5zZXR0bGVtZW50RGF0ZRIaCghjdXJyZW5jeRgDIAEoBVIIY3VycmVu", 
            "Y3kSIgoMY2FzaEZsb3dUeXBlGAQgASgJUgxjYXNoRmxvd1R5cGUSLAoRY2Fz", 
            "aEZsb3dEaXJlY3Rpb24YBSABKAVSEWNhc2hGbG93RGlyZWN0aW9uEiYKDmNh", 
            "c2hGbG93QW1vdW50GAYgASgBUg5jYXNoRmxvd0Ftb3VudBImCg5jYXNoRmxv", 
            "d1JlbWFyaxgHIAEoCVIOY2FzaEZsb3dSZW1hcmsSHgoKY2FzaEZsb3dJRBgI", 
            "IAEoBFIKY2FzaEZsb3dJRCKGAQoDQzJTEi0KBmhlYWRlchgBIAIoCzIVLlRy", 
            "ZF9Db21tb24uVHJkSGVhZGVyUgZoZWFkZXISIgoMY2xlYXJpbmdEYXRlGAIg", 
            "AigJUgxjbGVhcmluZ0RhdGUSLAoRY2FzaEZsb3dEaXJlY3Rpb24YAyABKAVS", 
            "EWNhc2hGbG93RGlyZWN0aW9uIogBCgNTMkMSLQoGaGVhZGVyGAEgAigLMhUu", 
            "VHJkX0NvbW1vbi5UcmRIZWFkZXJSBmhlYWRlchJSChNmbG93U3VtbWFyeUlu", 
            "Zm9MaXN0GAIgAygLMiAuVHJkX0Zsb3dTdW1tYXJ5LkZsb3dTdW1tYXJ5SW5m", 
            "b1ITZmxvd1N1bW1hcnlJbmZvTGlzdCIxCgdSZXF1ZXN0EiYKA2MycxgBIAIo", 
            "CzIULlRyZF9GbG93U3VtbWFyeS5DMlNSA2MycyKEAQoIUmVzcG9uc2USHgoH", 
            "cmV0VHlwZRgBIAIoBToELTQwMFIHcmV0VHlwZRIWCgZyZXRNc2cYAiABKAlS", 
            "BnJldE1zZxIYCgdlcnJDb2RlGAMgASgFUgdlcnJDb2RlEiYKA3MyYxgEIAEo", 
            "CzIULlRyZF9GbG93U3VtbWFyeS5TMkNSA3MyYypzChRUcmRDYXNoRmxvd0Rp", 
            "cmVjdGlvbhIgChxUcmRDYXNoRmxvd0RpcmVjdGlvbl9Vbmtub3duEAASGwoX", 
            "VHJkQ2FzaEZsb3dEaXJlY3Rpb25fSW4QARIcChhUcmRDYXNoRmxvd0RpcmVj", 
            "dGlvbl9PdXQQAkJFChNjb20uZnV0dS5vcGVuYXBpLnBiWi5naXRodWIuY29t", 
          "L2Z1dHVvcGVuL2Z0YXBpNGdvL3BiL3RyZGZsb3dzdW1tYXJ5"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Trd_FlowSummary_FlowSummaryInfo__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Trd_FlowSummary_FlowSummaryInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo, global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo.Builder>(internal__static_Trd_FlowSummary_FlowSummaryInfo__Descriptor,
                new string[] { "ClearingDate", "SettlementDate", "Currency", "CashFlowType", "CashFlowDirection", "CashFlowAmount", "CashFlowRemark", "CashFlowID", });
        internal__static_Trd_FlowSummary_C2S__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Trd_FlowSummary_C2S__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.C2S, global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.Builder>(internal__static_Trd_FlowSummary_C2S__Descriptor,
                new string[] { "Header", "ClearingDate", "CashFlowDirection", });
        internal__static_Trd_FlowSummary_S2C__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Trd_FlowSummary_S2C__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.S2C, global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.Builder>(internal__static_Trd_FlowSummary_S2C__Descriptor,
                new string[] { "Header", "FlowSummaryInfoList", });
        internal__static_Trd_FlowSummary_Request__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Trd_FlowSummary_Request__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.Request, global::Futu.OpenApi.Pb.TrdFlowSummary.Request.Builder>(internal__static_Trd_FlowSummary_Request__Descriptor,
                new string[] { "C2S", });
        internal__static_Trd_FlowSummary_Response__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Trd_FlowSummary_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdFlowSummary.Response, global::Futu.OpenApi.Pb.TrdFlowSummary.Response.Builder>(internal__static_Trd_FlowSummary_Response__Descriptor,
                new string[] { "RetType", "RetMsg", "ErrCode", "S2C", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.TrdCommon.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Futu.OpenApi.Pb.TrdCommon.Descriptor, 
          }, assigner);
    }
    #endregion
    
    #region Enums
    public enum TrdCashFlowDirection {
      TrdCashFlowDirection_Unknown = 0,
      TrdCashFlowDirection_In = 1,
      TrdCashFlowDirection_Out = 2,
    }
    
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class FlowSummaryInfo : pb::GeneratedMessage<FlowSummaryInfo, FlowSummaryInfo.Builder> {
      private FlowSummaryInfo() { }
      private static readonly FlowSummaryInfo defaultInstance = new FlowSummaryInfo().MakeReadOnly();
      private static readonly string[] _flowSummaryInfoFieldNames = new string[] { "cashFlowAmount", "cashFlowDirection", "cashFlowID", "cashFlowRemark", "cashFlowType", "clearingDate", "currency", "settlementDate" };
      private static readonly uint[] _flowSummaryInfoFieldTags = new uint[] { 49, 40, 64, 58, 34, 10, 24, 18 };
      public static FlowSummaryInfo DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override FlowSummaryInfo DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override FlowSummaryInfo ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_FlowSummaryInfo__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<FlowSummaryInfo, FlowSummaryInfo.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_FlowSummaryInfo__FieldAccessorTable; }
      }
      
      public const int ClearingDateFieldNumber = 1;
      private bool hasClearingDate;
      private string clearingDate_ = "";
      public bool HasClearingDate {
        get { return hasClearingDate; }
      }
      public string ClearingDate {
        get { return clearingDate_; }
      }
      
      public const int SettlementDateFieldNumber = 2;
      private bool hasSettlementDate;
      private string settlementDate_ = "";
      public bool HasSettlementDate {
        get { return hasSettlementDate; }
      }
      public string SettlementDate {
        get { return settlementDate_; }
      }
      
      public const int CurrencyFieldNumber = 3;
      private bool hasCurrency;
      private int currency_;
      public bool HasCurrency {
        get { return hasCurrency; }
      }
      public int Currency {
        get { return currency_; }
      }
      
      public const int CashFlowTypeFieldNumber = 4;
      private bool hasCashFlowType;
      private string cashFlowType_ = "";
      public bool HasCashFlowType {
        get { return hasCashFlowType; }
      }
      public string CashFlowType {
        get { return cashFlowType_; }
      }
      
      public const int CashFlowDirectionFieldNumber = 5;
      private bool hasCashFlowDirection;
      private int cashFlowDirection_;
      public bool HasCashFlowDirection {
        get { return hasCashFlowDirection; }
      }
      public int CashFlowDirection {
        get { return cashFlowDirection_; }
      }
      
      public const int CashFlowAmountFieldNumber = 6;
      private bool hasCashFlowAmount;
      private double cashFlowAmount_;
      public bool HasCashFlowAmount {
        get { return hasCashFlowAmount; }
      }
      public double CashFlowAmount {
        get { return cashFlowAmount_; }
      }
      
      public const int CashFlowRemarkFieldNumber = 7;
      private bool hasCashFlowRemark;
      private string cashFlowRemark_ = "";
      public bool HasCashFlowRemark {
        get { return hasCashFlowRemark; }
      }
      public string CashFlowRemark {
        get { return cashFlowRemark_; }
      }
      
      public const int CashFlowIDFieldNumber = 8;
      private bool hasCashFlowID;
      private ulong cashFlowID_;
      public bool HasCashFlowID {
        get { return hasCashFlowID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong CashFlowID {
        get { return cashFlowID_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _flowSummaryInfoFieldNames;
        if (hasClearingDate) {
          output.WriteString(1, field_names[5], ClearingDate);
        }
        if (hasSettlementDate) {
          output.WriteString(2, field_names[7], SettlementDate);
        }
        if (hasCurrency) {
          output.WriteInt32(3, field_names[6], Currency);
        }
        if (hasCashFlowType) {
          output.WriteString(4, field_names[4], CashFlowType);
        }
        if (hasCashFlowDirection) {
          output.WriteInt32(5, field_names[1], CashFlowDirection);
        }
        if (hasCashFlowAmount) {
          output.WriteDouble(6, field_names[0], CashFlowAmount);
        }
        if (hasCashFlowRemark) {
          output.WriteString(7, field_names[3], CashFlowRemark);
        }
        if (hasCashFlowID) {
          output.WriteUInt64(8, field_names[2], CashFlowID);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClearingDate) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ClearingDate);
        }
        if (hasSettlementDate) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SettlementDate);
        }
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Currency);
        }
        if (hasCashFlowType) {
          size += pb::CodedOutputStream.ComputeStringSize(4, CashFlowType);
        }
        if (hasCashFlowDirection) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, CashFlowDirection);
        }
        if (hasCashFlowAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, CashFlowAmount);
        }
        if (hasCashFlowRemark) {
          size += pb::CodedOutputStream.ComputeStringSize(7, CashFlowRemark);
        }
        if (hasCashFlowID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(8, CashFlowID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static FlowSummaryInfo ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static FlowSummaryInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static FlowSummaryInfo ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static FlowSummaryInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static FlowSummaryInfo ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static FlowSummaryInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static FlowSummaryInfo ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static FlowSummaryInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static FlowSummaryInfo ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static FlowSummaryInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private FlowSummaryInfo MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(FlowSummaryInfo prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<FlowSummaryInfo, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(FlowSummaryInfo cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private FlowSummaryInfo result;
        
        private FlowSummaryInfo PrepareBuilder() {
          if (resultIsReadOnly) {
            FlowSummaryInfo original = result;
            result = new FlowSummaryInfo();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override FlowSummaryInfo MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo.Descriptor; }
        }
        
        public override FlowSummaryInfo DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo.DefaultInstance; }
        }
        
        public override FlowSummaryInfo BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is FlowSummaryInfo) {
            return MergeFrom((FlowSummaryInfo) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(FlowSummaryInfo other) {
          if (other == global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasClearingDate) {
            ClearingDate = other.ClearingDate;
          }
          if (other.HasSettlementDate) {
            SettlementDate = other.SettlementDate;
          }
          if (other.HasCurrency) {
            Currency = other.Currency;
          }
          if (other.HasCashFlowType) {
            CashFlowType = other.CashFlowType;
          }
          if (other.HasCashFlowDirection) {
            CashFlowDirection = other.CashFlowDirection;
          }
          if (other.HasCashFlowAmount) {
            CashFlowAmount = other.CashFlowAmount;
          }
          if (other.HasCashFlowRemark) {
            CashFlowRemark = other.CashFlowRemark;
          }
          if (other.HasCashFlowID) {
            CashFlowID = other.CashFlowID;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_flowSummaryInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _flowSummaryInfoFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasClearingDate = input.ReadString(ref result.clearingDate_);
                break;
              }
              case 18: {
                result.hasSettlementDate = input.ReadString(ref result.settlementDate_);
                break;
              }
              case 24: {
                result.hasCurrency = input.ReadInt32(ref result.currency_);
                break;
              }
              case 34: {
                result.hasCashFlowType = input.ReadString(ref result.cashFlowType_);
                break;
              }
              case 40: {
                result.hasCashFlowDirection = input.ReadInt32(ref result.cashFlowDirection_);
                break;
              }
              case 49: {
                result.hasCashFlowAmount = input.ReadDouble(ref result.cashFlowAmount_);
                break;
              }
              case 58: {
                result.hasCashFlowRemark = input.ReadString(ref result.cashFlowRemark_);
                break;
              }
              case 64: {
                result.hasCashFlowID = input.ReadUInt64(ref result.cashFlowID_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasClearingDate {
          get { return result.hasClearingDate; }
        }
        public string ClearingDate {
          get { return result.ClearingDate; }
          set { SetClearingDate(value); }
        }
        public Builder SetClearingDate(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasClearingDate = true;
          result.clearingDate_ = value;
          return this;
        }
        public Builder ClearClearingDate() {
          PrepareBuilder();
          result.hasClearingDate = false;
          result.clearingDate_ = "";
          return this;
        }
        
        public bool HasSettlementDate {
          get { return result.hasSettlementDate; }
        }
        public string SettlementDate {
          get { return result.SettlementDate; }
          set { SetSettlementDate(value); }
        }
        public Builder SetSettlementDate(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasSettlementDate = true;
          result.settlementDate_ = value;
          return this;
        }
        public Builder ClearSettlementDate() {
          PrepareBuilder();
          result.hasSettlementDate = false;
          result.settlementDate_ = "";
          return this;
        }
        
        public bool HasCurrency {
          get { return result.hasCurrency; }
        }
        public int Currency {
          get { return result.Currency; }
          set { SetCurrency(value); }
        }
        public Builder SetCurrency(int value) {
          PrepareBuilder();
          result.hasCurrency = true;
          result.currency_ = value;
          return this;
        }
        public Builder ClearCurrency() {
          PrepareBuilder();
          result.hasCurrency = false;
          result.currency_ = 0;
          return this;
        }
        
        public bool HasCashFlowType {
          get { return result.hasCashFlowType; }
        }
        public string CashFlowType {
          get { return result.CashFlowType; }
          set { SetCashFlowType(value); }
        }
        public Builder SetCashFlowType(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCashFlowType = true;
          result.cashFlowType_ = value;
          return this;
        }
        public Builder ClearCashFlowType() {
          PrepareBuilder();
          result.hasCashFlowType = false;
          result.cashFlowType_ = "";
          return this;
        }
        
        public bool HasCashFlowDirection {
          get { return result.hasCashFlowDirection; }
        }
        public int CashFlowDirection {
          get { return result.CashFlowDirection; }
          set { SetCashFlowDirection(value); }
        }
        public Builder SetCashFlowDirection(int value) {
          PrepareBuilder();
          result.hasCashFlowDirection = true;
          result.cashFlowDirection_ = value;
          return this;
        }
        public Builder ClearCashFlowDirection() {
          PrepareBuilder();
          result.hasCashFlowDirection = false;
          result.cashFlowDirection_ = 0;
          return this;
        }
        
        public bool HasCashFlowAmount {
          get { return result.hasCashFlowAmount; }
        }
        public double CashFlowAmount {
          get { return result.CashFlowAmount; }
          set { SetCashFlowAmount(value); }
        }
        public Builder SetCashFlowAmount(double value) {
          PrepareBuilder();
          result.hasCashFlowAmount = true;
          result.cashFlowAmount_ = value;
          return this;
        }
        public Builder ClearCashFlowAmount() {
          PrepareBuilder();
          result.hasCashFlowAmount = false;
          result.cashFlowAmount_ = 0D;
          return this;
        }
        
        public bool HasCashFlowRemark {
          get { return result.hasCashFlowRemark; }
        }
        public string CashFlowRemark {
          get { return result.CashFlowRemark; }
          set { SetCashFlowRemark(value); }
        }
        public Builder SetCashFlowRemark(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCashFlowRemark = true;
          result.cashFlowRemark_ = value;
          return this;
        }
        public Builder ClearCashFlowRemark() {
          PrepareBuilder();
          result.hasCashFlowRemark = false;
          result.cashFlowRemark_ = "";
          return this;
        }
        
        public bool HasCashFlowID {
          get { return result.hasCashFlowID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong CashFlowID {
          get { return result.CashFlowID; }
          set { SetCashFlowID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetCashFlowID(ulong value) {
          PrepareBuilder();
          result.hasCashFlowID = true;
          result.cashFlowID_ = value;
          return this;
        }
        public Builder ClearCashFlowID() {
          PrepareBuilder();
          result.hasCashFlowID = false;
          result.cashFlowID_ = 0UL;
          return this;
        }
      }
      static FlowSummaryInfo() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdFlowSummary.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class C2S : pb::GeneratedMessage<C2S, C2S.Builder> {
      private C2S() { }
      private static readonly C2S defaultInstance = new C2S().MakeReadOnly();
      private static readonly string[] _c2SFieldNames = new string[] { "cashFlowDirection", "clearingDate", "header" };
      private static readonly uint[] _c2SFieldTags = new uint[] { 24, 18, 10 };
      public static C2S DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override C2S DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override C2S ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_C2S__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<C2S, C2S.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_C2S__FieldAccessorTable; }
      }
      
      public const int HeaderFieldNumber = 1;
      private bool hasHeader;
      private global::Futu.OpenApi.Pb.TrdCommon.TrdHeader header_;
      public bool HasHeader {
        get { return hasHeader; }
      }
      public global::Futu.OpenApi.Pb.TrdCommon.TrdHeader Header {
        get { return header_ ?? global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance; }
      }
      
      public const int ClearingDateFieldNumber = 2;
      private bool hasClearingDate;
      private string clearingDate_ = "";
      public bool HasClearingDate {
        get { return hasClearingDate; }
      }
      public string ClearingDate {
        get { return clearingDate_; }
      }
      
      public const int CashFlowDirectionFieldNumber = 3;
      private bool hasCashFlowDirection;
      private int cashFlowDirection_;
      public bool HasCashFlowDirection {
        get { return hasCashFlowDirection; }
      }
      public int CashFlowDirection {
        get { return cashFlowDirection_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasHeader) return false;
          if (!hasClearingDate) return false;
          if (!Header.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _c2SFieldNames;
        if (hasHeader) {
          output.WriteMessage(1, field_names[2], Header);
        }
        if (hasClearingDate) {
          output.WriteString(2, field_names[1], ClearingDate);
        }
        if (hasCashFlowDirection) {
          output.WriteInt32(3, field_names[0], CashFlowDirection);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        if (hasClearingDate) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ClearingDate);
        }
        if (hasCashFlowDirection) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, CashFlowDirection);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static C2S ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static C2S ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static C2S ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static C2S ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private C2S MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(C2S prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<C2S, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(C2S cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private C2S result;
        
        private C2S PrepareBuilder() {
          if (resultIsReadOnly) {
            C2S original = result;
            result = new C2S();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override C2S MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.Descriptor; }
        }
        
        public override C2S DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.DefaultInstance; }
        }
        
        public override C2S BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is C2S) {
            return MergeFrom((C2S) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(C2S other) {
          if (other == global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasHeader) {
            MergeHeader(other.Header);
          }
          if (other.HasClearingDate) {
            ClearingDate = other.ClearingDate;
          }
          if (other.HasCashFlowDirection) {
            CashFlowDirection = other.CashFlowDirection;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_c2SFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _c2SFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder subBuilder = global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.CreateBuilder();
                if (result.hasHeader) {
                  subBuilder.MergeFrom(Header);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Header = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                result.hasClearingDate = input.ReadString(ref result.clearingDate_);
                break;
              }
              case 24: {
                result.hasCashFlowDirection = input.ReadInt32(ref result.cashFlowDirection_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasHeader {
         get { return result.hasHeader; }
        }
        public global::Futu.OpenApi.Pb.TrdCommon.TrdHeader Header {
          get { return result.Header; }
          set { SetHeader(value); }
        }
        public Builder SetHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasHeader = true;
          result.header_ = value;
          return this;
        }
        public Builder SetHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasHeader = true;
          result.header_ = builderForValue.Build();
          return this;
        }
        public Builder MergeHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasHeader &&
              result.header_ != global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance) {
              result.header_ = global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
          } else {
            result.header_ = value;
          }
          result.hasHeader = true;
          return this;
        }
        public Builder ClearHeader() {
          PrepareBuilder();
          result.hasHeader = false;
          result.header_ = null;
          return this;
        }
        
        public bool HasClearingDate {
          get { return result.hasClearingDate; }
        }
        public string ClearingDate {
          get { return result.ClearingDate; }
          set { SetClearingDate(value); }
        }
        public Builder SetClearingDate(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasClearingDate = true;
          result.clearingDate_ = value;
          return this;
        }
        public Builder ClearClearingDate() {
          PrepareBuilder();
          result.hasClearingDate = false;
          result.clearingDate_ = "";
          return this;
        }
        
        public bool HasCashFlowDirection {
          get { return result.hasCashFlowDirection; }
        }
        public int CashFlowDirection {
          get { return result.CashFlowDirection; }
          set { SetCashFlowDirection(value); }
        }
        public Builder SetCashFlowDirection(int value) {
          PrepareBuilder();
          result.hasCashFlowDirection = true;
          result.cashFlowDirection_ = value;
          return this;
        }
        public Builder ClearCashFlowDirection() {
          PrepareBuilder();
          result.hasCashFlowDirection = false;
          result.cashFlowDirection_ = 0;
          return this;
        }
      }
      static C2S() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdFlowSummary.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class S2C : pb::GeneratedMessage<S2C, S2C.Builder> {
      private S2C() { }
      private static readonly S2C defaultInstance = new S2C().MakeReadOnly();
      private static readonly string[] _s2CFieldNames = new string[] { "flowSummaryInfoList", "header" };
      private static readonly uint[] _s2CFieldTags = new uint[] { 18, 10 };
      public static S2C DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override S2C DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override S2C ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_S2C__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<S2C, S2C.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_S2C__FieldAccessorTable; }
      }
      
      public const int HeaderFieldNumber = 1;
      private bool hasHeader;
      private global::Futu.OpenApi.Pb.TrdCommon.TrdHeader header_;
      public bool HasHeader {
        get { return hasHeader; }
      }
      public global::Futu.OpenApi.Pb.TrdCommon.TrdHeader Header {
        get { return header_ ?? global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance; }
      }
      
      public const int FlowSummaryInfoListFieldNumber = 2;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo> flowSummaryInfoList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo>();
      public scg::IList<global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo> FlowSummaryInfoListList {
        get { return flowSummaryInfoList_; }
      }
      public int FlowSummaryInfoListCount {
        get { return flowSummaryInfoList_.Count; }
      }
      public global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo GetFlowSummaryInfoList(int index) {
        return flowSummaryInfoList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasHeader) return false;
          if (!Header.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _s2CFieldNames;
        if (hasHeader) {
          output.WriteMessage(1, field_names[1], Header);
        }
        if (flowSummaryInfoList_.Count > 0) {
          output.WriteMessageArray(2, field_names[0], flowSummaryInfoList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
        }
        foreach (global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo element in FlowSummaryInfoListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static S2C ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static S2C ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static S2C ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static S2C ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private S2C MakeReadOnly() {
        flowSummaryInfoList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(S2C prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<S2C, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(S2C cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private S2C result;
        
        private S2C PrepareBuilder() {
          if (resultIsReadOnly) {
            S2C original = result;
            result = new S2C();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override S2C MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.Descriptor; }
        }
        
        public override S2C DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.DefaultInstance; }
        }
        
        public override S2C BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is S2C) {
            return MergeFrom((S2C) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(S2C other) {
          if (other == global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasHeader) {
            MergeHeader(other.Header);
          }
          if (other.flowSummaryInfoList_.Count != 0) {
            result.flowSummaryInfoList_.Add(other.flowSummaryInfoList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_s2CFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _s2CFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder subBuilder = global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.CreateBuilder();
                if (result.hasHeader) {
                  subBuilder.MergeFrom(Header);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Header = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                input.ReadMessageArray(tag, field_name, result.flowSummaryInfoList_, global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasHeader {
         get { return result.hasHeader; }
        }
        public global::Futu.OpenApi.Pb.TrdCommon.TrdHeader Header {
          get { return result.Header; }
          set { SetHeader(value); }
        }
        public Builder SetHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasHeader = true;
          result.header_ = value;
          return this;
        }
        public Builder SetHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasHeader = true;
          result.header_ = builderForValue.Build();
          return this;
        }
        public Builder MergeHeader(global::Futu.OpenApi.Pb.TrdCommon.TrdHeader value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasHeader &&
              result.header_ != global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance) {
              result.header_ = global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
          } else {
            result.header_ = value;
          }
          result.hasHeader = true;
          return this;
        }
        public Builder ClearHeader() {
          PrepareBuilder();
          result.hasHeader = false;
          result.header_ = null;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo> FlowSummaryInfoListList {
          get { return PrepareBuilder().flowSummaryInfoList_; }
        }
        public int FlowSummaryInfoListCount {
          get { return result.FlowSummaryInfoListCount; }
        }
        public global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo GetFlowSummaryInfoList(int index) {
          return result.GetFlowSummaryInfoList(index);
        }
        public Builder SetFlowSummaryInfoList(int index, global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.flowSummaryInfoList_[index] = value;
          return this;
        }
        public Builder SetFlowSummaryInfoList(int index, global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.flowSummaryInfoList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddFlowSummaryInfoList(global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.flowSummaryInfoList_.Add(value);
          return this;
        }
        public Builder AddFlowSummaryInfoList(global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.flowSummaryInfoList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeFlowSummaryInfoList(scg::IEnumerable<global::Futu.OpenApi.Pb.TrdFlowSummary.FlowSummaryInfo> values) {
          PrepareBuilder();
          result.flowSummaryInfoList_.Add(values);
          return this;
        }
        public Builder ClearFlowSummaryInfoList() {
          PrepareBuilder();
          result.flowSummaryInfoList_.Clear();
          return this;
        }
      }
      static S2C() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdFlowSummary.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Request : pb::GeneratedMessage<Request, Request.Builder> {
      private Request() { }
      private static readonly Request defaultInstance = new Request().MakeReadOnly();
      private static readonly string[] _requestFieldNames = new string[] { "c2s" };
      private static readonly uint[] _requestFieldTags = new uint[] { 10 };
      public static Request DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Request DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Request ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_Request__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Request, Request.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_Request__FieldAccessorTable; }
      }
      
      public const int C2SFieldNumber = 1;
      private bool hasC2S;
      private global::Futu.OpenApi.Pb.TrdFlowSummary.C2S c2S_;
      public bool HasC2S {
        get { return hasC2S; }
      }
      public global::Futu.OpenApi.Pb.TrdFlowSummary.C2S C2S {
        get { return c2S_ ?? global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasC2S) return false;
          if (!C2S.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _requestFieldNames;
        if (hasC2S) {
          output.WriteMessage(1, field_names[0], C2S);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasC2S) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, C2S);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Request ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Request MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Request prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Request, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Request cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Request result;
        
        private Request PrepareBuilder() {
          if (resultIsReadOnly) {
            Request original = result;
            result = new Request();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Request MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.Request.Descriptor; }
        }
        
        public override Request DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.Request.DefaultInstance; }
        }
        
        public override Request BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Request) {
            return MergeFrom((Request) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Request other) {
          if (other == global::Futu.OpenApi.Pb.TrdFlowSummary.Request.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasC2S) {
            MergeC2S(other.C2S);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _requestFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.Builder subBuilder = global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.CreateBuilder();
                if (result.hasC2S) {
                  subBuilder.MergeFrom(C2S);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                C2S = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasC2S {
         get { return result.hasC2S; }
        }
        public global::Futu.OpenApi.Pb.TrdFlowSummary.C2S C2S {
          get { return result.C2S; }
          set { SetC2S(value); }
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.TrdFlowSummary.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = value;
          return this;
        }
        public Builder SetC2S(global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasC2S = true;
          result.c2S_ = builderForValue.Build();
          return this;
        }
        public Builder MergeC2S(global::Futu.OpenApi.Pb.TrdFlowSummary.C2S value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasC2S &&
              result.c2S_ != global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.DefaultInstance) {
              result.c2S_ = global::Futu.OpenApi.Pb.TrdFlowSummary.C2S.CreateBuilder(result.c2S_).MergeFrom(value).BuildPartial();
          } else {
            result.c2S_ = value;
          }
          result.hasC2S = true;
          return this;
        }
        public Builder ClearC2S() {
          PrepareBuilder();
          result.hasC2S = false;
          result.c2S_ = null;
          return this;
        }
      }
      static Request() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdFlowSummary.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
      private Response() { }
      private static readonly Response defaultInstance = new Response().MakeReadOnly();
      private static readonly string[] _responseFieldNames = new string[] { "errCode", "retMsg", "retType", "s2c" };
      private static readonly uint[] _responseFieldTags = new uint[] { 24, 18, 8, 34 };
      public static Response DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Response DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Response ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_Response__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdFlowSummary.internal__static_Trd_FlowSummary_Response__FieldAccessorTable; }
      }
      
      public const int RetTypeFieldNumber = 1;
      private bool hasRetType;
      private int retType_ = -400;
      public bool HasRetType {
        get { return hasRetType; }
      }
      public int RetType {
        get { return retType_; }
      }
      
      public const int RetMsgFieldNumber = 2;
      private bool hasRetMsg;
      private string retMsg_ = "";
      public bool HasRetMsg {
        get { return hasRetMsg; }
      }
      public string RetMsg {
        get { return retMsg_; }
      }
      
      public const int ErrCodeFieldNumber = 3;
      private bool hasErrCode;
      private int errCode_;
      public bool HasErrCode {
        get { return hasErrCode; }
      }
      public int ErrCode {
        get { return errCode_; }
      }
      
      public const int S2CFieldNumber = 4;
      private bool hasS2C;
      private global::Futu.OpenApi.Pb.TrdFlowSummary.S2C s2C_;
      public bool HasS2C {
        get { return hasS2C; }
      }
      public global::Futu.OpenApi.Pb.TrdFlowSummary.S2C S2C {
        get { return s2C_ ?? global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasRetType) return false;
          if (HasS2C) {
            if (!S2C.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _responseFieldNames;
        if (hasRetType) {
          output.WriteInt32(1, field_names[2], RetType);
        }
        if (hasRetMsg) {
          output.WriteString(2, field_names[1], RetMsg);
        }
        if (hasErrCode) {
          output.WriteInt32(3, field_names[0], ErrCode);
        }
        if (hasS2C) {
          output.WriteMessage(4, field_names[3], S2C);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRetType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RetType);
        }
        if (hasRetMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RetMsg);
        }
        if (hasErrCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ErrCode);
        }
        if (hasS2C) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, S2C);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Response ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Response MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Response prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Response cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Response result;
        
        private Response PrepareBuilder() {
          if (resultIsReadOnly) {
            Response original = result;
            result = new Response();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Response MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.Response.Descriptor; }
        }
        
        public override Response DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdFlowSummary.Response.DefaultInstance; }
        }
        
        public override Response BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Response) {
            return MergeFrom((Response) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Response other) {
          if (other == global::Futu.OpenApi.Pb.TrdFlowSummary.Response.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasRetType) {
            RetType = other.RetType;
          }
          if (other.HasRetMsg) {
            RetMsg = other.RetMsg;
          }
          if (other.HasErrCode) {
            ErrCode = other.ErrCode;
          }
          if (other.HasS2C) {
            MergeS2C(other.S2C);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _responseFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasRetType = input.ReadInt32(ref result.retType_);
                break;
              }
              case 18: {
                result.hasRetMsg = input.ReadString(ref result.retMsg_);
                break;
              }
              case 24: {
                result.hasErrCode = input.ReadInt32(ref result.errCode_);
                break;
              }
              case 34: {
                global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.Builder subBuilder = global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.CreateBuilder();
                if (result.hasS2C) {
                  subBuilder.MergeFrom(S2C);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                S2C = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasRetType {
          get { return result.hasRetType; }
        }
        public int RetType {
          get { return result.RetType; }
          set { SetRetType(value); }
        }
        public Builder SetRetType(int value) {
          PrepareBuilder();
          result.hasRetType = true;
          result.retType_ = value;
          return this;
        }
        public Builder ClearRetType() {
          PrepareBuilder();
          result.hasRetType = false;
          result.retType_ = -400;
          return this;
        }
        
        public bool HasRetMsg {
          get { return result.hasRetMsg; }
        }
        public string RetMsg {
          get { return result.RetMsg; }
          set { SetRetMsg(value); }
        }
        public Builder SetRetMsg(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRetMsg = true;
          result.retMsg_ = value;
          return this;
        }
        public Builder ClearRetMsg() {
          PrepareBuilder();
          result.hasRetMsg = false;
          result.retMsg_ = "";
          return this;
        }
        
        public bool HasErrCode {
          get { return result.hasErrCode; }
        }
        public int ErrCode {
          get { return result.ErrCode; }
          set { SetErrCode(value); }
        }
        public Builder SetErrCode(int value) {
          PrepareBuilder();
          result.hasErrCode = true;
          result.errCode_ = value;
          return this;
        }
        public Builder ClearErrCode() {
          PrepareBuilder();
          result.hasErrCode = false;
          result.errCode_ = 0;
          return this;
        }
        
        public bool HasS2C {
         get { return result.hasS2C; }
        }
        public global::Futu.OpenApi.Pb.TrdFlowSummary.S2C S2C {
          get { return result.S2C; }
          set { SetS2C(value); }
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.TrdFlowSummary.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = value;
          return this;
        }
        public Builder SetS2C(global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasS2C = true;
          result.s2C_ = builderForValue.Build();
          return this;
        }
        public Builder MergeS2C(global::Futu.OpenApi.Pb.TrdFlowSummary.S2C value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasS2C &&
              result.s2C_ != global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.DefaultInstance) {
              result.s2C_ = global::Futu.OpenApi.Pb.TrdFlowSummary.S2C.CreateBuilder(result.s2C_).MergeFrom(value).BuildPartial();
          } else {
            result.s2C_ = value;
          }
          result.hasS2C = true;
          return this;
        }
        public Builder ClearS2C() {
          PrepareBuilder();
          result.hasS2C = false;
          result.s2C_ = null;
          return this;
        }
      }
      static Response() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdFlowSummary.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
